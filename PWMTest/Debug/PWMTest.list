
PWMTest.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003d3c  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000dc  08003df8  08003df8  00013df8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003ed4  08003ed4  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  08003ed4  08003ed4  00013ed4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003edc  08003edc  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003edc  08003edc  00013edc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003ee0  08003ee0  00013ee0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08003ee4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000014c  20000010  08003ef4  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000015c  08003ef4  0002015c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020038  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000f953  00000000  00000000  0002007b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000205c  00000000  00000000  0002f9ce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000df8  00000000  00000000  00031a30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000b0a  00000000  00000000  00032828  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00017e31  00000000  00000000  00033332  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00010692  00000000  00000000  0004b163  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009d099  00000000  00000000  0005b7f5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000032e4  00000000  00000000  000f8890  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000055  00000000  00000000  000fbb74  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	20000010 	.word	0x20000010
 80000dc:	00000000 	.word	0x00000000
 80000e0:	08003de0 	.word	0x08003de0

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000014 	.word	0x20000014
 8000100:	08003de0 	.word	0x08003de0

08000104 <__udivsi3>:
 8000104:	2200      	movs	r2, #0
 8000106:	0843      	lsrs	r3, r0, #1
 8000108:	428b      	cmp	r3, r1
 800010a:	d374      	bcc.n	80001f6 <__udivsi3+0xf2>
 800010c:	0903      	lsrs	r3, r0, #4
 800010e:	428b      	cmp	r3, r1
 8000110:	d35f      	bcc.n	80001d2 <__udivsi3+0xce>
 8000112:	0a03      	lsrs	r3, r0, #8
 8000114:	428b      	cmp	r3, r1
 8000116:	d344      	bcc.n	80001a2 <__udivsi3+0x9e>
 8000118:	0b03      	lsrs	r3, r0, #12
 800011a:	428b      	cmp	r3, r1
 800011c:	d328      	bcc.n	8000170 <__udivsi3+0x6c>
 800011e:	0c03      	lsrs	r3, r0, #16
 8000120:	428b      	cmp	r3, r1
 8000122:	d30d      	bcc.n	8000140 <__udivsi3+0x3c>
 8000124:	22ff      	movs	r2, #255	; 0xff
 8000126:	0209      	lsls	r1, r1, #8
 8000128:	ba12      	rev	r2, r2
 800012a:	0c03      	lsrs	r3, r0, #16
 800012c:	428b      	cmp	r3, r1
 800012e:	d302      	bcc.n	8000136 <__udivsi3+0x32>
 8000130:	1212      	asrs	r2, r2, #8
 8000132:	0209      	lsls	r1, r1, #8
 8000134:	d065      	beq.n	8000202 <__udivsi3+0xfe>
 8000136:	0b03      	lsrs	r3, r0, #12
 8000138:	428b      	cmp	r3, r1
 800013a:	d319      	bcc.n	8000170 <__udivsi3+0x6c>
 800013c:	e000      	b.n	8000140 <__udivsi3+0x3c>
 800013e:	0a09      	lsrs	r1, r1, #8
 8000140:	0bc3      	lsrs	r3, r0, #15
 8000142:	428b      	cmp	r3, r1
 8000144:	d301      	bcc.n	800014a <__udivsi3+0x46>
 8000146:	03cb      	lsls	r3, r1, #15
 8000148:	1ac0      	subs	r0, r0, r3
 800014a:	4152      	adcs	r2, r2
 800014c:	0b83      	lsrs	r3, r0, #14
 800014e:	428b      	cmp	r3, r1
 8000150:	d301      	bcc.n	8000156 <__udivsi3+0x52>
 8000152:	038b      	lsls	r3, r1, #14
 8000154:	1ac0      	subs	r0, r0, r3
 8000156:	4152      	adcs	r2, r2
 8000158:	0b43      	lsrs	r3, r0, #13
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x5e>
 800015e:	034b      	lsls	r3, r1, #13
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b03      	lsrs	r3, r0, #12
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x6a>
 800016a:	030b      	lsls	r3, r1, #12
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0ac3      	lsrs	r3, r0, #11
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x76>
 8000176:	02cb      	lsls	r3, r1, #11
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0a83      	lsrs	r3, r0, #10
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x82>
 8000182:	028b      	lsls	r3, r1, #10
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0a43      	lsrs	r3, r0, #9
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x8e>
 800018e:	024b      	lsls	r3, r1, #9
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a03      	lsrs	r3, r0, #8
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x9a>
 800019a:	020b      	lsls	r3, r1, #8
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	d2cd      	bcs.n	800013e <__udivsi3+0x3a>
 80001a2:	09c3      	lsrs	r3, r0, #7
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d301      	bcc.n	80001ac <__udivsi3+0xa8>
 80001a8:	01cb      	lsls	r3, r1, #7
 80001aa:	1ac0      	subs	r0, r0, r3
 80001ac:	4152      	adcs	r2, r2
 80001ae:	0983      	lsrs	r3, r0, #6
 80001b0:	428b      	cmp	r3, r1
 80001b2:	d301      	bcc.n	80001b8 <__udivsi3+0xb4>
 80001b4:	018b      	lsls	r3, r1, #6
 80001b6:	1ac0      	subs	r0, r0, r3
 80001b8:	4152      	adcs	r2, r2
 80001ba:	0943      	lsrs	r3, r0, #5
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xc0>
 80001c0:	014b      	lsls	r3, r1, #5
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0903      	lsrs	r3, r0, #4
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xcc>
 80001cc:	010b      	lsls	r3, r1, #4
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	08c3      	lsrs	r3, r0, #3
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xd8>
 80001d8:	00cb      	lsls	r3, r1, #3
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0883      	lsrs	r3, r0, #2
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xe4>
 80001e4:	008b      	lsls	r3, r1, #2
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0843      	lsrs	r3, r0, #1
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xf0>
 80001f0:	004b      	lsls	r3, r1, #1
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	1a41      	subs	r1, r0, r1
 80001f8:	d200      	bcs.n	80001fc <__udivsi3+0xf8>
 80001fa:	4601      	mov	r1, r0
 80001fc:	4152      	adcs	r2, r2
 80001fe:	4610      	mov	r0, r2
 8000200:	4770      	bx	lr
 8000202:	e7ff      	b.n	8000204 <__udivsi3+0x100>
 8000204:	b501      	push	{r0, lr}
 8000206:	2000      	movs	r0, #0
 8000208:	f000 f8f0 	bl	80003ec <__aeabi_idiv0>
 800020c:	bd02      	pop	{r1, pc}
 800020e:	46c0      	nop			; (mov r8, r8)

08000210 <__aeabi_uidivmod>:
 8000210:	2900      	cmp	r1, #0
 8000212:	d0f7      	beq.n	8000204 <__udivsi3+0x100>
 8000214:	e776      	b.n	8000104 <__udivsi3>
 8000216:	4770      	bx	lr

08000218 <__divsi3>:
 8000218:	4603      	mov	r3, r0
 800021a:	430b      	orrs	r3, r1
 800021c:	d47f      	bmi.n	800031e <__divsi3+0x106>
 800021e:	2200      	movs	r2, #0
 8000220:	0843      	lsrs	r3, r0, #1
 8000222:	428b      	cmp	r3, r1
 8000224:	d374      	bcc.n	8000310 <__divsi3+0xf8>
 8000226:	0903      	lsrs	r3, r0, #4
 8000228:	428b      	cmp	r3, r1
 800022a:	d35f      	bcc.n	80002ec <__divsi3+0xd4>
 800022c:	0a03      	lsrs	r3, r0, #8
 800022e:	428b      	cmp	r3, r1
 8000230:	d344      	bcc.n	80002bc <__divsi3+0xa4>
 8000232:	0b03      	lsrs	r3, r0, #12
 8000234:	428b      	cmp	r3, r1
 8000236:	d328      	bcc.n	800028a <__divsi3+0x72>
 8000238:	0c03      	lsrs	r3, r0, #16
 800023a:	428b      	cmp	r3, r1
 800023c:	d30d      	bcc.n	800025a <__divsi3+0x42>
 800023e:	22ff      	movs	r2, #255	; 0xff
 8000240:	0209      	lsls	r1, r1, #8
 8000242:	ba12      	rev	r2, r2
 8000244:	0c03      	lsrs	r3, r0, #16
 8000246:	428b      	cmp	r3, r1
 8000248:	d302      	bcc.n	8000250 <__divsi3+0x38>
 800024a:	1212      	asrs	r2, r2, #8
 800024c:	0209      	lsls	r1, r1, #8
 800024e:	d065      	beq.n	800031c <__divsi3+0x104>
 8000250:	0b03      	lsrs	r3, r0, #12
 8000252:	428b      	cmp	r3, r1
 8000254:	d319      	bcc.n	800028a <__divsi3+0x72>
 8000256:	e000      	b.n	800025a <__divsi3+0x42>
 8000258:	0a09      	lsrs	r1, r1, #8
 800025a:	0bc3      	lsrs	r3, r0, #15
 800025c:	428b      	cmp	r3, r1
 800025e:	d301      	bcc.n	8000264 <__divsi3+0x4c>
 8000260:	03cb      	lsls	r3, r1, #15
 8000262:	1ac0      	subs	r0, r0, r3
 8000264:	4152      	adcs	r2, r2
 8000266:	0b83      	lsrs	r3, r0, #14
 8000268:	428b      	cmp	r3, r1
 800026a:	d301      	bcc.n	8000270 <__divsi3+0x58>
 800026c:	038b      	lsls	r3, r1, #14
 800026e:	1ac0      	subs	r0, r0, r3
 8000270:	4152      	adcs	r2, r2
 8000272:	0b43      	lsrs	r3, r0, #13
 8000274:	428b      	cmp	r3, r1
 8000276:	d301      	bcc.n	800027c <__divsi3+0x64>
 8000278:	034b      	lsls	r3, r1, #13
 800027a:	1ac0      	subs	r0, r0, r3
 800027c:	4152      	adcs	r2, r2
 800027e:	0b03      	lsrs	r3, r0, #12
 8000280:	428b      	cmp	r3, r1
 8000282:	d301      	bcc.n	8000288 <__divsi3+0x70>
 8000284:	030b      	lsls	r3, r1, #12
 8000286:	1ac0      	subs	r0, r0, r3
 8000288:	4152      	adcs	r2, r2
 800028a:	0ac3      	lsrs	r3, r0, #11
 800028c:	428b      	cmp	r3, r1
 800028e:	d301      	bcc.n	8000294 <__divsi3+0x7c>
 8000290:	02cb      	lsls	r3, r1, #11
 8000292:	1ac0      	subs	r0, r0, r3
 8000294:	4152      	adcs	r2, r2
 8000296:	0a83      	lsrs	r3, r0, #10
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x88>
 800029c:	028b      	lsls	r3, r1, #10
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0a43      	lsrs	r3, r0, #9
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x94>
 80002a8:	024b      	lsls	r3, r1, #9
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0a03      	lsrs	r3, r0, #8
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0xa0>
 80002b4:	020b      	lsls	r3, r1, #8
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	d2cd      	bcs.n	8000258 <__divsi3+0x40>
 80002bc:	09c3      	lsrs	r3, r0, #7
 80002be:	428b      	cmp	r3, r1
 80002c0:	d301      	bcc.n	80002c6 <__divsi3+0xae>
 80002c2:	01cb      	lsls	r3, r1, #7
 80002c4:	1ac0      	subs	r0, r0, r3
 80002c6:	4152      	adcs	r2, r2
 80002c8:	0983      	lsrs	r3, r0, #6
 80002ca:	428b      	cmp	r3, r1
 80002cc:	d301      	bcc.n	80002d2 <__divsi3+0xba>
 80002ce:	018b      	lsls	r3, r1, #6
 80002d0:	1ac0      	subs	r0, r0, r3
 80002d2:	4152      	adcs	r2, r2
 80002d4:	0943      	lsrs	r3, r0, #5
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d301      	bcc.n	80002de <__divsi3+0xc6>
 80002da:	014b      	lsls	r3, r1, #5
 80002dc:	1ac0      	subs	r0, r0, r3
 80002de:	4152      	adcs	r2, r2
 80002e0:	0903      	lsrs	r3, r0, #4
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d301      	bcc.n	80002ea <__divsi3+0xd2>
 80002e6:	010b      	lsls	r3, r1, #4
 80002e8:	1ac0      	subs	r0, r0, r3
 80002ea:	4152      	adcs	r2, r2
 80002ec:	08c3      	lsrs	r3, r0, #3
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d301      	bcc.n	80002f6 <__divsi3+0xde>
 80002f2:	00cb      	lsls	r3, r1, #3
 80002f4:	1ac0      	subs	r0, r0, r3
 80002f6:	4152      	adcs	r2, r2
 80002f8:	0883      	lsrs	r3, r0, #2
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xea>
 80002fe:	008b      	lsls	r3, r1, #2
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	0843      	lsrs	r3, r0, #1
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xf6>
 800030a:	004b      	lsls	r3, r1, #1
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	1a41      	subs	r1, r0, r1
 8000312:	d200      	bcs.n	8000316 <__divsi3+0xfe>
 8000314:	4601      	mov	r1, r0
 8000316:	4152      	adcs	r2, r2
 8000318:	4610      	mov	r0, r2
 800031a:	4770      	bx	lr
 800031c:	e05d      	b.n	80003da <__divsi3+0x1c2>
 800031e:	0fca      	lsrs	r2, r1, #31
 8000320:	d000      	beq.n	8000324 <__divsi3+0x10c>
 8000322:	4249      	negs	r1, r1
 8000324:	1003      	asrs	r3, r0, #32
 8000326:	d300      	bcc.n	800032a <__divsi3+0x112>
 8000328:	4240      	negs	r0, r0
 800032a:	4053      	eors	r3, r2
 800032c:	2200      	movs	r2, #0
 800032e:	469c      	mov	ip, r3
 8000330:	0903      	lsrs	r3, r0, #4
 8000332:	428b      	cmp	r3, r1
 8000334:	d32d      	bcc.n	8000392 <__divsi3+0x17a>
 8000336:	0a03      	lsrs	r3, r0, #8
 8000338:	428b      	cmp	r3, r1
 800033a:	d312      	bcc.n	8000362 <__divsi3+0x14a>
 800033c:	22fc      	movs	r2, #252	; 0xfc
 800033e:	0189      	lsls	r1, r1, #6
 8000340:	ba12      	rev	r2, r2
 8000342:	0a03      	lsrs	r3, r0, #8
 8000344:	428b      	cmp	r3, r1
 8000346:	d30c      	bcc.n	8000362 <__divsi3+0x14a>
 8000348:	0189      	lsls	r1, r1, #6
 800034a:	1192      	asrs	r2, r2, #6
 800034c:	428b      	cmp	r3, r1
 800034e:	d308      	bcc.n	8000362 <__divsi3+0x14a>
 8000350:	0189      	lsls	r1, r1, #6
 8000352:	1192      	asrs	r2, r2, #6
 8000354:	428b      	cmp	r3, r1
 8000356:	d304      	bcc.n	8000362 <__divsi3+0x14a>
 8000358:	0189      	lsls	r1, r1, #6
 800035a:	d03a      	beq.n	80003d2 <__divsi3+0x1ba>
 800035c:	1192      	asrs	r2, r2, #6
 800035e:	e000      	b.n	8000362 <__divsi3+0x14a>
 8000360:	0989      	lsrs	r1, r1, #6
 8000362:	09c3      	lsrs	r3, r0, #7
 8000364:	428b      	cmp	r3, r1
 8000366:	d301      	bcc.n	800036c <__divsi3+0x154>
 8000368:	01cb      	lsls	r3, r1, #7
 800036a:	1ac0      	subs	r0, r0, r3
 800036c:	4152      	adcs	r2, r2
 800036e:	0983      	lsrs	r3, r0, #6
 8000370:	428b      	cmp	r3, r1
 8000372:	d301      	bcc.n	8000378 <__divsi3+0x160>
 8000374:	018b      	lsls	r3, r1, #6
 8000376:	1ac0      	subs	r0, r0, r3
 8000378:	4152      	adcs	r2, r2
 800037a:	0943      	lsrs	r3, r0, #5
 800037c:	428b      	cmp	r3, r1
 800037e:	d301      	bcc.n	8000384 <__divsi3+0x16c>
 8000380:	014b      	lsls	r3, r1, #5
 8000382:	1ac0      	subs	r0, r0, r3
 8000384:	4152      	adcs	r2, r2
 8000386:	0903      	lsrs	r3, r0, #4
 8000388:	428b      	cmp	r3, r1
 800038a:	d301      	bcc.n	8000390 <__divsi3+0x178>
 800038c:	010b      	lsls	r3, r1, #4
 800038e:	1ac0      	subs	r0, r0, r3
 8000390:	4152      	adcs	r2, r2
 8000392:	08c3      	lsrs	r3, r0, #3
 8000394:	428b      	cmp	r3, r1
 8000396:	d301      	bcc.n	800039c <__divsi3+0x184>
 8000398:	00cb      	lsls	r3, r1, #3
 800039a:	1ac0      	subs	r0, r0, r3
 800039c:	4152      	adcs	r2, r2
 800039e:	0883      	lsrs	r3, r0, #2
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x190>
 80003a4:	008b      	lsls	r3, r1, #2
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	d2d9      	bcs.n	8000360 <__divsi3+0x148>
 80003ac:	0843      	lsrs	r3, r0, #1
 80003ae:	428b      	cmp	r3, r1
 80003b0:	d301      	bcc.n	80003b6 <__divsi3+0x19e>
 80003b2:	004b      	lsls	r3, r1, #1
 80003b4:	1ac0      	subs	r0, r0, r3
 80003b6:	4152      	adcs	r2, r2
 80003b8:	1a41      	subs	r1, r0, r1
 80003ba:	d200      	bcs.n	80003be <__divsi3+0x1a6>
 80003bc:	4601      	mov	r1, r0
 80003be:	4663      	mov	r3, ip
 80003c0:	4152      	adcs	r2, r2
 80003c2:	105b      	asrs	r3, r3, #1
 80003c4:	4610      	mov	r0, r2
 80003c6:	d301      	bcc.n	80003cc <__divsi3+0x1b4>
 80003c8:	4240      	negs	r0, r0
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	d500      	bpl.n	80003d0 <__divsi3+0x1b8>
 80003ce:	4249      	negs	r1, r1
 80003d0:	4770      	bx	lr
 80003d2:	4663      	mov	r3, ip
 80003d4:	105b      	asrs	r3, r3, #1
 80003d6:	d300      	bcc.n	80003da <__divsi3+0x1c2>
 80003d8:	4240      	negs	r0, r0
 80003da:	b501      	push	{r0, lr}
 80003dc:	2000      	movs	r0, #0
 80003de:	f000 f805 	bl	80003ec <__aeabi_idiv0>
 80003e2:	bd02      	pop	{r1, pc}

080003e4 <__aeabi_idivmod>:
 80003e4:	2900      	cmp	r1, #0
 80003e6:	d0f8      	beq.n	80003da <__divsi3+0x1c2>
 80003e8:	e716      	b.n	8000218 <__divsi3>
 80003ea:	4770      	bx	lr

080003ec <__aeabi_idiv0>:
 80003ec:	4770      	bx	lr
 80003ee:	46c0      	nop			; (mov r8, r8)

080003f0 <__aeabi_uldivmod>:
 80003f0:	2b00      	cmp	r3, #0
 80003f2:	d111      	bne.n	8000418 <__aeabi_uldivmod+0x28>
 80003f4:	2a00      	cmp	r2, #0
 80003f6:	d10f      	bne.n	8000418 <__aeabi_uldivmod+0x28>
 80003f8:	2900      	cmp	r1, #0
 80003fa:	d100      	bne.n	80003fe <__aeabi_uldivmod+0xe>
 80003fc:	2800      	cmp	r0, #0
 80003fe:	d002      	beq.n	8000406 <__aeabi_uldivmod+0x16>
 8000400:	2100      	movs	r1, #0
 8000402:	43c9      	mvns	r1, r1
 8000404:	0008      	movs	r0, r1
 8000406:	b407      	push	{r0, r1, r2}
 8000408:	4802      	ldr	r0, [pc, #8]	; (8000414 <__aeabi_uldivmod+0x24>)
 800040a:	a102      	add	r1, pc, #8	; (adr r1, 8000414 <__aeabi_uldivmod+0x24>)
 800040c:	1840      	adds	r0, r0, r1
 800040e:	9002      	str	r0, [sp, #8]
 8000410:	bd03      	pop	{r0, r1, pc}
 8000412:	46c0      	nop			; (mov r8, r8)
 8000414:	ffffffd9 	.word	0xffffffd9
 8000418:	b403      	push	{r0, r1}
 800041a:	4668      	mov	r0, sp
 800041c:	b501      	push	{r0, lr}
 800041e:	9802      	ldr	r0, [sp, #8]
 8000420:	f000 f806 	bl	8000430 <__udivmoddi4>
 8000424:	9b01      	ldr	r3, [sp, #4]
 8000426:	469e      	mov	lr, r3
 8000428:	b002      	add	sp, #8
 800042a:	bc0c      	pop	{r2, r3}
 800042c:	4770      	bx	lr
 800042e:	46c0      	nop			; (mov r8, r8)

08000430 <__udivmoddi4>:
 8000430:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000432:	4657      	mov	r7, sl
 8000434:	464e      	mov	r6, r9
 8000436:	4645      	mov	r5, r8
 8000438:	46de      	mov	lr, fp
 800043a:	b5e0      	push	{r5, r6, r7, lr}
 800043c:	0004      	movs	r4, r0
 800043e:	000d      	movs	r5, r1
 8000440:	4692      	mov	sl, r2
 8000442:	4699      	mov	r9, r3
 8000444:	b083      	sub	sp, #12
 8000446:	428b      	cmp	r3, r1
 8000448:	d830      	bhi.n	80004ac <__udivmoddi4+0x7c>
 800044a:	d02d      	beq.n	80004a8 <__udivmoddi4+0x78>
 800044c:	4649      	mov	r1, r9
 800044e:	4650      	mov	r0, sl
 8000450:	f000 f8ba 	bl	80005c8 <__clzdi2>
 8000454:	0029      	movs	r1, r5
 8000456:	0006      	movs	r6, r0
 8000458:	0020      	movs	r0, r4
 800045a:	f000 f8b5 	bl	80005c8 <__clzdi2>
 800045e:	1a33      	subs	r3, r6, r0
 8000460:	4698      	mov	r8, r3
 8000462:	3b20      	subs	r3, #32
 8000464:	d434      	bmi.n	80004d0 <__udivmoddi4+0xa0>
 8000466:	469b      	mov	fp, r3
 8000468:	4653      	mov	r3, sl
 800046a:	465a      	mov	r2, fp
 800046c:	4093      	lsls	r3, r2
 800046e:	4642      	mov	r2, r8
 8000470:	001f      	movs	r7, r3
 8000472:	4653      	mov	r3, sl
 8000474:	4093      	lsls	r3, r2
 8000476:	001e      	movs	r6, r3
 8000478:	42af      	cmp	r7, r5
 800047a:	d83b      	bhi.n	80004f4 <__udivmoddi4+0xc4>
 800047c:	42af      	cmp	r7, r5
 800047e:	d100      	bne.n	8000482 <__udivmoddi4+0x52>
 8000480:	e079      	b.n	8000576 <__udivmoddi4+0x146>
 8000482:	465b      	mov	r3, fp
 8000484:	1ba4      	subs	r4, r4, r6
 8000486:	41bd      	sbcs	r5, r7
 8000488:	2b00      	cmp	r3, #0
 800048a:	da00      	bge.n	800048e <__udivmoddi4+0x5e>
 800048c:	e076      	b.n	800057c <__udivmoddi4+0x14c>
 800048e:	2200      	movs	r2, #0
 8000490:	2300      	movs	r3, #0
 8000492:	9200      	str	r2, [sp, #0]
 8000494:	9301      	str	r3, [sp, #4]
 8000496:	2301      	movs	r3, #1
 8000498:	465a      	mov	r2, fp
 800049a:	4093      	lsls	r3, r2
 800049c:	9301      	str	r3, [sp, #4]
 800049e:	2301      	movs	r3, #1
 80004a0:	4642      	mov	r2, r8
 80004a2:	4093      	lsls	r3, r2
 80004a4:	9300      	str	r3, [sp, #0]
 80004a6:	e029      	b.n	80004fc <__udivmoddi4+0xcc>
 80004a8:	4282      	cmp	r2, r0
 80004aa:	d9cf      	bls.n	800044c <__udivmoddi4+0x1c>
 80004ac:	2200      	movs	r2, #0
 80004ae:	2300      	movs	r3, #0
 80004b0:	9200      	str	r2, [sp, #0]
 80004b2:	9301      	str	r3, [sp, #4]
 80004b4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80004b6:	2b00      	cmp	r3, #0
 80004b8:	d001      	beq.n	80004be <__udivmoddi4+0x8e>
 80004ba:	601c      	str	r4, [r3, #0]
 80004bc:	605d      	str	r5, [r3, #4]
 80004be:	9800      	ldr	r0, [sp, #0]
 80004c0:	9901      	ldr	r1, [sp, #4]
 80004c2:	b003      	add	sp, #12
 80004c4:	bcf0      	pop	{r4, r5, r6, r7}
 80004c6:	46bb      	mov	fp, r7
 80004c8:	46b2      	mov	sl, r6
 80004ca:	46a9      	mov	r9, r5
 80004cc:	46a0      	mov	r8, r4
 80004ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80004d0:	4642      	mov	r2, r8
 80004d2:	469b      	mov	fp, r3
 80004d4:	2320      	movs	r3, #32
 80004d6:	1a9b      	subs	r3, r3, r2
 80004d8:	4652      	mov	r2, sl
 80004da:	40da      	lsrs	r2, r3
 80004dc:	4641      	mov	r1, r8
 80004de:	0013      	movs	r3, r2
 80004e0:	464a      	mov	r2, r9
 80004e2:	408a      	lsls	r2, r1
 80004e4:	0017      	movs	r7, r2
 80004e6:	4642      	mov	r2, r8
 80004e8:	431f      	orrs	r7, r3
 80004ea:	4653      	mov	r3, sl
 80004ec:	4093      	lsls	r3, r2
 80004ee:	001e      	movs	r6, r3
 80004f0:	42af      	cmp	r7, r5
 80004f2:	d9c3      	bls.n	800047c <__udivmoddi4+0x4c>
 80004f4:	2200      	movs	r2, #0
 80004f6:	2300      	movs	r3, #0
 80004f8:	9200      	str	r2, [sp, #0]
 80004fa:	9301      	str	r3, [sp, #4]
 80004fc:	4643      	mov	r3, r8
 80004fe:	2b00      	cmp	r3, #0
 8000500:	d0d8      	beq.n	80004b4 <__udivmoddi4+0x84>
 8000502:	07fb      	lsls	r3, r7, #31
 8000504:	0872      	lsrs	r2, r6, #1
 8000506:	431a      	orrs	r2, r3
 8000508:	4646      	mov	r6, r8
 800050a:	087b      	lsrs	r3, r7, #1
 800050c:	e00e      	b.n	800052c <__udivmoddi4+0xfc>
 800050e:	42ab      	cmp	r3, r5
 8000510:	d101      	bne.n	8000516 <__udivmoddi4+0xe6>
 8000512:	42a2      	cmp	r2, r4
 8000514:	d80c      	bhi.n	8000530 <__udivmoddi4+0x100>
 8000516:	1aa4      	subs	r4, r4, r2
 8000518:	419d      	sbcs	r5, r3
 800051a:	2001      	movs	r0, #1
 800051c:	1924      	adds	r4, r4, r4
 800051e:	416d      	adcs	r5, r5
 8000520:	2100      	movs	r1, #0
 8000522:	3e01      	subs	r6, #1
 8000524:	1824      	adds	r4, r4, r0
 8000526:	414d      	adcs	r5, r1
 8000528:	2e00      	cmp	r6, #0
 800052a:	d006      	beq.n	800053a <__udivmoddi4+0x10a>
 800052c:	42ab      	cmp	r3, r5
 800052e:	d9ee      	bls.n	800050e <__udivmoddi4+0xde>
 8000530:	3e01      	subs	r6, #1
 8000532:	1924      	adds	r4, r4, r4
 8000534:	416d      	adcs	r5, r5
 8000536:	2e00      	cmp	r6, #0
 8000538:	d1f8      	bne.n	800052c <__udivmoddi4+0xfc>
 800053a:	9800      	ldr	r0, [sp, #0]
 800053c:	9901      	ldr	r1, [sp, #4]
 800053e:	465b      	mov	r3, fp
 8000540:	1900      	adds	r0, r0, r4
 8000542:	4169      	adcs	r1, r5
 8000544:	2b00      	cmp	r3, #0
 8000546:	db24      	blt.n	8000592 <__udivmoddi4+0x162>
 8000548:	002b      	movs	r3, r5
 800054a:	465a      	mov	r2, fp
 800054c:	4644      	mov	r4, r8
 800054e:	40d3      	lsrs	r3, r2
 8000550:	002a      	movs	r2, r5
 8000552:	40e2      	lsrs	r2, r4
 8000554:	001c      	movs	r4, r3
 8000556:	465b      	mov	r3, fp
 8000558:	0015      	movs	r5, r2
 800055a:	2b00      	cmp	r3, #0
 800055c:	db2a      	blt.n	80005b4 <__udivmoddi4+0x184>
 800055e:	0026      	movs	r6, r4
 8000560:	409e      	lsls	r6, r3
 8000562:	0033      	movs	r3, r6
 8000564:	0026      	movs	r6, r4
 8000566:	4647      	mov	r7, r8
 8000568:	40be      	lsls	r6, r7
 800056a:	0032      	movs	r2, r6
 800056c:	1a80      	subs	r0, r0, r2
 800056e:	4199      	sbcs	r1, r3
 8000570:	9000      	str	r0, [sp, #0]
 8000572:	9101      	str	r1, [sp, #4]
 8000574:	e79e      	b.n	80004b4 <__udivmoddi4+0x84>
 8000576:	42a3      	cmp	r3, r4
 8000578:	d8bc      	bhi.n	80004f4 <__udivmoddi4+0xc4>
 800057a:	e782      	b.n	8000482 <__udivmoddi4+0x52>
 800057c:	4642      	mov	r2, r8
 800057e:	2320      	movs	r3, #32
 8000580:	2100      	movs	r1, #0
 8000582:	1a9b      	subs	r3, r3, r2
 8000584:	2200      	movs	r2, #0
 8000586:	9100      	str	r1, [sp, #0]
 8000588:	9201      	str	r2, [sp, #4]
 800058a:	2201      	movs	r2, #1
 800058c:	40da      	lsrs	r2, r3
 800058e:	9201      	str	r2, [sp, #4]
 8000590:	e785      	b.n	800049e <__udivmoddi4+0x6e>
 8000592:	4642      	mov	r2, r8
 8000594:	2320      	movs	r3, #32
 8000596:	1a9b      	subs	r3, r3, r2
 8000598:	002a      	movs	r2, r5
 800059a:	4646      	mov	r6, r8
 800059c:	409a      	lsls	r2, r3
 800059e:	0023      	movs	r3, r4
 80005a0:	40f3      	lsrs	r3, r6
 80005a2:	4644      	mov	r4, r8
 80005a4:	4313      	orrs	r3, r2
 80005a6:	002a      	movs	r2, r5
 80005a8:	40e2      	lsrs	r2, r4
 80005aa:	001c      	movs	r4, r3
 80005ac:	465b      	mov	r3, fp
 80005ae:	0015      	movs	r5, r2
 80005b0:	2b00      	cmp	r3, #0
 80005b2:	dad4      	bge.n	800055e <__udivmoddi4+0x12e>
 80005b4:	4642      	mov	r2, r8
 80005b6:	002f      	movs	r7, r5
 80005b8:	2320      	movs	r3, #32
 80005ba:	0026      	movs	r6, r4
 80005bc:	4097      	lsls	r7, r2
 80005be:	1a9b      	subs	r3, r3, r2
 80005c0:	40de      	lsrs	r6, r3
 80005c2:	003b      	movs	r3, r7
 80005c4:	4333      	orrs	r3, r6
 80005c6:	e7cd      	b.n	8000564 <__udivmoddi4+0x134>

080005c8 <__clzdi2>:
 80005c8:	b510      	push	{r4, lr}
 80005ca:	2900      	cmp	r1, #0
 80005cc:	d103      	bne.n	80005d6 <__clzdi2+0xe>
 80005ce:	f000 f807 	bl	80005e0 <__clzsi2>
 80005d2:	3020      	adds	r0, #32
 80005d4:	e002      	b.n	80005dc <__clzdi2+0x14>
 80005d6:	0008      	movs	r0, r1
 80005d8:	f000 f802 	bl	80005e0 <__clzsi2>
 80005dc:	bd10      	pop	{r4, pc}
 80005de:	46c0      	nop			; (mov r8, r8)

080005e0 <__clzsi2>:
 80005e0:	211c      	movs	r1, #28
 80005e2:	2301      	movs	r3, #1
 80005e4:	041b      	lsls	r3, r3, #16
 80005e6:	4298      	cmp	r0, r3
 80005e8:	d301      	bcc.n	80005ee <__clzsi2+0xe>
 80005ea:	0c00      	lsrs	r0, r0, #16
 80005ec:	3910      	subs	r1, #16
 80005ee:	0a1b      	lsrs	r3, r3, #8
 80005f0:	4298      	cmp	r0, r3
 80005f2:	d301      	bcc.n	80005f8 <__clzsi2+0x18>
 80005f4:	0a00      	lsrs	r0, r0, #8
 80005f6:	3908      	subs	r1, #8
 80005f8:	091b      	lsrs	r3, r3, #4
 80005fa:	4298      	cmp	r0, r3
 80005fc:	d301      	bcc.n	8000602 <__clzsi2+0x22>
 80005fe:	0900      	lsrs	r0, r0, #4
 8000600:	3904      	subs	r1, #4
 8000602:	a202      	add	r2, pc, #8	; (adr r2, 800060c <__clzsi2+0x2c>)
 8000604:	5c10      	ldrb	r0, [r2, r0]
 8000606:	1840      	adds	r0, r0, r1
 8000608:	4770      	bx	lr
 800060a:	46c0      	nop			; (mov r8, r8)
 800060c:	02020304 	.word	0x02020304
 8000610:	01010101 	.word	0x01010101
	...

0800061c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800061c:	b580      	push	{r7, lr}
 800061e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000620:	f000 fcc8 	bl	8000fb4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000624:	f000 f81c 	bl	8000660 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000628:	f000 f9d8 	bl	80009dc <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800062c:	f000 f988 	bl	8000940 <MX_USART2_UART_Init>
  MX_TIM1_Init();
 8000630:	f000 f85e 	bl	80006f0 <MX_TIM1_Init>
  MX_TIM2_Init();
 8000634:	f000 f91c 	bl	8000870 <MX_TIM2_Init>
//	  HAL_Delay(10000);
//	  EndLaunching();
//	  HAL_Delay(5000);


	  ChangeVerticalAngle(5, 1);
 8000638:	2101      	movs	r1, #1
 800063a:	2005      	movs	r0, #5
 800063c:	f000 fa84 	bl	8000b48 <ChangeVerticalAngle>
	  HAL_Delay(6000);
 8000640:	4b06      	ldr	r3, [pc, #24]	; (800065c <main+0x40>)
 8000642:	0018      	movs	r0, r3
 8000644:	f000 fd3c 	bl	80010c0 <HAL_Delay>
	  ChangeVerticalAngle(1,5);
 8000648:	2105      	movs	r1, #5
 800064a:	2001      	movs	r0, #1
 800064c:	f000 fa7c 	bl	8000b48 <ChangeVerticalAngle>
	  HAL_Delay(6000);
 8000650:	4b02      	ldr	r3, [pc, #8]	; (800065c <main+0x40>)
 8000652:	0018      	movs	r0, r3
 8000654:	f000 fd34 	bl	80010c0 <HAL_Delay>
	  ChangeVerticalAngle(5, 1);
 8000658:	e7ee      	b.n	8000638 <main+0x1c>
 800065a:	46c0      	nop			; (mov r8, r8)
 800065c:	00001770 	.word	0x00001770

08000660 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000660:	b590      	push	{r4, r7, lr}
 8000662:	b093      	sub	sp, #76	; 0x4c
 8000664:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000666:	2410      	movs	r4, #16
 8000668:	193b      	adds	r3, r7, r4
 800066a:	0018      	movs	r0, r3
 800066c:	2338      	movs	r3, #56	; 0x38
 800066e:	001a      	movs	r2, r3
 8000670:	2100      	movs	r1, #0
 8000672:	f003 fb89 	bl	8003d88 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000676:	003b      	movs	r3, r7
 8000678:	0018      	movs	r0, r3
 800067a:	2310      	movs	r3, #16
 800067c:	001a      	movs	r2, r3
 800067e:	2100      	movs	r1, #0
 8000680:	f003 fb82 	bl	8003d88 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000684:	2380      	movs	r3, #128	; 0x80
 8000686:	009b      	lsls	r3, r3, #2
 8000688:	0018      	movs	r0, r3
 800068a:	f000 ff73 	bl	8001574 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800068e:	193b      	adds	r3, r7, r4
 8000690:	2202      	movs	r2, #2
 8000692:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000694:	193b      	adds	r3, r7, r4
 8000696:	2280      	movs	r2, #128	; 0x80
 8000698:	0052      	lsls	r2, r2, #1
 800069a:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 800069c:	193b      	adds	r3, r7, r4
 800069e:	2200      	movs	r2, #0
 80006a0:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006a2:	193b      	adds	r3, r7, r4
 80006a4:	2240      	movs	r2, #64	; 0x40
 80006a6:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80006a8:	193b      	adds	r3, r7, r4
 80006aa:	2200      	movs	r2, #0
 80006ac:	61da      	str	r2, [r3, #28]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006ae:	193b      	adds	r3, r7, r4
 80006b0:	0018      	movs	r0, r3
 80006b2:	f000 ffab 	bl	800160c <HAL_RCC_OscConfig>
 80006b6:	1e03      	subs	r3, r0, #0
 80006b8:	d001      	beq.n	80006be <SystemClock_Config+0x5e>
  {
    Error_Handler();
 80006ba:	f000 fad5 	bl	8000c68 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006be:	003b      	movs	r3, r7
 80006c0:	2207      	movs	r2, #7
 80006c2:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80006c4:	003b      	movs	r3, r7
 80006c6:	2200      	movs	r2, #0
 80006c8:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006ca:	003b      	movs	r3, r7
 80006cc:	2200      	movs	r2, #0
 80006ce:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006d0:	003b      	movs	r3, r7
 80006d2:	2200      	movs	r2, #0
 80006d4:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80006d6:	003b      	movs	r3, r7
 80006d8:	2100      	movs	r1, #0
 80006da:	0018      	movs	r0, r3
 80006dc:	f001 fab0 	bl	8001c40 <HAL_RCC_ClockConfig>
 80006e0:	1e03      	subs	r3, r0, #0
 80006e2:	d001      	beq.n	80006e8 <SystemClock_Config+0x88>
  {
    Error_Handler();
 80006e4:	f000 fac0 	bl	8000c68 <Error_Handler>
  }
}
 80006e8:	46c0      	nop			; (mov r8, r8)
 80006ea:	46bd      	mov	sp, r7
 80006ec:	b013      	add	sp, #76	; 0x4c
 80006ee:	bd90      	pop	{r4, r7, pc}

080006f0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80006f0:	b580      	push	{r7, lr}
 80006f2:	b098      	sub	sp, #96	; 0x60
 80006f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80006f6:	2354      	movs	r3, #84	; 0x54
 80006f8:	18fb      	adds	r3, r7, r3
 80006fa:	0018      	movs	r0, r3
 80006fc:	230c      	movs	r3, #12
 80006fe:	001a      	movs	r2, r3
 8000700:	2100      	movs	r1, #0
 8000702:	f003 fb41 	bl	8003d88 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000706:	2338      	movs	r3, #56	; 0x38
 8000708:	18fb      	adds	r3, r7, r3
 800070a:	0018      	movs	r0, r3
 800070c:	231c      	movs	r3, #28
 800070e:	001a      	movs	r2, r3
 8000710:	2100      	movs	r1, #0
 8000712:	f003 fb39 	bl	8003d88 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000716:	1d3b      	adds	r3, r7, #4
 8000718:	0018      	movs	r0, r3
 800071a:	2334      	movs	r3, #52	; 0x34
 800071c:	001a      	movs	r2, r3
 800071e:	2100      	movs	r1, #0
 8000720:	f003 fb32 	bl	8003d88 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000724:	4b50      	ldr	r3, [pc, #320]	; (8000868 <MX_TIM1_Init+0x178>)
 8000726:	4a51      	ldr	r2, [pc, #324]	; (800086c <MX_TIM1_Init+0x17c>)
 8000728:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 72-1;
 800072a:	4b4f      	ldr	r3, [pc, #316]	; (8000868 <MX_TIM1_Init+0x178>)
 800072c:	2247      	movs	r2, #71	; 0x47
 800072e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000730:	4b4d      	ldr	r3, [pc, #308]	; (8000868 <MX_TIM1_Init+0x178>)
 8000732:	2200      	movs	r2, #0
 8000734:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 100-1;
 8000736:	4b4c      	ldr	r3, [pc, #304]	; (8000868 <MX_TIM1_Init+0x178>)
 8000738:	2263      	movs	r2, #99	; 0x63
 800073a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800073c:	4b4a      	ldr	r3, [pc, #296]	; (8000868 <MX_TIM1_Init+0x178>)
 800073e:	2200      	movs	r2, #0
 8000740:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000742:	4b49      	ldr	r3, [pc, #292]	; (8000868 <MX_TIM1_Init+0x178>)
 8000744:	2200      	movs	r2, #0
 8000746:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000748:	4b47      	ldr	r3, [pc, #284]	; (8000868 <MX_TIM1_Init+0x178>)
 800074a:	2200      	movs	r2, #0
 800074c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800074e:	4b46      	ldr	r3, [pc, #280]	; (8000868 <MX_TIM1_Init+0x178>)
 8000750:	0018      	movs	r0, r3
 8000752:	f001 fdd7 	bl	8002304 <HAL_TIM_PWM_Init>
 8000756:	1e03      	subs	r3, r0, #0
 8000758:	d001      	beq.n	800075e <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 800075a:	f000 fa85 	bl	8000c68 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800075e:	2154      	movs	r1, #84	; 0x54
 8000760:	187b      	adds	r3, r7, r1
 8000762:	2200      	movs	r2, #0
 8000764:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000766:	187b      	adds	r3, r7, r1
 8000768:	2200      	movs	r2, #0
 800076a:	605a      	str	r2, [r3, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800076c:	187b      	adds	r3, r7, r1
 800076e:	2200      	movs	r2, #0
 8000770:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000772:	187a      	adds	r2, r7, r1
 8000774:	4b3c      	ldr	r3, [pc, #240]	; (8000868 <MX_TIM1_Init+0x178>)
 8000776:	0011      	movs	r1, r2
 8000778:	0018      	movs	r0, r3
 800077a:	f002 fbf9 	bl	8002f70 <HAL_TIMEx_MasterConfigSynchronization>
 800077e:	1e03      	subs	r3, r0, #0
 8000780:	d001      	beq.n	8000786 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8000782:	f000 fa71 	bl	8000c68 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000786:	2138      	movs	r1, #56	; 0x38
 8000788:	187b      	adds	r3, r7, r1
 800078a:	2260      	movs	r2, #96	; 0x60
 800078c:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 800078e:	187b      	adds	r3, r7, r1
 8000790:	2200      	movs	r2, #0
 8000792:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000794:	187b      	adds	r3, r7, r1
 8000796:	2200      	movs	r2, #0
 8000798:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800079a:	187b      	adds	r3, r7, r1
 800079c:	2200      	movs	r2, #0
 800079e:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80007a0:	187b      	adds	r3, r7, r1
 80007a2:	2200      	movs	r2, #0
 80007a4:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80007a6:	187b      	adds	r3, r7, r1
 80007a8:	2200      	movs	r2, #0
 80007aa:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80007ac:	187b      	adds	r3, r7, r1
 80007ae:	2200      	movs	r2, #0
 80007b0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80007b2:	1879      	adds	r1, r7, r1
 80007b4:	4b2c      	ldr	r3, [pc, #176]	; (8000868 <MX_TIM1_Init+0x178>)
 80007b6:	2200      	movs	r2, #0
 80007b8:	0018      	movs	r0, r3
 80007ba:	f001 ff71 	bl	80026a0 <HAL_TIM_PWM_ConfigChannel>
 80007be:	1e03      	subs	r3, r0, #0
 80007c0:	d001      	beq.n	80007c6 <MX_TIM1_Init+0xd6>
  {
    Error_Handler();
 80007c2:	f000 fa51 	bl	8000c68 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80007c6:	2338      	movs	r3, #56	; 0x38
 80007c8:	18f9      	adds	r1, r7, r3
 80007ca:	4b27      	ldr	r3, [pc, #156]	; (8000868 <MX_TIM1_Init+0x178>)
 80007cc:	2204      	movs	r2, #4
 80007ce:	0018      	movs	r0, r3
 80007d0:	f001 ff66 	bl	80026a0 <HAL_TIM_PWM_ConfigChannel>
 80007d4:	1e03      	subs	r3, r0, #0
 80007d6:	d001      	beq.n	80007dc <MX_TIM1_Init+0xec>
  {
    Error_Handler();
 80007d8:	f000 fa46 	bl	8000c68 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80007dc:	2338      	movs	r3, #56	; 0x38
 80007de:	18f9      	adds	r1, r7, r3
 80007e0:	4b21      	ldr	r3, [pc, #132]	; (8000868 <MX_TIM1_Init+0x178>)
 80007e2:	2208      	movs	r2, #8
 80007e4:	0018      	movs	r0, r3
 80007e6:	f001 ff5b 	bl	80026a0 <HAL_TIM_PWM_ConfigChannel>
 80007ea:	1e03      	subs	r3, r0, #0
 80007ec:	d001      	beq.n	80007f2 <MX_TIM1_Init+0x102>
  {
    Error_Handler();
 80007ee:	f000 fa3b 	bl	8000c68 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80007f2:	1d3b      	adds	r3, r7, #4
 80007f4:	2200      	movs	r2, #0
 80007f6:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80007f8:	1d3b      	adds	r3, r7, #4
 80007fa:	2200      	movs	r2, #0
 80007fc:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80007fe:	1d3b      	adds	r3, r7, #4
 8000800:	2200      	movs	r2, #0
 8000802:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000804:	1d3b      	adds	r3, r7, #4
 8000806:	2200      	movs	r2, #0
 8000808:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800080a:	1d3b      	adds	r3, r7, #4
 800080c:	2200      	movs	r2, #0
 800080e:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000810:	1d3b      	adds	r3, r7, #4
 8000812:	2280      	movs	r2, #128	; 0x80
 8000814:	0192      	lsls	r2, r2, #6
 8000816:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000818:	1d3b      	adds	r3, r7, #4
 800081a:	2200      	movs	r2, #0
 800081c:	619a      	str	r2, [r3, #24]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 800081e:	1d3b      	adds	r3, r7, #4
 8000820:	2200      	movs	r2, #0
 8000822:	61da      	str	r2, [r3, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000824:	1d3b      	adds	r3, r7, #4
 8000826:	2200      	movs	r2, #0
 8000828:	621a      	str	r2, [r3, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800082a:	1d3b      	adds	r3, r7, #4
 800082c:	2280      	movs	r2, #128	; 0x80
 800082e:	0492      	lsls	r2, r2, #18
 8000830:	625a      	str	r2, [r3, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000832:	1d3b      	adds	r3, r7, #4
 8000834:	2200      	movs	r2, #0
 8000836:	629a      	str	r2, [r3, #40]	; 0x28
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8000838:	1d3b      	adds	r3, r7, #4
 800083a:	2200      	movs	r2, #0
 800083c:	62da      	str	r2, [r3, #44]	; 0x2c
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800083e:	1d3b      	adds	r3, r7, #4
 8000840:	2200      	movs	r2, #0
 8000842:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000844:	1d3a      	adds	r2, r7, #4
 8000846:	4b08      	ldr	r3, [pc, #32]	; (8000868 <MX_TIM1_Init+0x178>)
 8000848:	0011      	movs	r1, r2
 800084a:	0018      	movs	r0, r3
 800084c:	f002 fbfe 	bl	800304c <HAL_TIMEx_ConfigBreakDeadTime>
 8000850:	1e03      	subs	r3, r0, #0
 8000852:	d001      	beq.n	8000858 <MX_TIM1_Init+0x168>
  {
    Error_Handler();
 8000854:	f000 fa08 	bl	8000c68 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000858:	4b03      	ldr	r3, [pc, #12]	; (8000868 <MX_TIM1_Init+0x178>)
 800085a:	0018      	movs	r0, r3
 800085c:	f000 fa78 	bl	8000d50 <HAL_TIM_MspPostInit>

}
 8000860:	46c0      	nop			; (mov r8, r8)
 8000862:	46bd      	mov	sp, r7
 8000864:	b018      	add	sp, #96	; 0x60
 8000866:	bd80      	pop	{r7, pc}
 8000868:	2000002c 	.word	0x2000002c
 800086c:	40012c00 	.word	0x40012c00

08000870 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000870:	b580      	push	{r7, lr}
 8000872:	b08a      	sub	sp, #40	; 0x28
 8000874:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000876:	231c      	movs	r3, #28
 8000878:	18fb      	adds	r3, r7, r3
 800087a:	0018      	movs	r0, r3
 800087c:	230c      	movs	r3, #12
 800087e:	001a      	movs	r2, r3
 8000880:	2100      	movs	r1, #0
 8000882:	f003 fa81 	bl	8003d88 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000886:	003b      	movs	r3, r7
 8000888:	0018      	movs	r0, r3
 800088a:	231c      	movs	r3, #28
 800088c:	001a      	movs	r2, r3
 800088e:	2100      	movs	r1, #0
 8000890:	f003 fa7a 	bl	8003d88 <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000894:	4b29      	ldr	r3, [pc, #164]	; (800093c <MX_TIM2_Init+0xcc>)
 8000896:	2280      	movs	r2, #128	; 0x80
 8000898:	05d2      	lsls	r2, r2, #23
 800089a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 72-1;
 800089c:	4b27      	ldr	r3, [pc, #156]	; (800093c <MX_TIM2_Init+0xcc>)
 800089e:	2247      	movs	r2, #71	; 0x47
 80008a0:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008a2:	4b26      	ldr	r3, [pc, #152]	; (800093c <MX_TIM2_Init+0xcc>)
 80008a4:	2200      	movs	r2, #0
 80008a6:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100-1;
 80008a8:	4b24      	ldr	r3, [pc, #144]	; (800093c <MX_TIM2_Init+0xcc>)
 80008aa:	2263      	movs	r2, #99	; 0x63
 80008ac:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80008ae:	4b23      	ldr	r3, [pc, #140]	; (800093c <MX_TIM2_Init+0xcc>)
 80008b0:	2200      	movs	r2, #0
 80008b2:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80008b4:	4b21      	ldr	r3, [pc, #132]	; (800093c <MX_TIM2_Init+0xcc>)
 80008b6:	2200      	movs	r2, #0
 80008b8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80008ba:	4b20      	ldr	r3, [pc, #128]	; (800093c <MX_TIM2_Init+0xcc>)
 80008bc:	0018      	movs	r0, r3
 80008be:	f001 fd21 	bl	8002304 <HAL_TIM_PWM_Init>
 80008c2:	1e03      	subs	r3, r0, #0
 80008c4:	d001      	beq.n	80008ca <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 80008c6:	f000 f9cf 	bl	8000c68 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80008ca:	211c      	movs	r1, #28
 80008cc:	187b      	adds	r3, r7, r1
 80008ce:	2200      	movs	r2, #0
 80008d0:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80008d2:	187b      	adds	r3, r7, r1
 80008d4:	2200      	movs	r2, #0
 80008d6:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80008d8:	187a      	adds	r2, r7, r1
 80008da:	4b18      	ldr	r3, [pc, #96]	; (800093c <MX_TIM2_Init+0xcc>)
 80008dc:	0011      	movs	r1, r2
 80008de:	0018      	movs	r0, r3
 80008e0:	f002 fb46 	bl	8002f70 <HAL_TIMEx_MasterConfigSynchronization>
 80008e4:	1e03      	subs	r3, r0, #0
 80008e6:	d001      	beq.n	80008ec <MX_TIM2_Init+0x7c>
  {
    Error_Handler();
 80008e8:	f000 f9be 	bl	8000c68 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80008ec:	003b      	movs	r3, r7
 80008ee:	2260      	movs	r2, #96	; 0x60
 80008f0:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 80008f2:	003b      	movs	r3, r7
 80008f4:	2200      	movs	r2, #0
 80008f6:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80008f8:	003b      	movs	r3, r7
 80008fa:	2200      	movs	r2, #0
 80008fc:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80008fe:	003b      	movs	r3, r7
 8000900:	2200      	movs	r2, #0
 8000902:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000904:	0039      	movs	r1, r7
 8000906:	4b0d      	ldr	r3, [pc, #52]	; (800093c <MX_TIM2_Init+0xcc>)
 8000908:	2200      	movs	r2, #0
 800090a:	0018      	movs	r0, r3
 800090c:	f001 fec8 	bl	80026a0 <HAL_TIM_PWM_ConfigChannel>
 8000910:	1e03      	subs	r3, r0, #0
 8000912:	d001      	beq.n	8000918 <MX_TIM2_Init+0xa8>
  {
    Error_Handler();
 8000914:	f000 f9a8 	bl	8000c68 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000918:	0039      	movs	r1, r7
 800091a:	4b08      	ldr	r3, [pc, #32]	; (800093c <MX_TIM2_Init+0xcc>)
 800091c:	2204      	movs	r2, #4
 800091e:	0018      	movs	r0, r3
 8000920:	f001 febe 	bl	80026a0 <HAL_TIM_PWM_ConfigChannel>
 8000924:	1e03      	subs	r3, r0, #0
 8000926:	d001      	beq.n	800092c <MX_TIM2_Init+0xbc>
  {
    Error_Handler();
 8000928:	f000 f99e 	bl	8000c68 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800092c:	4b03      	ldr	r3, [pc, #12]	; (800093c <MX_TIM2_Init+0xcc>)
 800092e:	0018      	movs	r0, r3
 8000930:	f000 fa0e 	bl	8000d50 <HAL_TIM_MspPostInit>

}
 8000934:	46c0      	nop			; (mov r8, r8)
 8000936:	46bd      	mov	sp, r7
 8000938:	b00a      	add	sp, #40	; 0x28
 800093a:	bd80      	pop	{r7, pc}
 800093c:	20000078 	.word	0x20000078

08000940 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000940:	b580      	push	{r7, lr}
 8000942:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000944:	4b23      	ldr	r3, [pc, #140]	; (80009d4 <MX_USART2_UART_Init+0x94>)
 8000946:	4a24      	ldr	r2, [pc, #144]	; (80009d8 <MX_USART2_UART_Init+0x98>)
 8000948:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800094a:	4b22      	ldr	r3, [pc, #136]	; (80009d4 <MX_USART2_UART_Init+0x94>)
 800094c:	22e1      	movs	r2, #225	; 0xe1
 800094e:	0252      	lsls	r2, r2, #9
 8000950:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000952:	4b20      	ldr	r3, [pc, #128]	; (80009d4 <MX_USART2_UART_Init+0x94>)
 8000954:	2200      	movs	r2, #0
 8000956:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000958:	4b1e      	ldr	r3, [pc, #120]	; (80009d4 <MX_USART2_UART_Init+0x94>)
 800095a:	2200      	movs	r2, #0
 800095c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800095e:	4b1d      	ldr	r3, [pc, #116]	; (80009d4 <MX_USART2_UART_Init+0x94>)
 8000960:	2200      	movs	r2, #0
 8000962:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000964:	4b1b      	ldr	r3, [pc, #108]	; (80009d4 <MX_USART2_UART_Init+0x94>)
 8000966:	220c      	movs	r2, #12
 8000968:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800096a:	4b1a      	ldr	r3, [pc, #104]	; (80009d4 <MX_USART2_UART_Init+0x94>)
 800096c:	2200      	movs	r2, #0
 800096e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000970:	4b18      	ldr	r3, [pc, #96]	; (80009d4 <MX_USART2_UART_Init+0x94>)
 8000972:	2200      	movs	r2, #0
 8000974:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000976:	4b17      	ldr	r3, [pc, #92]	; (80009d4 <MX_USART2_UART_Init+0x94>)
 8000978:	2200      	movs	r2, #0
 800097a:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800097c:	4b15      	ldr	r3, [pc, #84]	; (80009d4 <MX_USART2_UART_Init+0x94>)
 800097e:	2200      	movs	r2, #0
 8000980:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000982:	4b14      	ldr	r3, [pc, #80]	; (80009d4 <MX_USART2_UART_Init+0x94>)
 8000984:	2200      	movs	r2, #0
 8000986:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000988:	4b12      	ldr	r3, [pc, #72]	; (80009d4 <MX_USART2_UART_Init+0x94>)
 800098a:	0018      	movs	r0, r3
 800098c:	f002 fc04 	bl	8003198 <HAL_UART_Init>
 8000990:	1e03      	subs	r3, r0, #0
 8000992:	d001      	beq.n	8000998 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8000994:	f000 f968 	bl	8000c68 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000998:	4b0e      	ldr	r3, [pc, #56]	; (80009d4 <MX_USART2_UART_Init+0x94>)
 800099a:	2100      	movs	r1, #0
 800099c:	0018      	movs	r0, r3
 800099e:	f003 f913 	bl	8003bc8 <HAL_UARTEx_SetTxFifoThreshold>
 80009a2:	1e03      	subs	r3, r0, #0
 80009a4:	d001      	beq.n	80009aa <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 80009a6:	f000 f95f 	bl	8000c68 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80009aa:	4b0a      	ldr	r3, [pc, #40]	; (80009d4 <MX_USART2_UART_Init+0x94>)
 80009ac:	2100      	movs	r1, #0
 80009ae:	0018      	movs	r0, r3
 80009b0:	f003 f94a 	bl	8003c48 <HAL_UARTEx_SetRxFifoThreshold>
 80009b4:	1e03      	subs	r3, r0, #0
 80009b6:	d001      	beq.n	80009bc <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 80009b8:	f000 f956 	bl	8000c68 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 80009bc:	4b05      	ldr	r3, [pc, #20]	; (80009d4 <MX_USART2_UART_Init+0x94>)
 80009be:	0018      	movs	r0, r3
 80009c0:	f003 f8c8 	bl	8003b54 <HAL_UARTEx_DisableFifoMode>
 80009c4:	1e03      	subs	r3, r0, #0
 80009c6:	d001      	beq.n	80009cc <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 80009c8:	f000 f94e 	bl	8000c68 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80009cc:	46c0      	nop			; (mov r8, r8)
 80009ce:	46bd      	mov	sp, r7
 80009d0:	bd80      	pop	{r7, pc}
 80009d2:	46c0      	nop			; (mov r8, r8)
 80009d4:	200000c4 	.word	0x200000c4
 80009d8:	40004400 	.word	0x40004400

080009dc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80009dc:	b590      	push	{r4, r7, lr}
 80009de:	b08b      	sub	sp, #44	; 0x2c
 80009e0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009e2:	2414      	movs	r4, #20
 80009e4:	193b      	adds	r3, r7, r4
 80009e6:	0018      	movs	r0, r3
 80009e8:	2314      	movs	r3, #20
 80009ea:	001a      	movs	r2, r3
 80009ec:	2100      	movs	r1, #0
 80009ee:	f003 f9cb 	bl	8003d88 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009f2:	4b52      	ldr	r3, [pc, #328]	; (8000b3c <MX_GPIO_Init+0x160>)
 80009f4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80009f6:	4b51      	ldr	r3, [pc, #324]	; (8000b3c <MX_GPIO_Init+0x160>)
 80009f8:	2104      	movs	r1, #4
 80009fa:	430a      	orrs	r2, r1
 80009fc:	635a      	str	r2, [r3, #52]	; 0x34
 80009fe:	4b4f      	ldr	r3, [pc, #316]	; (8000b3c <MX_GPIO_Init+0x160>)
 8000a00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000a02:	2204      	movs	r2, #4
 8000a04:	4013      	ands	r3, r2
 8000a06:	613b      	str	r3, [r7, #16]
 8000a08:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000a0a:	4b4c      	ldr	r3, [pc, #304]	; (8000b3c <MX_GPIO_Init+0x160>)
 8000a0c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000a0e:	4b4b      	ldr	r3, [pc, #300]	; (8000b3c <MX_GPIO_Init+0x160>)
 8000a10:	2120      	movs	r1, #32
 8000a12:	430a      	orrs	r2, r1
 8000a14:	635a      	str	r2, [r3, #52]	; 0x34
 8000a16:	4b49      	ldr	r3, [pc, #292]	; (8000b3c <MX_GPIO_Init+0x160>)
 8000a18:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000a1a:	2220      	movs	r2, #32
 8000a1c:	4013      	ands	r3, r2
 8000a1e:	60fb      	str	r3, [r7, #12]
 8000a20:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a22:	4b46      	ldr	r3, [pc, #280]	; (8000b3c <MX_GPIO_Init+0x160>)
 8000a24:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000a26:	4b45      	ldr	r3, [pc, #276]	; (8000b3c <MX_GPIO_Init+0x160>)
 8000a28:	2101      	movs	r1, #1
 8000a2a:	430a      	orrs	r2, r1
 8000a2c:	635a      	str	r2, [r3, #52]	; 0x34
 8000a2e:	4b43      	ldr	r3, [pc, #268]	; (8000b3c <MX_GPIO_Init+0x160>)
 8000a30:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000a32:	2201      	movs	r2, #1
 8000a34:	4013      	ands	r3, r2
 8000a36:	60bb      	str	r3, [r7, #8]
 8000a38:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a3a:	4b40      	ldr	r3, [pc, #256]	; (8000b3c <MX_GPIO_Init+0x160>)
 8000a3c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000a3e:	4b3f      	ldr	r3, [pc, #252]	; (8000b3c <MX_GPIO_Init+0x160>)
 8000a40:	2108      	movs	r1, #8
 8000a42:	430a      	orrs	r2, r1
 8000a44:	635a      	str	r2, [r3, #52]	; 0x34
 8000a46:	4b3d      	ldr	r3, [pc, #244]	; (8000b3c <MX_GPIO_Init+0x160>)
 8000a48:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000a4a:	2208      	movs	r2, #8
 8000a4c:	4013      	ands	r3, r2
 8000a4e:	607b      	str	r3, [r7, #4]
 8000a50:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a52:	4b3a      	ldr	r3, [pc, #232]	; (8000b3c <MX_GPIO_Init+0x160>)
 8000a54:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000a56:	4b39      	ldr	r3, [pc, #228]	; (8000b3c <MX_GPIO_Init+0x160>)
 8000a58:	2102      	movs	r1, #2
 8000a5a:	430a      	orrs	r2, r1
 8000a5c:	635a      	str	r2, [r3, #52]	; 0x34
 8000a5e:	4b37      	ldr	r3, [pc, #220]	; (8000b3c <MX_GPIO_Init+0x160>)
 8000a60:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000a62:	2202      	movs	r2, #2
 8000a64:	4013      	ands	r3, r2
 8000a66:	603b      	str	r3, [r7, #0]
 8000a68:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_GREEN_Pin|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 8000a6a:	23f9      	movs	r3, #249	; 0xf9
 8000a6c:	0159      	lsls	r1, r3, #5
 8000a6e:	23a0      	movs	r3, #160	; 0xa0
 8000a70:	05db      	lsls	r3, r3, #23
 8000a72:	2200      	movs	r2, #0
 8000a74:	0018      	movs	r0, r3
 8000a76:	f000 fd5f 	bl	8001538 <HAL_GPIO_WritePin>
                          |GPIO_PIN_11|GPIO_PIN_12, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);
 8000a7a:	4b31      	ldr	r3, [pc, #196]	; (8000b40 <MX_GPIO_Init+0x164>)
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	21c0      	movs	r1, #192	; 0xc0
 8000a80:	0018      	movs	r0, r3
 8000a82:	f000 fd59 	bl	8001538 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);
 8000a86:	23c0      	movs	r3, #192	; 0xc0
 8000a88:	009b      	lsls	r3, r3, #2
 8000a8a:	482e      	ldr	r0, [pc, #184]	; (8000b44 <MX_GPIO_Init+0x168>)
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	0019      	movs	r1, r3
 8000a90:	f000 fd52 	bl	8001538 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_GREEN_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin;
 8000a94:	193b      	adds	r3, r7, r4
 8000a96:	2220      	movs	r2, #32
 8000a98:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a9a:	193b      	adds	r3, r7, r4
 8000a9c:	2201      	movs	r2, #1
 8000a9e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aa0:	193b      	adds	r3, r7, r4
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000aa6:	193b      	adds	r3, r7, r4
 8000aa8:	2202      	movs	r2, #2
 8000aaa:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LED_GREEN_GPIO_Port, &GPIO_InitStruct);
 8000aac:	193a      	adds	r2, r7, r4
 8000aae:	23a0      	movs	r3, #160	; 0xa0
 8000ab0:	05db      	lsls	r3, r3, #23
 8000ab2:	0011      	movs	r1, r2
 8000ab4:	0018      	movs	r0, r3
 8000ab6:	f000 fbdb 	bl	8001270 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA9 PA10 PA11
                           PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8000aba:	0021      	movs	r1, r4
 8000abc:	187b      	adds	r3, r7, r1
 8000abe:	22f8      	movs	r2, #248	; 0xf8
 8000ac0:	0152      	lsls	r2, r2, #5
 8000ac2:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ac4:	000c      	movs	r4, r1
 8000ac6:	193b      	adds	r3, r7, r4
 8000ac8:	2201      	movs	r2, #1
 8000aca:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000acc:	193b      	adds	r3, r7, r4
 8000ace:	2200      	movs	r2, #0
 8000ad0:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ad2:	193b      	adds	r3, r7, r4
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ad8:	193a      	adds	r2, r7, r4
 8000ada:	23a0      	movs	r3, #160	; 0xa0
 8000adc:	05db      	lsls	r3, r3, #23
 8000ade:	0011      	movs	r1, r2
 8000ae0:	0018      	movs	r0, r3
 8000ae2:	f000 fbc5 	bl	8001270 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC6 PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000ae6:	193b      	adds	r3, r7, r4
 8000ae8:	22c0      	movs	r2, #192	; 0xc0
 8000aea:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000aec:	193b      	adds	r3, r7, r4
 8000aee:	2201      	movs	r2, #1
 8000af0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000af2:	193b      	adds	r3, r7, r4
 8000af4:	2200      	movs	r2, #0
 8000af6:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000af8:	193b      	adds	r3, r7, r4
 8000afa:	2200      	movs	r2, #0
 8000afc:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000afe:	193b      	adds	r3, r7, r4
 8000b00:	4a0f      	ldr	r2, [pc, #60]	; (8000b40 <MX_GPIO_Init+0x164>)
 8000b02:	0019      	movs	r1, r3
 8000b04:	0010      	movs	r0, r2
 8000b06:	f000 fbb3 	bl	8001270 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD8 PD9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000b0a:	0021      	movs	r1, r4
 8000b0c:	187b      	adds	r3, r7, r1
 8000b0e:	22c0      	movs	r2, #192	; 0xc0
 8000b10:	0092      	lsls	r2, r2, #2
 8000b12:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b14:	187b      	adds	r3, r7, r1
 8000b16:	2201      	movs	r2, #1
 8000b18:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b1a:	187b      	adds	r3, r7, r1
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b20:	187b      	adds	r3, r7, r1
 8000b22:	2200      	movs	r2, #0
 8000b24:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000b26:	187b      	adds	r3, r7, r1
 8000b28:	4a06      	ldr	r2, [pc, #24]	; (8000b44 <MX_GPIO_Init+0x168>)
 8000b2a:	0019      	movs	r1, r3
 8000b2c:	0010      	movs	r0, r2
 8000b2e:	f000 fb9f 	bl	8001270 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000b32:	46c0      	nop			; (mov r8, r8)
 8000b34:	46bd      	mov	sp, r7
 8000b36:	b00b      	add	sp, #44	; 0x2c
 8000b38:	bd90      	pop	{r4, r7, pc}
 8000b3a:	46c0      	nop			; (mov r8, r8)
 8000b3c:	40021000 	.word	0x40021000
 8000b40:	50000800 	.word	0x50000800
 8000b44:	50000c00 	.word	0x50000c00

08000b48 <ChangeVerticalAngle>:
  * @param newAngle takes in the desired vertical angle (an int 1 to 11, 1 being lowest, 11 highest)
  * @param currentAngle takes in the current vertical angle (an int 1 to 11, 1 being lowest, 11 highest)
  * The actuator takes 10 seconds to move from bottom to top or top to bottom
  * @retval None
  */
static void ChangeVerticalAngle(uint8_t newAngle, uint8_t currentAngle){
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	b084      	sub	sp, #16
 8000b4c:	af00      	add	r7, sp, #0
 8000b4e:	0002      	movs	r2, r0
 8000b50:	1dfb      	adds	r3, r7, #7
 8000b52:	701a      	strb	r2, [r3, #0]
 8000b54:	1dbb      	adds	r3, r7, #6
 8000b56:	1c0a      	adds	r2, r1, #0
 8000b58:	701a      	strb	r2, [r3, #0]
	int diff = 0;
 8000b5a:	2300      	movs	r3, #0
 8000b5c:	60fb      	str	r3, [r7, #12]
	int timedelay = 0;
 8000b5e:	2300      	movs	r3, #0
 8000b60:	60bb      	str	r3, [r7, #8]
//	TIM2->CCR1 = 99;
	if(newAngle > currentAngle){
 8000b62:	1dfa      	adds	r2, r7, #7
 8000b64:	1dbb      	adds	r3, r7, #6
 8000b66:	7812      	ldrb	r2, [r2, #0]
 8000b68:	781b      	ldrb	r3, [r3, #0]
 8000b6a:	429a      	cmp	r2, r3
 8000b6c:	d934      	bls.n	8000bd8 <ChangeVerticalAngle+0x90>
		diff = newAngle - currentAngle; // this will be the # seconds to move the actuator for
 8000b6e:	1dfb      	adds	r3, r7, #7
 8000b70:	781a      	ldrb	r2, [r3, #0]
 8000b72:	1dbb      	adds	r3, r7, #6
 8000b74:	781b      	ldrb	r3, [r3, #0]
 8000b76:	1ad3      	subs	r3, r2, r3
 8000b78:	60fb      	str	r3, [r7, #12]

		// Set Directional pins
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, 1);
 8000b7a:	2380      	movs	r3, #128	; 0x80
 8000b7c:	00d9      	lsls	r1, r3, #3
 8000b7e:	23a0      	movs	r3, #160	; 0xa0
 8000b80:	05db      	lsls	r3, r3, #23
 8000b82:	2201      	movs	r2, #1
 8000b84:	0018      	movs	r0, r3
 8000b86:	f000 fcd7 	bl	8001538 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9, 0);
 8000b8a:	2380      	movs	r3, #128	; 0x80
 8000b8c:	009b      	lsls	r3, r3, #2
 8000b8e:	4833      	ldr	r0, [pc, #204]	; (8000c5c <ChangeVerticalAngle+0x114>)
 8000b90:	2200      	movs	r2, #0
 8000b92:	0019      	movs	r1, r3
 8000b94:	f000 fcd0 	bl	8001538 <HAL_GPIO_WritePin>

		// enable pin for x seconds, then disable
		timedelay = diff * 1000;
 8000b98:	68fa      	ldr	r2, [r7, #12]
 8000b9a:	0013      	movs	r3, r2
 8000b9c:	015b      	lsls	r3, r3, #5
 8000b9e:	1a9b      	subs	r3, r3, r2
 8000ba0:	009b      	lsls	r3, r3, #2
 8000ba2:	189b      	adds	r3, r3, r2
 8000ba4:	00db      	lsls	r3, r3, #3
 8000ba6:	60bb      	str	r3, [r7, #8]
		TIM2->CCR1 = 99;
 8000ba8:	2380      	movs	r3, #128	; 0x80
 8000baa:	05db      	lsls	r3, r3, #23
 8000bac:	2263      	movs	r2, #99	; 0x63
 8000bae:	635a      	str	r2, [r3, #52]	; 0x34
		HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8000bb0:	4b2b      	ldr	r3, [pc, #172]	; (8000c60 <ChangeVerticalAngle+0x118>)
 8000bb2:	2100      	movs	r1, #0
 8000bb4:	0018      	movs	r0, r3
 8000bb6:	f001 fbfd 	bl	80023b4 <HAL_TIM_PWM_Start>
		HAL_Delay(8000);
 8000bba:	23fa      	movs	r3, #250	; 0xfa
 8000bbc:	015b      	lsls	r3, r3, #5
 8000bbe:	0018      	movs	r0, r3
 8000bc0:	f000 fa7e 	bl	80010c0 <HAL_Delay>
		TIM2->CCR1 = 0;
 8000bc4:	2380      	movs	r3, #128	; 0x80
 8000bc6:	05db      	lsls	r3, r3, #23
 8000bc8:	2200      	movs	r2, #0
 8000bca:	635a      	str	r2, [r3, #52]	; 0x34
		HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_1);
 8000bcc:	4b24      	ldr	r3, [pc, #144]	; (8000c60 <ChangeVerticalAngle+0x118>)
 8000bce:	2100      	movs	r1, #0
 8000bd0:	0018      	movs	r0, r3
 8000bd2:	f001 fcd9 	bl	8002588 <HAL_TIM_PWM_Stop>
 8000bd6:	e039      	b.n	8000c4c <ChangeVerticalAngle+0x104>

	}
	else if(newAngle < currentAngle){
 8000bd8:	1dfa      	adds	r2, r7, #7
 8000bda:	1dbb      	adds	r3, r7, #6
 8000bdc:	7812      	ldrb	r2, [r2, #0]
 8000bde:	781b      	ldrb	r3, [r3, #0]
 8000be0:	429a      	cmp	r2, r3
 8000be2:	d233      	bcs.n	8000c4c <ChangeVerticalAngle+0x104>
		diff = currentAngle - newAngle; // this will be the # seconds to move the actuator for
 8000be4:	1dbb      	adds	r3, r7, #6
 8000be6:	781a      	ldrb	r2, [r3, #0]
 8000be8:	1dfb      	adds	r3, r7, #7
 8000bea:	781b      	ldrb	r3, [r3, #0]
 8000bec:	1ad3      	subs	r3, r2, r3
 8000bee:	60fb      	str	r3, [r7, #12]

		// Set Directional pins (opposite as above)
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, 0);
 8000bf0:	2380      	movs	r3, #128	; 0x80
 8000bf2:	00d9      	lsls	r1, r3, #3
 8000bf4:	23a0      	movs	r3, #160	; 0xa0
 8000bf6:	05db      	lsls	r3, r3, #23
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	0018      	movs	r0, r3
 8000bfc:	f000 fc9c 	bl	8001538 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9, 1);
 8000c00:	2380      	movs	r3, #128	; 0x80
 8000c02:	009b      	lsls	r3, r3, #2
 8000c04:	4815      	ldr	r0, [pc, #84]	; (8000c5c <ChangeVerticalAngle+0x114>)
 8000c06:	2201      	movs	r2, #1
 8000c08:	0019      	movs	r1, r3
 8000c0a:	f000 fc95 	bl	8001538 <HAL_GPIO_WritePin>

		// enable pin for x seconds, then disable
		timedelay = diff * 1000;
 8000c0e:	68fa      	ldr	r2, [r7, #12]
 8000c10:	0013      	movs	r3, r2
 8000c12:	015b      	lsls	r3, r3, #5
 8000c14:	1a9b      	subs	r3, r3, r2
 8000c16:	009b      	lsls	r3, r3, #2
 8000c18:	189b      	adds	r3, r3, r2
 8000c1a:	00db      	lsls	r3, r3, #3
 8000c1c:	60bb      	str	r3, [r7, #8]
		TIM2->CCR1 = 99;
 8000c1e:	2380      	movs	r3, #128	; 0x80
 8000c20:	05db      	lsls	r3, r3, #23
 8000c22:	2263      	movs	r2, #99	; 0x63
 8000c24:	635a      	str	r2, [r3, #52]	; 0x34
		HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8000c26:	4b0e      	ldr	r3, [pc, #56]	; (8000c60 <ChangeVerticalAngle+0x118>)
 8000c28:	2100      	movs	r1, #0
 8000c2a:	0018      	movs	r0, r3
 8000c2c:	f001 fbc2 	bl	80023b4 <HAL_TIM_PWM_Start>
		HAL_Delay(8000);
 8000c30:	23fa      	movs	r3, #250	; 0xfa
 8000c32:	015b      	lsls	r3, r3, #5
 8000c34:	0018      	movs	r0, r3
 8000c36:	f000 fa43 	bl	80010c0 <HAL_Delay>
		TIM2->CCR1 = 0;
 8000c3a:	2380      	movs	r3, #128	; 0x80
 8000c3c:	05db      	lsls	r3, r3, #23
 8000c3e:	2200      	movs	r2, #0
 8000c40:	635a      	str	r2, [r3, #52]	; 0x34
		HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_1);
 8000c42:	4b07      	ldr	r3, [pc, #28]	; (8000c60 <ChangeVerticalAngle+0x118>)
 8000c44:	2100      	movs	r1, #0
 8000c46:	0018      	movs	r0, r3
 8000c48:	f001 fc9e 	bl	8002588 <HAL_TIM_PWM_Stop>
	}
	// update stored value
	vangle = newAngle;
 8000c4c:	4b05      	ldr	r3, [pc, #20]	; (8000c64 <ChangeVerticalAngle+0x11c>)
 8000c4e:	1dfa      	adds	r2, r7, #7
 8000c50:	7812      	ldrb	r2, [r2, #0]
 8000c52:	701a      	strb	r2, [r3, #0]
	// other else is if nothing changes, but we need to do nothing in this case

}
 8000c54:	46c0      	nop			; (mov r8, r8)
 8000c56:	46bd      	mov	sp, r7
 8000c58:	b004      	add	sp, #16
 8000c5a:	bd80      	pop	{r7, pc}
 8000c5c:	50000c00 	.word	0x50000c00
 8000c60:	20000078 	.word	0x20000078
 8000c64:	20000000 	.word	0x20000000

08000c68 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c6c:	b672      	cpsid	i
}
 8000c6e:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c70:	e7fe      	b.n	8000c70 <Error_Handler+0x8>
	...

08000c74 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c74:	b580      	push	{r7, lr}
 8000c76:	b082      	sub	sp, #8
 8000c78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c7a:	4b0f      	ldr	r3, [pc, #60]	; (8000cb8 <HAL_MspInit+0x44>)
 8000c7c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000c7e:	4b0e      	ldr	r3, [pc, #56]	; (8000cb8 <HAL_MspInit+0x44>)
 8000c80:	2101      	movs	r1, #1
 8000c82:	430a      	orrs	r2, r1
 8000c84:	641a      	str	r2, [r3, #64]	; 0x40
 8000c86:	4b0c      	ldr	r3, [pc, #48]	; (8000cb8 <HAL_MspInit+0x44>)
 8000c88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c8a:	2201      	movs	r2, #1
 8000c8c:	4013      	ands	r3, r2
 8000c8e:	607b      	str	r3, [r7, #4]
 8000c90:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c92:	4b09      	ldr	r3, [pc, #36]	; (8000cb8 <HAL_MspInit+0x44>)
 8000c94:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000c96:	4b08      	ldr	r3, [pc, #32]	; (8000cb8 <HAL_MspInit+0x44>)
 8000c98:	2180      	movs	r1, #128	; 0x80
 8000c9a:	0549      	lsls	r1, r1, #21
 8000c9c:	430a      	orrs	r2, r1
 8000c9e:	63da      	str	r2, [r3, #60]	; 0x3c
 8000ca0:	4b05      	ldr	r3, [pc, #20]	; (8000cb8 <HAL_MspInit+0x44>)
 8000ca2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000ca4:	2380      	movs	r3, #128	; 0x80
 8000ca6:	055b      	lsls	r3, r3, #21
 8000ca8:	4013      	ands	r3, r2
 8000caa:	603b      	str	r3, [r7, #0]
 8000cac:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000cae:	46c0      	nop			; (mov r8, r8)
 8000cb0:	46bd      	mov	sp, r7
 8000cb2:	b002      	add	sp, #8
 8000cb4:	bd80      	pop	{r7, pc}
 8000cb6:	46c0      	nop			; (mov r8, r8)
 8000cb8:	40021000 	.word	0x40021000

08000cbc <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8000cbc:	b590      	push	{r4, r7, lr}
 8000cbe:	b093      	sub	sp, #76	; 0x4c
 8000cc0:	af00      	add	r7, sp, #0
 8000cc2:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000cc4:	2414      	movs	r4, #20
 8000cc6:	193b      	adds	r3, r7, r4
 8000cc8:	0018      	movs	r0, r3
 8000cca:	2334      	movs	r3, #52	; 0x34
 8000ccc:	001a      	movs	r2, r3
 8000cce:	2100      	movs	r1, #0
 8000cd0:	f003 f85a 	bl	8003d88 <memset>
  if(htim_pwm->Instance==TIM1)
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	681b      	ldr	r3, [r3, #0]
 8000cd8:	4a1b      	ldr	r2, [pc, #108]	; (8000d48 <HAL_TIM_PWM_MspInit+0x8c>)
 8000cda:	4293      	cmp	r3, r2
 8000cdc:	d11d      	bne.n	8000d1a <HAL_TIM_PWM_MspInit+0x5e>

  /* USER CODE END TIM1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_TIM1;
 8000cde:	193b      	adds	r3, r7, r4
 8000ce0:	2280      	movs	r2, #128	; 0x80
 8000ce2:	0392      	lsls	r2, r2, #14
 8000ce4:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLKSOURCE_PCLK1;
 8000ce6:	193b      	adds	r3, r7, r4
 8000ce8:	2200      	movs	r2, #0
 8000cea:	629a      	str	r2, [r3, #40]	; 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000cec:	193b      	adds	r3, r7, r4
 8000cee:	0018      	movs	r0, r3
 8000cf0:	f001 f950 	bl	8001f94 <HAL_RCCEx_PeriphCLKConfig>
 8000cf4:	1e03      	subs	r3, r0, #0
 8000cf6:	d001      	beq.n	8000cfc <HAL_TIM_PWM_MspInit+0x40>
    {
      Error_Handler();
 8000cf8:	f7ff ffb6 	bl	8000c68 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000cfc:	4b13      	ldr	r3, [pc, #76]	; (8000d4c <HAL_TIM_PWM_MspInit+0x90>)
 8000cfe:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000d00:	4b12      	ldr	r3, [pc, #72]	; (8000d4c <HAL_TIM_PWM_MspInit+0x90>)
 8000d02:	2180      	movs	r1, #128	; 0x80
 8000d04:	0109      	lsls	r1, r1, #4
 8000d06:	430a      	orrs	r2, r1
 8000d08:	641a      	str	r2, [r3, #64]	; 0x40
 8000d0a:	4b10      	ldr	r3, [pc, #64]	; (8000d4c <HAL_TIM_PWM_MspInit+0x90>)
 8000d0c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000d0e:	2380      	movs	r3, #128	; 0x80
 8000d10:	011b      	lsls	r3, r3, #4
 8000d12:	4013      	ands	r3, r2
 8000d14:	613b      	str	r3, [r7, #16]
 8000d16:	693b      	ldr	r3, [r7, #16]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000d18:	e011      	b.n	8000d3e <HAL_TIM_PWM_MspInit+0x82>
  else if(htim_pwm->Instance==TIM2)
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	681a      	ldr	r2, [r3, #0]
 8000d1e:	2380      	movs	r3, #128	; 0x80
 8000d20:	05db      	lsls	r3, r3, #23
 8000d22:	429a      	cmp	r2, r3
 8000d24:	d10b      	bne.n	8000d3e <HAL_TIM_PWM_MspInit+0x82>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000d26:	4b09      	ldr	r3, [pc, #36]	; (8000d4c <HAL_TIM_PWM_MspInit+0x90>)
 8000d28:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000d2a:	4b08      	ldr	r3, [pc, #32]	; (8000d4c <HAL_TIM_PWM_MspInit+0x90>)
 8000d2c:	2101      	movs	r1, #1
 8000d2e:	430a      	orrs	r2, r1
 8000d30:	63da      	str	r2, [r3, #60]	; 0x3c
 8000d32:	4b06      	ldr	r3, [pc, #24]	; (8000d4c <HAL_TIM_PWM_MspInit+0x90>)
 8000d34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000d36:	2201      	movs	r2, #1
 8000d38:	4013      	ands	r3, r2
 8000d3a:	60fb      	str	r3, [r7, #12]
 8000d3c:	68fb      	ldr	r3, [r7, #12]
}
 8000d3e:	46c0      	nop			; (mov r8, r8)
 8000d40:	46bd      	mov	sp, r7
 8000d42:	b013      	add	sp, #76	; 0x4c
 8000d44:	bd90      	pop	{r4, r7, pc}
 8000d46:	46c0      	nop			; (mov r8, r8)
 8000d48:	40012c00 	.word	0x40012c00
 8000d4c:	40021000 	.word	0x40021000

08000d50 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000d50:	b590      	push	{r4, r7, lr}
 8000d52:	b08b      	sub	sp, #44	; 0x2c
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d58:	2414      	movs	r4, #20
 8000d5a:	193b      	adds	r3, r7, r4
 8000d5c:	0018      	movs	r0, r3
 8000d5e:	2314      	movs	r3, #20
 8000d60:	001a      	movs	r2, r3
 8000d62:	2100      	movs	r1, #0
 8000d64:	f003 f810 	bl	8003d88 <memset>
  if(htim->Instance==TIM1)
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	681b      	ldr	r3, [r3, #0]
 8000d6c:	4a3a      	ldr	r2, [pc, #232]	; (8000e58 <HAL_TIM_MspPostInit+0x108>)
 8000d6e:	4293      	cmp	r3, r2
 8000d70:	d144      	bne.n	8000dfc <HAL_TIM_MspPostInit+0xac>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d72:	4b3a      	ldr	r3, [pc, #232]	; (8000e5c <HAL_TIM_MspPostInit+0x10c>)
 8000d74:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000d76:	4b39      	ldr	r3, [pc, #228]	; (8000e5c <HAL_TIM_MspPostInit+0x10c>)
 8000d78:	2104      	movs	r1, #4
 8000d7a:	430a      	orrs	r2, r1
 8000d7c:	635a      	str	r2, [r3, #52]	; 0x34
 8000d7e:	4b37      	ldr	r3, [pc, #220]	; (8000e5c <HAL_TIM_MspPostInit+0x10c>)
 8000d80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000d82:	2204      	movs	r2, #4
 8000d84:	4013      	ands	r3, r2
 8000d86:	613b      	str	r3, [r7, #16]
 8000d88:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d8a:	4b34      	ldr	r3, [pc, #208]	; (8000e5c <HAL_TIM_MspPostInit+0x10c>)
 8000d8c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000d8e:	4b33      	ldr	r3, [pc, #204]	; (8000e5c <HAL_TIM_MspPostInit+0x10c>)
 8000d90:	2102      	movs	r1, #2
 8000d92:	430a      	orrs	r2, r1
 8000d94:	635a      	str	r2, [r3, #52]	; 0x34
 8000d96:	4b31      	ldr	r3, [pc, #196]	; (8000e5c <HAL_TIM_MspPostInit+0x10c>)
 8000d98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000d9a:	2202      	movs	r2, #2
 8000d9c:	4013      	ands	r3, r2
 8000d9e:	60fb      	str	r3, [r7, #12]
 8000da0:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PC8     ------> TIM1_CH1
    PC9     ------> TIM1_CH2
    PB6     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000da2:	193b      	adds	r3, r7, r4
 8000da4:	22c0      	movs	r2, #192	; 0xc0
 8000da6:	0092      	lsls	r2, r2, #2
 8000da8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000daa:	193b      	adds	r3, r7, r4
 8000dac:	2202      	movs	r2, #2
 8000dae:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000db0:	193b      	adds	r3, r7, r4
 8000db2:	2200      	movs	r2, #0
 8000db4:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000db6:	193b      	adds	r3, r7, r4
 8000db8:	2200      	movs	r2, #0
 8000dba:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8000dbc:	193b      	adds	r3, r7, r4
 8000dbe:	2202      	movs	r2, #2
 8000dc0:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000dc2:	193b      	adds	r3, r7, r4
 8000dc4:	4a26      	ldr	r2, [pc, #152]	; (8000e60 <HAL_TIM_MspPostInit+0x110>)
 8000dc6:	0019      	movs	r1, r3
 8000dc8:	0010      	movs	r0, r2
 8000dca:	f000 fa51 	bl	8001270 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000dce:	0021      	movs	r1, r4
 8000dd0:	187b      	adds	r3, r7, r1
 8000dd2:	2240      	movs	r2, #64	; 0x40
 8000dd4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dd6:	187b      	adds	r3, r7, r1
 8000dd8:	2202      	movs	r2, #2
 8000dda:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ddc:	187b      	adds	r3, r7, r1
 8000dde:	2200      	movs	r2, #0
 8000de0:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000de2:	187b      	adds	r3, r7, r1
 8000de4:	2200      	movs	r2, #0
 8000de6:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000de8:	187b      	adds	r3, r7, r1
 8000dea:	2201      	movs	r2, #1
 8000dec:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000dee:	187b      	adds	r3, r7, r1
 8000df0:	4a1c      	ldr	r2, [pc, #112]	; (8000e64 <HAL_TIM_MspPostInit+0x114>)
 8000df2:	0019      	movs	r1, r3
 8000df4:	0010      	movs	r0, r2
 8000df6:	f000 fa3b 	bl	8001270 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8000dfa:	e028      	b.n	8000e4e <HAL_TIM_MspPostInit+0xfe>
  else if(htim->Instance==TIM2)
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	681a      	ldr	r2, [r3, #0]
 8000e00:	2380      	movs	r3, #128	; 0x80
 8000e02:	05db      	lsls	r3, r3, #23
 8000e04:	429a      	cmp	r2, r3
 8000e06:	d122      	bne.n	8000e4e <HAL_TIM_MspPostInit+0xfe>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e08:	4b14      	ldr	r3, [pc, #80]	; (8000e5c <HAL_TIM_MspPostInit+0x10c>)
 8000e0a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000e0c:	4b13      	ldr	r3, [pc, #76]	; (8000e5c <HAL_TIM_MspPostInit+0x10c>)
 8000e0e:	2101      	movs	r1, #1
 8000e10:	430a      	orrs	r2, r1
 8000e12:	635a      	str	r2, [r3, #52]	; 0x34
 8000e14:	4b11      	ldr	r3, [pc, #68]	; (8000e5c <HAL_TIM_MspPostInit+0x10c>)
 8000e16:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000e18:	2201      	movs	r2, #1
 8000e1a:	4013      	ands	r3, r2
 8000e1c:	60bb      	str	r3, [r7, #8]
 8000e1e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000e20:	2114      	movs	r1, #20
 8000e22:	187b      	adds	r3, r7, r1
 8000e24:	2203      	movs	r2, #3
 8000e26:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e28:	187b      	adds	r3, r7, r1
 8000e2a:	2202      	movs	r2, #2
 8000e2c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e2e:	187b      	adds	r3, r7, r1
 8000e30:	2200      	movs	r2, #0
 8000e32:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e34:	187b      	adds	r3, r7, r1
 8000e36:	2200      	movs	r2, #0
 8000e38:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
 8000e3a:	187b      	adds	r3, r7, r1
 8000e3c:	2202      	movs	r2, #2
 8000e3e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e40:	187a      	adds	r2, r7, r1
 8000e42:	23a0      	movs	r3, #160	; 0xa0
 8000e44:	05db      	lsls	r3, r3, #23
 8000e46:	0011      	movs	r1, r2
 8000e48:	0018      	movs	r0, r3
 8000e4a:	f000 fa11 	bl	8001270 <HAL_GPIO_Init>
}
 8000e4e:	46c0      	nop			; (mov r8, r8)
 8000e50:	46bd      	mov	sp, r7
 8000e52:	b00b      	add	sp, #44	; 0x2c
 8000e54:	bd90      	pop	{r4, r7, pc}
 8000e56:	46c0      	nop			; (mov r8, r8)
 8000e58:	40012c00 	.word	0x40012c00
 8000e5c:	40021000 	.word	0x40021000
 8000e60:	50000800 	.word	0x50000800
 8000e64:	50000400 	.word	0x50000400

08000e68 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000e68:	b590      	push	{r4, r7, lr}
 8000e6a:	b097      	sub	sp, #92	; 0x5c
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e70:	2344      	movs	r3, #68	; 0x44
 8000e72:	18fb      	adds	r3, r7, r3
 8000e74:	0018      	movs	r0, r3
 8000e76:	2314      	movs	r3, #20
 8000e78:	001a      	movs	r2, r3
 8000e7a:	2100      	movs	r1, #0
 8000e7c:	f002 ff84 	bl	8003d88 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000e80:	2410      	movs	r4, #16
 8000e82:	193b      	adds	r3, r7, r4
 8000e84:	0018      	movs	r0, r3
 8000e86:	2334      	movs	r3, #52	; 0x34
 8000e88:	001a      	movs	r2, r3
 8000e8a:	2100      	movs	r1, #0
 8000e8c:	f002 ff7c 	bl	8003d88 <memset>
  if(huart->Instance==USART2)
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	4a22      	ldr	r2, [pc, #136]	; (8000f20 <HAL_UART_MspInit+0xb8>)
 8000e96:	4293      	cmp	r3, r2
 8000e98:	d13e      	bne.n	8000f18 <HAL_UART_MspInit+0xb0>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000e9a:	193b      	adds	r3, r7, r4
 8000e9c:	2202      	movs	r2, #2
 8000e9e:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000ea0:	193b      	adds	r3, r7, r4
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	609a      	str	r2, [r3, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000ea6:	193b      	adds	r3, r7, r4
 8000ea8:	0018      	movs	r0, r3
 8000eaa:	f001 f873 	bl	8001f94 <HAL_RCCEx_PeriphCLKConfig>
 8000eae:	1e03      	subs	r3, r0, #0
 8000eb0:	d001      	beq.n	8000eb6 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000eb2:	f7ff fed9 	bl	8000c68 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000eb6:	4b1b      	ldr	r3, [pc, #108]	; (8000f24 <HAL_UART_MspInit+0xbc>)
 8000eb8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000eba:	4b1a      	ldr	r3, [pc, #104]	; (8000f24 <HAL_UART_MspInit+0xbc>)
 8000ebc:	2180      	movs	r1, #128	; 0x80
 8000ebe:	0289      	lsls	r1, r1, #10
 8000ec0:	430a      	orrs	r2, r1
 8000ec2:	63da      	str	r2, [r3, #60]	; 0x3c
 8000ec4:	4b17      	ldr	r3, [pc, #92]	; (8000f24 <HAL_UART_MspInit+0xbc>)
 8000ec6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000ec8:	2380      	movs	r3, #128	; 0x80
 8000eca:	029b      	lsls	r3, r3, #10
 8000ecc:	4013      	ands	r3, r2
 8000ece:	60fb      	str	r3, [r7, #12]
 8000ed0:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ed2:	4b14      	ldr	r3, [pc, #80]	; (8000f24 <HAL_UART_MspInit+0xbc>)
 8000ed4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000ed6:	4b13      	ldr	r3, [pc, #76]	; (8000f24 <HAL_UART_MspInit+0xbc>)
 8000ed8:	2101      	movs	r1, #1
 8000eda:	430a      	orrs	r2, r1
 8000edc:	635a      	str	r2, [r3, #52]	; 0x34
 8000ede:	4b11      	ldr	r3, [pc, #68]	; (8000f24 <HAL_UART_MspInit+0xbc>)
 8000ee0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000ee2:	2201      	movs	r2, #1
 8000ee4:	4013      	ands	r3, r2
 8000ee6:	60bb      	str	r3, [r7, #8]
 8000ee8:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART2_TX_Pin|USART2_RX_Pin;
 8000eea:	2144      	movs	r1, #68	; 0x44
 8000eec:	187b      	adds	r3, r7, r1
 8000eee:	220c      	movs	r2, #12
 8000ef0:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ef2:	187b      	adds	r3, r7, r1
 8000ef4:	2202      	movs	r2, #2
 8000ef6:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000ef8:	187b      	adds	r3, r7, r1
 8000efa:	2201      	movs	r2, #1
 8000efc:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000efe:	187b      	adds	r3, r7, r1
 8000f00:	2200      	movs	r2, #0
 8000f02:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8000f04:	187b      	adds	r3, r7, r1
 8000f06:	2201      	movs	r2, #1
 8000f08:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f0a:	187a      	adds	r2, r7, r1
 8000f0c:	23a0      	movs	r3, #160	; 0xa0
 8000f0e:	05db      	lsls	r3, r3, #23
 8000f10:	0011      	movs	r1, r2
 8000f12:	0018      	movs	r0, r3
 8000f14:	f000 f9ac 	bl	8001270 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000f18:	46c0      	nop			; (mov r8, r8)
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	b017      	add	sp, #92	; 0x5c
 8000f1e:	bd90      	pop	{r4, r7, pc}
 8000f20:	40004400 	.word	0x40004400
 8000f24:	40021000 	.word	0x40021000

08000f28 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000f2c:	e7fe      	b.n	8000f2c <NMI_Handler+0x4>

08000f2e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f2e:	b580      	push	{r7, lr}
 8000f30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f32:	e7fe      	b.n	8000f32 <HardFault_Handler+0x4>

08000f34 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f34:	b580      	push	{r7, lr}
 8000f36:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000f38:	46c0      	nop			; (mov r8, r8)
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	bd80      	pop	{r7, pc}

08000f3e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f3e:	b580      	push	{r7, lr}
 8000f40:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f42:	46c0      	nop			; (mov r8, r8)
 8000f44:	46bd      	mov	sp, r7
 8000f46:	bd80      	pop	{r7, pc}

08000f48 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f4c:	f000 f89c 	bl	8001088 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f50:	46c0      	nop			; (mov r8, r8)
 8000f52:	46bd      	mov	sp, r7
 8000f54:	bd80      	pop	{r7, pc}

08000f56 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000f56:	b580      	push	{r7, lr}
 8000f58:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f5a:	46c0      	nop			; (mov r8, r8)
 8000f5c:	46bd      	mov	sp, r7
 8000f5e:	bd80      	pop	{r7, pc}

08000f60 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000f60:	480d      	ldr	r0, [pc, #52]	; (8000f98 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000f62:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000f64:	f7ff fff7 	bl	8000f56 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000f68:	480c      	ldr	r0, [pc, #48]	; (8000f9c <LoopForever+0x6>)
  ldr r1, =_edata
 8000f6a:	490d      	ldr	r1, [pc, #52]	; (8000fa0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000f6c:	4a0d      	ldr	r2, [pc, #52]	; (8000fa4 <LoopForever+0xe>)
  movs r3, #0
 8000f6e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f70:	e002      	b.n	8000f78 <LoopCopyDataInit>

08000f72 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f72:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f74:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f76:	3304      	adds	r3, #4

08000f78 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f78:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f7a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f7c:	d3f9      	bcc.n	8000f72 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f7e:	4a0a      	ldr	r2, [pc, #40]	; (8000fa8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000f80:	4c0a      	ldr	r4, [pc, #40]	; (8000fac <LoopForever+0x16>)
  movs r3, #0
 8000f82:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f84:	e001      	b.n	8000f8a <LoopFillZerobss>

08000f86 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f86:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f88:	3204      	adds	r2, #4

08000f8a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f8a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f8c:	d3fb      	bcc.n	8000f86 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000f8e:	f002 ff03 	bl	8003d98 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8000f92:	f7ff fb43 	bl	800061c <main>

08000f96 <LoopForever>:

LoopForever:
  b LoopForever
 8000f96:	e7fe      	b.n	8000f96 <LoopForever>
  ldr   r0, =_estack
 8000f98:	20009000 	.word	0x20009000
  ldr r0, =_sdata
 8000f9c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000fa0:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000fa4:	08003ee4 	.word	0x08003ee4
  ldr r2, =_sbss
 8000fa8:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000fac:	2000015c 	.word	0x2000015c

08000fb0 <ADC1_COMP_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000fb0:	e7fe      	b.n	8000fb0 <ADC1_COMP_IRQHandler>
	...

08000fb4 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	b082      	sub	sp, #8
 8000fb8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000fba:	1dfb      	adds	r3, r7, #7
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000fc0:	4b0b      	ldr	r3, [pc, #44]	; (8000ff0 <HAL_Init+0x3c>)
 8000fc2:	681a      	ldr	r2, [r3, #0]
 8000fc4:	4b0a      	ldr	r3, [pc, #40]	; (8000ff0 <HAL_Init+0x3c>)
 8000fc6:	2180      	movs	r1, #128	; 0x80
 8000fc8:	0049      	lsls	r1, r1, #1
 8000fca:	430a      	orrs	r2, r1
 8000fcc:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000fce:	2000      	movs	r0, #0
 8000fd0:	f000 f810 	bl	8000ff4 <HAL_InitTick>
 8000fd4:	1e03      	subs	r3, r0, #0
 8000fd6:	d003      	beq.n	8000fe0 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8000fd8:	1dfb      	adds	r3, r7, #7
 8000fda:	2201      	movs	r2, #1
 8000fdc:	701a      	strb	r2, [r3, #0]
 8000fde:	e001      	b.n	8000fe4 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8000fe0:	f7ff fe48 	bl	8000c74 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000fe4:	1dfb      	adds	r3, r7, #7
 8000fe6:	781b      	ldrb	r3, [r3, #0]
}
 8000fe8:	0018      	movs	r0, r3
 8000fea:	46bd      	mov	sp, r7
 8000fec:	b002      	add	sp, #8
 8000fee:	bd80      	pop	{r7, pc}
 8000ff0:	40022000 	.word	0x40022000

08000ff4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ff4:	b590      	push	{r4, r7, lr}
 8000ff6:	b085      	sub	sp, #20
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000ffc:	230f      	movs	r3, #15
 8000ffe:	18fb      	adds	r3, r7, r3
 8001000:	2200      	movs	r2, #0
 8001002:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8001004:	4b1d      	ldr	r3, [pc, #116]	; (800107c <HAL_InitTick+0x88>)
 8001006:	781b      	ldrb	r3, [r3, #0]
 8001008:	2b00      	cmp	r3, #0
 800100a:	d02b      	beq.n	8001064 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 800100c:	4b1c      	ldr	r3, [pc, #112]	; (8001080 <HAL_InitTick+0x8c>)
 800100e:	681c      	ldr	r4, [r3, #0]
 8001010:	4b1a      	ldr	r3, [pc, #104]	; (800107c <HAL_InitTick+0x88>)
 8001012:	781b      	ldrb	r3, [r3, #0]
 8001014:	0019      	movs	r1, r3
 8001016:	23fa      	movs	r3, #250	; 0xfa
 8001018:	0098      	lsls	r0, r3, #2
 800101a:	f7ff f873 	bl	8000104 <__udivsi3>
 800101e:	0003      	movs	r3, r0
 8001020:	0019      	movs	r1, r3
 8001022:	0020      	movs	r0, r4
 8001024:	f7ff f86e 	bl	8000104 <__udivsi3>
 8001028:	0003      	movs	r3, r0
 800102a:	0018      	movs	r0, r3
 800102c:	f000 f913 	bl	8001256 <HAL_SYSTICK_Config>
 8001030:	1e03      	subs	r3, r0, #0
 8001032:	d112      	bne.n	800105a <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	2b03      	cmp	r3, #3
 8001038:	d80a      	bhi.n	8001050 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800103a:	6879      	ldr	r1, [r7, #4]
 800103c:	2301      	movs	r3, #1
 800103e:	425b      	negs	r3, r3
 8001040:	2200      	movs	r2, #0
 8001042:	0018      	movs	r0, r3
 8001044:	f000 f8f2 	bl	800122c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001048:	4b0e      	ldr	r3, [pc, #56]	; (8001084 <HAL_InitTick+0x90>)
 800104a:	687a      	ldr	r2, [r7, #4]
 800104c:	601a      	str	r2, [r3, #0]
 800104e:	e00d      	b.n	800106c <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8001050:	230f      	movs	r3, #15
 8001052:	18fb      	adds	r3, r7, r3
 8001054:	2201      	movs	r2, #1
 8001056:	701a      	strb	r2, [r3, #0]
 8001058:	e008      	b.n	800106c <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 800105a:	230f      	movs	r3, #15
 800105c:	18fb      	adds	r3, r7, r3
 800105e:	2201      	movs	r2, #1
 8001060:	701a      	strb	r2, [r3, #0]
 8001062:	e003      	b.n	800106c <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001064:	230f      	movs	r3, #15
 8001066:	18fb      	adds	r3, r7, r3
 8001068:	2201      	movs	r2, #1
 800106a:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 800106c:	230f      	movs	r3, #15
 800106e:	18fb      	adds	r3, r7, r3
 8001070:	781b      	ldrb	r3, [r3, #0]
}
 8001072:	0018      	movs	r0, r3
 8001074:	46bd      	mov	sp, r7
 8001076:	b005      	add	sp, #20
 8001078:	bd90      	pop	{r4, r7, pc}
 800107a:	46c0      	nop			; (mov r8, r8)
 800107c:	2000000c 	.word	0x2000000c
 8001080:	20000004 	.word	0x20000004
 8001084:	20000008 	.word	0x20000008

08001088 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001088:	b580      	push	{r7, lr}
 800108a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800108c:	4b05      	ldr	r3, [pc, #20]	; (80010a4 <HAL_IncTick+0x1c>)
 800108e:	781b      	ldrb	r3, [r3, #0]
 8001090:	001a      	movs	r2, r3
 8001092:	4b05      	ldr	r3, [pc, #20]	; (80010a8 <HAL_IncTick+0x20>)
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	18d2      	adds	r2, r2, r3
 8001098:	4b03      	ldr	r3, [pc, #12]	; (80010a8 <HAL_IncTick+0x20>)
 800109a:	601a      	str	r2, [r3, #0]
}
 800109c:	46c0      	nop			; (mov r8, r8)
 800109e:	46bd      	mov	sp, r7
 80010a0:	bd80      	pop	{r7, pc}
 80010a2:	46c0      	nop			; (mov r8, r8)
 80010a4:	2000000c 	.word	0x2000000c
 80010a8:	20000158 	.word	0x20000158

080010ac <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	af00      	add	r7, sp, #0
  return uwTick;
 80010b0:	4b02      	ldr	r3, [pc, #8]	; (80010bc <HAL_GetTick+0x10>)
 80010b2:	681b      	ldr	r3, [r3, #0]
}
 80010b4:	0018      	movs	r0, r3
 80010b6:	46bd      	mov	sp, r7
 80010b8:	bd80      	pop	{r7, pc}
 80010ba:	46c0      	nop			; (mov r8, r8)
 80010bc:	20000158 	.word	0x20000158

080010c0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b084      	sub	sp, #16
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80010c8:	f7ff fff0 	bl	80010ac <HAL_GetTick>
 80010cc:	0003      	movs	r3, r0
 80010ce:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80010d4:	68fb      	ldr	r3, [r7, #12]
 80010d6:	3301      	adds	r3, #1
 80010d8:	d005      	beq.n	80010e6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80010da:	4b0a      	ldr	r3, [pc, #40]	; (8001104 <HAL_Delay+0x44>)
 80010dc:	781b      	ldrb	r3, [r3, #0]
 80010de:	001a      	movs	r2, r3
 80010e0:	68fb      	ldr	r3, [r7, #12]
 80010e2:	189b      	adds	r3, r3, r2
 80010e4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80010e6:	46c0      	nop			; (mov r8, r8)
 80010e8:	f7ff ffe0 	bl	80010ac <HAL_GetTick>
 80010ec:	0002      	movs	r2, r0
 80010ee:	68bb      	ldr	r3, [r7, #8]
 80010f0:	1ad3      	subs	r3, r2, r3
 80010f2:	68fa      	ldr	r2, [r7, #12]
 80010f4:	429a      	cmp	r2, r3
 80010f6:	d8f7      	bhi.n	80010e8 <HAL_Delay+0x28>
  {
  }
}
 80010f8:	46c0      	nop			; (mov r8, r8)
 80010fa:	46c0      	nop			; (mov r8, r8)
 80010fc:	46bd      	mov	sp, r7
 80010fe:	b004      	add	sp, #16
 8001100:	bd80      	pop	{r7, pc}
 8001102:	46c0      	nop			; (mov r8, r8)
 8001104:	2000000c 	.word	0x2000000c

08001108 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001108:	b590      	push	{r4, r7, lr}
 800110a:	b083      	sub	sp, #12
 800110c:	af00      	add	r7, sp, #0
 800110e:	0002      	movs	r2, r0
 8001110:	6039      	str	r1, [r7, #0]
 8001112:	1dfb      	adds	r3, r7, #7
 8001114:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001116:	1dfb      	adds	r3, r7, #7
 8001118:	781b      	ldrb	r3, [r3, #0]
 800111a:	2b7f      	cmp	r3, #127	; 0x7f
 800111c:	d828      	bhi.n	8001170 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800111e:	4a2f      	ldr	r2, [pc, #188]	; (80011dc <__NVIC_SetPriority+0xd4>)
 8001120:	1dfb      	adds	r3, r7, #7
 8001122:	781b      	ldrb	r3, [r3, #0]
 8001124:	b25b      	sxtb	r3, r3
 8001126:	089b      	lsrs	r3, r3, #2
 8001128:	33c0      	adds	r3, #192	; 0xc0
 800112a:	009b      	lsls	r3, r3, #2
 800112c:	589b      	ldr	r3, [r3, r2]
 800112e:	1dfa      	adds	r2, r7, #7
 8001130:	7812      	ldrb	r2, [r2, #0]
 8001132:	0011      	movs	r1, r2
 8001134:	2203      	movs	r2, #3
 8001136:	400a      	ands	r2, r1
 8001138:	00d2      	lsls	r2, r2, #3
 800113a:	21ff      	movs	r1, #255	; 0xff
 800113c:	4091      	lsls	r1, r2
 800113e:	000a      	movs	r2, r1
 8001140:	43d2      	mvns	r2, r2
 8001142:	401a      	ands	r2, r3
 8001144:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001146:	683b      	ldr	r3, [r7, #0]
 8001148:	019b      	lsls	r3, r3, #6
 800114a:	22ff      	movs	r2, #255	; 0xff
 800114c:	401a      	ands	r2, r3
 800114e:	1dfb      	adds	r3, r7, #7
 8001150:	781b      	ldrb	r3, [r3, #0]
 8001152:	0018      	movs	r0, r3
 8001154:	2303      	movs	r3, #3
 8001156:	4003      	ands	r3, r0
 8001158:	00db      	lsls	r3, r3, #3
 800115a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800115c:	481f      	ldr	r0, [pc, #124]	; (80011dc <__NVIC_SetPriority+0xd4>)
 800115e:	1dfb      	adds	r3, r7, #7
 8001160:	781b      	ldrb	r3, [r3, #0]
 8001162:	b25b      	sxtb	r3, r3
 8001164:	089b      	lsrs	r3, r3, #2
 8001166:	430a      	orrs	r2, r1
 8001168:	33c0      	adds	r3, #192	; 0xc0
 800116a:	009b      	lsls	r3, r3, #2
 800116c:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800116e:	e031      	b.n	80011d4 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001170:	4a1b      	ldr	r2, [pc, #108]	; (80011e0 <__NVIC_SetPriority+0xd8>)
 8001172:	1dfb      	adds	r3, r7, #7
 8001174:	781b      	ldrb	r3, [r3, #0]
 8001176:	0019      	movs	r1, r3
 8001178:	230f      	movs	r3, #15
 800117a:	400b      	ands	r3, r1
 800117c:	3b08      	subs	r3, #8
 800117e:	089b      	lsrs	r3, r3, #2
 8001180:	3306      	adds	r3, #6
 8001182:	009b      	lsls	r3, r3, #2
 8001184:	18d3      	adds	r3, r2, r3
 8001186:	3304      	adds	r3, #4
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	1dfa      	adds	r2, r7, #7
 800118c:	7812      	ldrb	r2, [r2, #0]
 800118e:	0011      	movs	r1, r2
 8001190:	2203      	movs	r2, #3
 8001192:	400a      	ands	r2, r1
 8001194:	00d2      	lsls	r2, r2, #3
 8001196:	21ff      	movs	r1, #255	; 0xff
 8001198:	4091      	lsls	r1, r2
 800119a:	000a      	movs	r2, r1
 800119c:	43d2      	mvns	r2, r2
 800119e:	401a      	ands	r2, r3
 80011a0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80011a2:	683b      	ldr	r3, [r7, #0]
 80011a4:	019b      	lsls	r3, r3, #6
 80011a6:	22ff      	movs	r2, #255	; 0xff
 80011a8:	401a      	ands	r2, r3
 80011aa:	1dfb      	adds	r3, r7, #7
 80011ac:	781b      	ldrb	r3, [r3, #0]
 80011ae:	0018      	movs	r0, r3
 80011b0:	2303      	movs	r3, #3
 80011b2:	4003      	ands	r3, r0
 80011b4:	00db      	lsls	r3, r3, #3
 80011b6:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80011b8:	4809      	ldr	r0, [pc, #36]	; (80011e0 <__NVIC_SetPriority+0xd8>)
 80011ba:	1dfb      	adds	r3, r7, #7
 80011bc:	781b      	ldrb	r3, [r3, #0]
 80011be:	001c      	movs	r4, r3
 80011c0:	230f      	movs	r3, #15
 80011c2:	4023      	ands	r3, r4
 80011c4:	3b08      	subs	r3, #8
 80011c6:	089b      	lsrs	r3, r3, #2
 80011c8:	430a      	orrs	r2, r1
 80011ca:	3306      	adds	r3, #6
 80011cc:	009b      	lsls	r3, r3, #2
 80011ce:	18c3      	adds	r3, r0, r3
 80011d0:	3304      	adds	r3, #4
 80011d2:	601a      	str	r2, [r3, #0]
}
 80011d4:	46c0      	nop			; (mov r8, r8)
 80011d6:	46bd      	mov	sp, r7
 80011d8:	b003      	add	sp, #12
 80011da:	bd90      	pop	{r4, r7, pc}
 80011dc:	e000e100 	.word	0xe000e100
 80011e0:	e000ed00 	.word	0xe000ed00

080011e4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80011e4:	b580      	push	{r7, lr}
 80011e6:	b082      	sub	sp, #8
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	1e5a      	subs	r2, r3, #1
 80011f0:	2380      	movs	r3, #128	; 0x80
 80011f2:	045b      	lsls	r3, r3, #17
 80011f4:	429a      	cmp	r2, r3
 80011f6:	d301      	bcc.n	80011fc <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80011f8:	2301      	movs	r3, #1
 80011fa:	e010      	b.n	800121e <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80011fc:	4b0a      	ldr	r3, [pc, #40]	; (8001228 <SysTick_Config+0x44>)
 80011fe:	687a      	ldr	r2, [r7, #4]
 8001200:	3a01      	subs	r2, #1
 8001202:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001204:	2301      	movs	r3, #1
 8001206:	425b      	negs	r3, r3
 8001208:	2103      	movs	r1, #3
 800120a:	0018      	movs	r0, r3
 800120c:	f7ff ff7c 	bl	8001108 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001210:	4b05      	ldr	r3, [pc, #20]	; (8001228 <SysTick_Config+0x44>)
 8001212:	2200      	movs	r2, #0
 8001214:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001216:	4b04      	ldr	r3, [pc, #16]	; (8001228 <SysTick_Config+0x44>)
 8001218:	2207      	movs	r2, #7
 800121a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800121c:	2300      	movs	r3, #0
}
 800121e:	0018      	movs	r0, r3
 8001220:	46bd      	mov	sp, r7
 8001222:	b002      	add	sp, #8
 8001224:	bd80      	pop	{r7, pc}
 8001226:	46c0      	nop			; (mov r8, r8)
 8001228:	e000e010 	.word	0xe000e010

0800122c <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800122c:	b580      	push	{r7, lr}
 800122e:	b084      	sub	sp, #16
 8001230:	af00      	add	r7, sp, #0
 8001232:	60b9      	str	r1, [r7, #8]
 8001234:	607a      	str	r2, [r7, #4]
 8001236:	210f      	movs	r1, #15
 8001238:	187b      	adds	r3, r7, r1
 800123a:	1c02      	adds	r2, r0, #0
 800123c:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 800123e:	68ba      	ldr	r2, [r7, #8]
 8001240:	187b      	adds	r3, r7, r1
 8001242:	781b      	ldrb	r3, [r3, #0]
 8001244:	b25b      	sxtb	r3, r3
 8001246:	0011      	movs	r1, r2
 8001248:	0018      	movs	r0, r3
 800124a:	f7ff ff5d 	bl	8001108 <__NVIC_SetPriority>
}
 800124e:	46c0      	nop			; (mov r8, r8)
 8001250:	46bd      	mov	sp, r7
 8001252:	b004      	add	sp, #16
 8001254:	bd80      	pop	{r7, pc}

08001256 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001256:	b580      	push	{r7, lr}
 8001258:	b082      	sub	sp, #8
 800125a:	af00      	add	r7, sp, #0
 800125c:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	0018      	movs	r0, r3
 8001262:	f7ff ffbf 	bl	80011e4 <SysTick_Config>
 8001266:	0003      	movs	r3, r0
}
 8001268:	0018      	movs	r0, r3
 800126a:	46bd      	mov	sp, r7
 800126c:	b002      	add	sp, #8
 800126e:	bd80      	pop	{r7, pc}

08001270 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001270:	b580      	push	{r7, lr}
 8001272:	b086      	sub	sp, #24
 8001274:	af00      	add	r7, sp, #0
 8001276:	6078      	str	r0, [r7, #4]
 8001278:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800127a:	2300      	movs	r3, #0
 800127c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800127e:	e147      	b.n	8001510 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001280:	683b      	ldr	r3, [r7, #0]
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	2101      	movs	r1, #1
 8001286:	697a      	ldr	r2, [r7, #20]
 8001288:	4091      	lsls	r1, r2
 800128a:	000a      	movs	r2, r1
 800128c:	4013      	ands	r3, r2
 800128e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001290:	68fb      	ldr	r3, [r7, #12]
 8001292:	2b00      	cmp	r3, #0
 8001294:	d100      	bne.n	8001298 <HAL_GPIO_Init+0x28>
 8001296:	e138      	b.n	800150a <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001298:	683b      	ldr	r3, [r7, #0]
 800129a:	685b      	ldr	r3, [r3, #4]
 800129c:	2203      	movs	r2, #3
 800129e:	4013      	ands	r3, r2
 80012a0:	2b01      	cmp	r3, #1
 80012a2:	d005      	beq.n	80012b0 <HAL_GPIO_Init+0x40>
 80012a4:	683b      	ldr	r3, [r7, #0]
 80012a6:	685b      	ldr	r3, [r3, #4]
 80012a8:	2203      	movs	r2, #3
 80012aa:	4013      	ands	r3, r2
 80012ac:	2b02      	cmp	r3, #2
 80012ae:	d130      	bne.n	8001312 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	689b      	ldr	r3, [r3, #8]
 80012b4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80012b6:	697b      	ldr	r3, [r7, #20]
 80012b8:	005b      	lsls	r3, r3, #1
 80012ba:	2203      	movs	r2, #3
 80012bc:	409a      	lsls	r2, r3
 80012be:	0013      	movs	r3, r2
 80012c0:	43da      	mvns	r2, r3
 80012c2:	693b      	ldr	r3, [r7, #16]
 80012c4:	4013      	ands	r3, r2
 80012c6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80012c8:	683b      	ldr	r3, [r7, #0]
 80012ca:	68da      	ldr	r2, [r3, #12]
 80012cc:	697b      	ldr	r3, [r7, #20]
 80012ce:	005b      	lsls	r3, r3, #1
 80012d0:	409a      	lsls	r2, r3
 80012d2:	0013      	movs	r3, r2
 80012d4:	693a      	ldr	r2, [r7, #16]
 80012d6:	4313      	orrs	r3, r2
 80012d8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	693a      	ldr	r2, [r7, #16]
 80012de:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	685b      	ldr	r3, [r3, #4]
 80012e4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80012e6:	2201      	movs	r2, #1
 80012e8:	697b      	ldr	r3, [r7, #20]
 80012ea:	409a      	lsls	r2, r3
 80012ec:	0013      	movs	r3, r2
 80012ee:	43da      	mvns	r2, r3
 80012f0:	693b      	ldr	r3, [r7, #16]
 80012f2:	4013      	ands	r3, r2
 80012f4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80012f6:	683b      	ldr	r3, [r7, #0]
 80012f8:	685b      	ldr	r3, [r3, #4]
 80012fa:	091b      	lsrs	r3, r3, #4
 80012fc:	2201      	movs	r2, #1
 80012fe:	401a      	ands	r2, r3
 8001300:	697b      	ldr	r3, [r7, #20]
 8001302:	409a      	lsls	r2, r3
 8001304:	0013      	movs	r3, r2
 8001306:	693a      	ldr	r2, [r7, #16]
 8001308:	4313      	orrs	r3, r2
 800130a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	693a      	ldr	r2, [r7, #16]
 8001310:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001312:	683b      	ldr	r3, [r7, #0]
 8001314:	685b      	ldr	r3, [r3, #4]
 8001316:	2203      	movs	r2, #3
 8001318:	4013      	ands	r3, r2
 800131a:	2b03      	cmp	r3, #3
 800131c:	d017      	beq.n	800134e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	68db      	ldr	r3, [r3, #12]
 8001322:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001324:	697b      	ldr	r3, [r7, #20]
 8001326:	005b      	lsls	r3, r3, #1
 8001328:	2203      	movs	r2, #3
 800132a:	409a      	lsls	r2, r3
 800132c:	0013      	movs	r3, r2
 800132e:	43da      	mvns	r2, r3
 8001330:	693b      	ldr	r3, [r7, #16]
 8001332:	4013      	ands	r3, r2
 8001334:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001336:	683b      	ldr	r3, [r7, #0]
 8001338:	689a      	ldr	r2, [r3, #8]
 800133a:	697b      	ldr	r3, [r7, #20]
 800133c:	005b      	lsls	r3, r3, #1
 800133e:	409a      	lsls	r2, r3
 8001340:	0013      	movs	r3, r2
 8001342:	693a      	ldr	r2, [r7, #16]
 8001344:	4313      	orrs	r3, r2
 8001346:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	693a      	ldr	r2, [r7, #16]
 800134c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800134e:	683b      	ldr	r3, [r7, #0]
 8001350:	685b      	ldr	r3, [r3, #4]
 8001352:	2203      	movs	r2, #3
 8001354:	4013      	ands	r3, r2
 8001356:	2b02      	cmp	r3, #2
 8001358:	d123      	bne.n	80013a2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800135a:	697b      	ldr	r3, [r7, #20]
 800135c:	08da      	lsrs	r2, r3, #3
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	3208      	adds	r2, #8
 8001362:	0092      	lsls	r2, r2, #2
 8001364:	58d3      	ldr	r3, [r2, r3]
 8001366:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001368:	697b      	ldr	r3, [r7, #20]
 800136a:	2207      	movs	r2, #7
 800136c:	4013      	ands	r3, r2
 800136e:	009b      	lsls	r3, r3, #2
 8001370:	220f      	movs	r2, #15
 8001372:	409a      	lsls	r2, r3
 8001374:	0013      	movs	r3, r2
 8001376:	43da      	mvns	r2, r3
 8001378:	693b      	ldr	r3, [r7, #16]
 800137a:	4013      	ands	r3, r2
 800137c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800137e:	683b      	ldr	r3, [r7, #0]
 8001380:	691a      	ldr	r2, [r3, #16]
 8001382:	697b      	ldr	r3, [r7, #20]
 8001384:	2107      	movs	r1, #7
 8001386:	400b      	ands	r3, r1
 8001388:	009b      	lsls	r3, r3, #2
 800138a:	409a      	lsls	r2, r3
 800138c:	0013      	movs	r3, r2
 800138e:	693a      	ldr	r2, [r7, #16]
 8001390:	4313      	orrs	r3, r2
 8001392:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001394:	697b      	ldr	r3, [r7, #20]
 8001396:	08da      	lsrs	r2, r3, #3
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	3208      	adds	r2, #8
 800139c:	0092      	lsls	r2, r2, #2
 800139e:	6939      	ldr	r1, [r7, #16]
 80013a0:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80013a8:	697b      	ldr	r3, [r7, #20]
 80013aa:	005b      	lsls	r3, r3, #1
 80013ac:	2203      	movs	r2, #3
 80013ae:	409a      	lsls	r2, r3
 80013b0:	0013      	movs	r3, r2
 80013b2:	43da      	mvns	r2, r3
 80013b4:	693b      	ldr	r3, [r7, #16]
 80013b6:	4013      	ands	r3, r2
 80013b8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80013ba:	683b      	ldr	r3, [r7, #0]
 80013bc:	685b      	ldr	r3, [r3, #4]
 80013be:	2203      	movs	r2, #3
 80013c0:	401a      	ands	r2, r3
 80013c2:	697b      	ldr	r3, [r7, #20]
 80013c4:	005b      	lsls	r3, r3, #1
 80013c6:	409a      	lsls	r2, r3
 80013c8:	0013      	movs	r3, r2
 80013ca:	693a      	ldr	r2, [r7, #16]
 80013cc:	4313      	orrs	r3, r2
 80013ce:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	693a      	ldr	r2, [r7, #16]
 80013d4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80013d6:	683b      	ldr	r3, [r7, #0]
 80013d8:	685a      	ldr	r2, [r3, #4]
 80013da:	23c0      	movs	r3, #192	; 0xc0
 80013dc:	029b      	lsls	r3, r3, #10
 80013de:	4013      	ands	r3, r2
 80013e0:	d100      	bne.n	80013e4 <HAL_GPIO_Init+0x174>
 80013e2:	e092      	b.n	800150a <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 80013e4:	4a50      	ldr	r2, [pc, #320]	; (8001528 <HAL_GPIO_Init+0x2b8>)
 80013e6:	697b      	ldr	r3, [r7, #20]
 80013e8:	089b      	lsrs	r3, r3, #2
 80013ea:	3318      	adds	r3, #24
 80013ec:	009b      	lsls	r3, r3, #2
 80013ee:	589b      	ldr	r3, [r3, r2]
 80013f0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 80013f2:	697b      	ldr	r3, [r7, #20]
 80013f4:	2203      	movs	r2, #3
 80013f6:	4013      	ands	r3, r2
 80013f8:	00db      	lsls	r3, r3, #3
 80013fa:	220f      	movs	r2, #15
 80013fc:	409a      	lsls	r2, r3
 80013fe:	0013      	movs	r3, r2
 8001400:	43da      	mvns	r2, r3
 8001402:	693b      	ldr	r3, [r7, #16]
 8001404:	4013      	ands	r3, r2
 8001406:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8001408:	687a      	ldr	r2, [r7, #4]
 800140a:	23a0      	movs	r3, #160	; 0xa0
 800140c:	05db      	lsls	r3, r3, #23
 800140e:	429a      	cmp	r2, r3
 8001410:	d013      	beq.n	800143a <HAL_GPIO_Init+0x1ca>
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	4a45      	ldr	r2, [pc, #276]	; (800152c <HAL_GPIO_Init+0x2bc>)
 8001416:	4293      	cmp	r3, r2
 8001418:	d00d      	beq.n	8001436 <HAL_GPIO_Init+0x1c6>
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	4a44      	ldr	r2, [pc, #272]	; (8001530 <HAL_GPIO_Init+0x2c0>)
 800141e:	4293      	cmp	r3, r2
 8001420:	d007      	beq.n	8001432 <HAL_GPIO_Init+0x1c2>
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	4a43      	ldr	r2, [pc, #268]	; (8001534 <HAL_GPIO_Init+0x2c4>)
 8001426:	4293      	cmp	r3, r2
 8001428:	d101      	bne.n	800142e <HAL_GPIO_Init+0x1be>
 800142a:	2303      	movs	r3, #3
 800142c:	e006      	b.n	800143c <HAL_GPIO_Init+0x1cc>
 800142e:	2305      	movs	r3, #5
 8001430:	e004      	b.n	800143c <HAL_GPIO_Init+0x1cc>
 8001432:	2302      	movs	r3, #2
 8001434:	e002      	b.n	800143c <HAL_GPIO_Init+0x1cc>
 8001436:	2301      	movs	r3, #1
 8001438:	e000      	b.n	800143c <HAL_GPIO_Init+0x1cc>
 800143a:	2300      	movs	r3, #0
 800143c:	697a      	ldr	r2, [r7, #20]
 800143e:	2103      	movs	r1, #3
 8001440:	400a      	ands	r2, r1
 8001442:	00d2      	lsls	r2, r2, #3
 8001444:	4093      	lsls	r3, r2
 8001446:	693a      	ldr	r2, [r7, #16]
 8001448:	4313      	orrs	r3, r2
 800144a:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 800144c:	4936      	ldr	r1, [pc, #216]	; (8001528 <HAL_GPIO_Init+0x2b8>)
 800144e:	697b      	ldr	r3, [r7, #20]
 8001450:	089b      	lsrs	r3, r3, #2
 8001452:	3318      	adds	r3, #24
 8001454:	009b      	lsls	r3, r3, #2
 8001456:	693a      	ldr	r2, [r7, #16]
 8001458:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800145a:	4b33      	ldr	r3, [pc, #204]	; (8001528 <HAL_GPIO_Init+0x2b8>)
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001460:	68fb      	ldr	r3, [r7, #12]
 8001462:	43da      	mvns	r2, r3
 8001464:	693b      	ldr	r3, [r7, #16]
 8001466:	4013      	ands	r3, r2
 8001468:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800146a:	683b      	ldr	r3, [r7, #0]
 800146c:	685a      	ldr	r2, [r3, #4]
 800146e:	2380      	movs	r3, #128	; 0x80
 8001470:	035b      	lsls	r3, r3, #13
 8001472:	4013      	ands	r3, r2
 8001474:	d003      	beq.n	800147e <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 8001476:	693a      	ldr	r2, [r7, #16]
 8001478:	68fb      	ldr	r3, [r7, #12]
 800147a:	4313      	orrs	r3, r2
 800147c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800147e:	4b2a      	ldr	r3, [pc, #168]	; (8001528 <HAL_GPIO_Init+0x2b8>)
 8001480:	693a      	ldr	r2, [r7, #16]
 8001482:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8001484:	4b28      	ldr	r3, [pc, #160]	; (8001528 <HAL_GPIO_Init+0x2b8>)
 8001486:	685b      	ldr	r3, [r3, #4]
 8001488:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800148a:	68fb      	ldr	r3, [r7, #12]
 800148c:	43da      	mvns	r2, r3
 800148e:	693b      	ldr	r3, [r7, #16]
 8001490:	4013      	ands	r3, r2
 8001492:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001494:	683b      	ldr	r3, [r7, #0]
 8001496:	685a      	ldr	r2, [r3, #4]
 8001498:	2380      	movs	r3, #128	; 0x80
 800149a:	039b      	lsls	r3, r3, #14
 800149c:	4013      	ands	r3, r2
 800149e:	d003      	beq.n	80014a8 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 80014a0:	693a      	ldr	r2, [r7, #16]
 80014a2:	68fb      	ldr	r3, [r7, #12]
 80014a4:	4313      	orrs	r3, r2
 80014a6:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80014a8:	4b1f      	ldr	r3, [pc, #124]	; (8001528 <HAL_GPIO_Init+0x2b8>)
 80014aa:	693a      	ldr	r2, [r7, #16]
 80014ac:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80014ae:	4a1e      	ldr	r2, [pc, #120]	; (8001528 <HAL_GPIO_Init+0x2b8>)
 80014b0:	2384      	movs	r3, #132	; 0x84
 80014b2:	58d3      	ldr	r3, [r2, r3]
 80014b4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80014b6:	68fb      	ldr	r3, [r7, #12]
 80014b8:	43da      	mvns	r2, r3
 80014ba:	693b      	ldr	r3, [r7, #16]
 80014bc:	4013      	ands	r3, r2
 80014be:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80014c0:	683b      	ldr	r3, [r7, #0]
 80014c2:	685a      	ldr	r2, [r3, #4]
 80014c4:	2380      	movs	r3, #128	; 0x80
 80014c6:	029b      	lsls	r3, r3, #10
 80014c8:	4013      	ands	r3, r2
 80014ca:	d003      	beq.n	80014d4 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 80014cc:	693a      	ldr	r2, [r7, #16]
 80014ce:	68fb      	ldr	r3, [r7, #12]
 80014d0:	4313      	orrs	r3, r2
 80014d2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80014d4:	4914      	ldr	r1, [pc, #80]	; (8001528 <HAL_GPIO_Init+0x2b8>)
 80014d6:	2284      	movs	r2, #132	; 0x84
 80014d8:	693b      	ldr	r3, [r7, #16]
 80014da:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 80014dc:	4a12      	ldr	r2, [pc, #72]	; (8001528 <HAL_GPIO_Init+0x2b8>)
 80014de:	2380      	movs	r3, #128	; 0x80
 80014e0:	58d3      	ldr	r3, [r2, r3]
 80014e2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80014e4:	68fb      	ldr	r3, [r7, #12]
 80014e6:	43da      	mvns	r2, r3
 80014e8:	693b      	ldr	r3, [r7, #16]
 80014ea:	4013      	ands	r3, r2
 80014ec:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80014ee:	683b      	ldr	r3, [r7, #0]
 80014f0:	685a      	ldr	r2, [r3, #4]
 80014f2:	2380      	movs	r3, #128	; 0x80
 80014f4:	025b      	lsls	r3, r3, #9
 80014f6:	4013      	ands	r3, r2
 80014f8:	d003      	beq.n	8001502 <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 80014fa:	693a      	ldr	r2, [r7, #16]
 80014fc:	68fb      	ldr	r3, [r7, #12]
 80014fe:	4313      	orrs	r3, r2
 8001500:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001502:	4909      	ldr	r1, [pc, #36]	; (8001528 <HAL_GPIO_Init+0x2b8>)
 8001504:	2280      	movs	r2, #128	; 0x80
 8001506:	693b      	ldr	r3, [r7, #16]
 8001508:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 800150a:	697b      	ldr	r3, [r7, #20]
 800150c:	3301      	adds	r3, #1
 800150e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001510:	683b      	ldr	r3, [r7, #0]
 8001512:	681a      	ldr	r2, [r3, #0]
 8001514:	697b      	ldr	r3, [r7, #20]
 8001516:	40da      	lsrs	r2, r3
 8001518:	1e13      	subs	r3, r2, #0
 800151a:	d000      	beq.n	800151e <HAL_GPIO_Init+0x2ae>
 800151c:	e6b0      	b.n	8001280 <HAL_GPIO_Init+0x10>
  }
}
 800151e:	46c0      	nop			; (mov r8, r8)
 8001520:	46c0      	nop			; (mov r8, r8)
 8001522:	46bd      	mov	sp, r7
 8001524:	b006      	add	sp, #24
 8001526:	bd80      	pop	{r7, pc}
 8001528:	40021800 	.word	0x40021800
 800152c:	50000400 	.word	0x50000400
 8001530:	50000800 	.word	0x50000800
 8001534:	50000c00 	.word	0x50000c00

08001538 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001538:	b580      	push	{r7, lr}
 800153a:	b082      	sub	sp, #8
 800153c:	af00      	add	r7, sp, #0
 800153e:	6078      	str	r0, [r7, #4]
 8001540:	0008      	movs	r0, r1
 8001542:	0011      	movs	r1, r2
 8001544:	1cbb      	adds	r3, r7, #2
 8001546:	1c02      	adds	r2, r0, #0
 8001548:	801a      	strh	r2, [r3, #0]
 800154a:	1c7b      	adds	r3, r7, #1
 800154c:	1c0a      	adds	r2, r1, #0
 800154e:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001550:	1c7b      	adds	r3, r7, #1
 8001552:	781b      	ldrb	r3, [r3, #0]
 8001554:	2b00      	cmp	r3, #0
 8001556:	d004      	beq.n	8001562 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001558:	1cbb      	adds	r3, r7, #2
 800155a:	881a      	ldrh	r2, [r3, #0]
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001560:	e003      	b.n	800156a <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001562:	1cbb      	adds	r3, r7, #2
 8001564:	881a      	ldrh	r2, [r3, #0]
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	629a      	str	r2, [r3, #40]	; 0x28
}
 800156a:	46c0      	nop			; (mov r8, r8)
 800156c:	46bd      	mov	sp, r7
 800156e:	b002      	add	sp, #8
 8001570:	bd80      	pop	{r7, pc}
	...

08001574 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001574:	b580      	push	{r7, lr}
 8001576:	b084      	sub	sp, #16
 8001578:	af00      	add	r7, sp, #0
 800157a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 800157c:	4b19      	ldr	r3, [pc, #100]	; (80015e4 <HAL_PWREx_ControlVoltageScaling+0x70>)
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	4a19      	ldr	r2, [pc, #100]	; (80015e8 <HAL_PWREx_ControlVoltageScaling+0x74>)
 8001582:	4013      	ands	r3, r2
 8001584:	0019      	movs	r1, r3
 8001586:	4b17      	ldr	r3, [pc, #92]	; (80015e4 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001588:	687a      	ldr	r2, [r7, #4]
 800158a:	430a      	orrs	r2, r1
 800158c:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800158e:	687a      	ldr	r2, [r7, #4]
 8001590:	2380      	movs	r3, #128	; 0x80
 8001592:	009b      	lsls	r3, r3, #2
 8001594:	429a      	cmp	r2, r3
 8001596:	d11f      	bne.n	80015d8 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8001598:	4b14      	ldr	r3, [pc, #80]	; (80015ec <HAL_PWREx_ControlVoltageScaling+0x78>)
 800159a:	681a      	ldr	r2, [r3, #0]
 800159c:	0013      	movs	r3, r2
 800159e:	005b      	lsls	r3, r3, #1
 80015a0:	189b      	adds	r3, r3, r2
 80015a2:	005b      	lsls	r3, r3, #1
 80015a4:	4912      	ldr	r1, [pc, #72]	; (80015f0 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 80015a6:	0018      	movs	r0, r3
 80015a8:	f7fe fdac 	bl	8000104 <__udivsi3>
 80015ac:	0003      	movs	r3, r0
 80015ae:	3301      	adds	r3, #1
 80015b0:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80015b2:	e008      	b.n	80015c6 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 80015b4:	68fb      	ldr	r3, [r7, #12]
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d003      	beq.n	80015c2 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 80015ba:	68fb      	ldr	r3, [r7, #12]
 80015bc:	3b01      	subs	r3, #1
 80015be:	60fb      	str	r3, [r7, #12]
 80015c0:	e001      	b.n	80015c6 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 80015c2:	2303      	movs	r3, #3
 80015c4:	e009      	b.n	80015da <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80015c6:	4b07      	ldr	r3, [pc, #28]	; (80015e4 <HAL_PWREx_ControlVoltageScaling+0x70>)
 80015c8:	695a      	ldr	r2, [r3, #20]
 80015ca:	2380      	movs	r3, #128	; 0x80
 80015cc:	00db      	lsls	r3, r3, #3
 80015ce:	401a      	ands	r2, r3
 80015d0:	2380      	movs	r3, #128	; 0x80
 80015d2:	00db      	lsls	r3, r3, #3
 80015d4:	429a      	cmp	r2, r3
 80015d6:	d0ed      	beq.n	80015b4 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 80015d8:	2300      	movs	r3, #0
}
 80015da:	0018      	movs	r0, r3
 80015dc:	46bd      	mov	sp, r7
 80015de:	b004      	add	sp, #16
 80015e0:	bd80      	pop	{r7, pc}
 80015e2:	46c0      	nop			; (mov r8, r8)
 80015e4:	40007000 	.word	0x40007000
 80015e8:	fffff9ff 	.word	0xfffff9ff
 80015ec:	20000004 	.word	0x20000004
 80015f0:	000f4240 	.word	0x000f4240

080015f4 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 80015f4:	b580      	push	{r7, lr}
 80015f6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 80015f8:	4b03      	ldr	r3, [pc, #12]	; (8001608 <LL_RCC_GetAPB1Prescaler+0x14>)
 80015fa:	689a      	ldr	r2, [r3, #8]
 80015fc:	23e0      	movs	r3, #224	; 0xe0
 80015fe:	01db      	lsls	r3, r3, #7
 8001600:	4013      	ands	r3, r2
}
 8001602:	0018      	movs	r0, r3
 8001604:	46bd      	mov	sp, r7
 8001606:	bd80      	pop	{r7, pc}
 8001608:	40021000 	.word	0x40021000

0800160c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800160c:	b580      	push	{r7, lr}
 800160e:	b088      	sub	sp, #32
 8001610:	af00      	add	r7, sp, #0
 8001612:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	2b00      	cmp	r3, #0
 8001618:	d101      	bne.n	800161e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800161a:	2301      	movs	r3, #1
 800161c:	e2fe      	b.n	8001c1c <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	2201      	movs	r2, #1
 8001624:	4013      	ands	r3, r2
 8001626:	d100      	bne.n	800162a <HAL_RCC_OscConfig+0x1e>
 8001628:	e07c      	b.n	8001724 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800162a:	4bc3      	ldr	r3, [pc, #780]	; (8001938 <HAL_RCC_OscConfig+0x32c>)
 800162c:	689b      	ldr	r3, [r3, #8]
 800162e:	2238      	movs	r2, #56	; 0x38
 8001630:	4013      	ands	r3, r2
 8001632:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001634:	4bc0      	ldr	r3, [pc, #768]	; (8001938 <HAL_RCC_OscConfig+0x32c>)
 8001636:	68db      	ldr	r3, [r3, #12]
 8001638:	2203      	movs	r2, #3
 800163a:	4013      	ands	r3, r2
 800163c:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 800163e:	69bb      	ldr	r3, [r7, #24]
 8001640:	2b10      	cmp	r3, #16
 8001642:	d102      	bne.n	800164a <HAL_RCC_OscConfig+0x3e>
 8001644:	697b      	ldr	r3, [r7, #20]
 8001646:	2b03      	cmp	r3, #3
 8001648:	d002      	beq.n	8001650 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 800164a:	69bb      	ldr	r3, [r7, #24]
 800164c:	2b08      	cmp	r3, #8
 800164e:	d10b      	bne.n	8001668 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001650:	4bb9      	ldr	r3, [pc, #740]	; (8001938 <HAL_RCC_OscConfig+0x32c>)
 8001652:	681a      	ldr	r2, [r3, #0]
 8001654:	2380      	movs	r3, #128	; 0x80
 8001656:	029b      	lsls	r3, r3, #10
 8001658:	4013      	ands	r3, r2
 800165a:	d062      	beq.n	8001722 <HAL_RCC_OscConfig+0x116>
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	685b      	ldr	r3, [r3, #4]
 8001660:	2b00      	cmp	r3, #0
 8001662:	d15e      	bne.n	8001722 <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8001664:	2301      	movs	r3, #1
 8001666:	e2d9      	b.n	8001c1c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	685a      	ldr	r2, [r3, #4]
 800166c:	2380      	movs	r3, #128	; 0x80
 800166e:	025b      	lsls	r3, r3, #9
 8001670:	429a      	cmp	r2, r3
 8001672:	d107      	bne.n	8001684 <HAL_RCC_OscConfig+0x78>
 8001674:	4bb0      	ldr	r3, [pc, #704]	; (8001938 <HAL_RCC_OscConfig+0x32c>)
 8001676:	681a      	ldr	r2, [r3, #0]
 8001678:	4baf      	ldr	r3, [pc, #700]	; (8001938 <HAL_RCC_OscConfig+0x32c>)
 800167a:	2180      	movs	r1, #128	; 0x80
 800167c:	0249      	lsls	r1, r1, #9
 800167e:	430a      	orrs	r2, r1
 8001680:	601a      	str	r2, [r3, #0]
 8001682:	e020      	b.n	80016c6 <HAL_RCC_OscConfig+0xba>
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	685a      	ldr	r2, [r3, #4]
 8001688:	23a0      	movs	r3, #160	; 0xa0
 800168a:	02db      	lsls	r3, r3, #11
 800168c:	429a      	cmp	r2, r3
 800168e:	d10e      	bne.n	80016ae <HAL_RCC_OscConfig+0xa2>
 8001690:	4ba9      	ldr	r3, [pc, #676]	; (8001938 <HAL_RCC_OscConfig+0x32c>)
 8001692:	681a      	ldr	r2, [r3, #0]
 8001694:	4ba8      	ldr	r3, [pc, #672]	; (8001938 <HAL_RCC_OscConfig+0x32c>)
 8001696:	2180      	movs	r1, #128	; 0x80
 8001698:	02c9      	lsls	r1, r1, #11
 800169a:	430a      	orrs	r2, r1
 800169c:	601a      	str	r2, [r3, #0]
 800169e:	4ba6      	ldr	r3, [pc, #664]	; (8001938 <HAL_RCC_OscConfig+0x32c>)
 80016a0:	681a      	ldr	r2, [r3, #0]
 80016a2:	4ba5      	ldr	r3, [pc, #660]	; (8001938 <HAL_RCC_OscConfig+0x32c>)
 80016a4:	2180      	movs	r1, #128	; 0x80
 80016a6:	0249      	lsls	r1, r1, #9
 80016a8:	430a      	orrs	r2, r1
 80016aa:	601a      	str	r2, [r3, #0]
 80016ac:	e00b      	b.n	80016c6 <HAL_RCC_OscConfig+0xba>
 80016ae:	4ba2      	ldr	r3, [pc, #648]	; (8001938 <HAL_RCC_OscConfig+0x32c>)
 80016b0:	681a      	ldr	r2, [r3, #0]
 80016b2:	4ba1      	ldr	r3, [pc, #644]	; (8001938 <HAL_RCC_OscConfig+0x32c>)
 80016b4:	49a1      	ldr	r1, [pc, #644]	; (800193c <HAL_RCC_OscConfig+0x330>)
 80016b6:	400a      	ands	r2, r1
 80016b8:	601a      	str	r2, [r3, #0]
 80016ba:	4b9f      	ldr	r3, [pc, #636]	; (8001938 <HAL_RCC_OscConfig+0x32c>)
 80016bc:	681a      	ldr	r2, [r3, #0]
 80016be:	4b9e      	ldr	r3, [pc, #632]	; (8001938 <HAL_RCC_OscConfig+0x32c>)
 80016c0:	499f      	ldr	r1, [pc, #636]	; (8001940 <HAL_RCC_OscConfig+0x334>)
 80016c2:	400a      	ands	r2, r1
 80016c4:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	685b      	ldr	r3, [r3, #4]
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d014      	beq.n	80016f8 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016ce:	f7ff fced 	bl	80010ac <HAL_GetTick>
 80016d2:	0003      	movs	r3, r0
 80016d4:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80016d6:	e008      	b.n	80016ea <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80016d8:	f7ff fce8 	bl	80010ac <HAL_GetTick>
 80016dc:	0002      	movs	r2, r0
 80016de:	693b      	ldr	r3, [r7, #16]
 80016e0:	1ad3      	subs	r3, r2, r3
 80016e2:	2b64      	cmp	r3, #100	; 0x64
 80016e4:	d901      	bls.n	80016ea <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 80016e6:	2303      	movs	r3, #3
 80016e8:	e298      	b.n	8001c1c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80016ea:	4b93      	ldr	r3, [pc, #588]	; (8001938 <HAL_RCC_OscConfig+0x32c>)
 80016ec:	681a      	ldr	r2, [r3, #0]
 80016ee:	2380      	movs	r3, #128	; 0x80
 80016f0:	029b      	lsls	r3, r3, #10
 80016f2:	4013      	ands	r3, r2
 80016f4:	d0f0      	beq.n	80016d8 <HAL_RCC_OscConfig+0xcc>
 80016f6:	e015      	b.n	8001724 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016f8:	f7ff fcd8 	bl	80010ac <HAL_GetTick>
 80016fc:	0003      	movs	r3, r0
 80016fe:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001700:	e008      	b.n	8001714 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001702:	f7ff fcd3 	bl	80010ac <HAL_GetTick>
 8001706:	0002      	movs	r2, r0
 8001708:	693b      	ldr	r3, [r7, #16]
 800170a:	1ad3      	subs	r3, r2, r3
 800170c:	2b64      	cmp	r3, #100	; 0x64
 800170e:	d901      	bls.n	8001714 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8001710:	2303      	movs	r3, #3
 8001712:	e283      	b.n	8001c1c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001714:	4b88      	ldr	r3, [pc, #544]	; (8001938 <HAL_RCC_OscConfig+0x32c>)
 8001716:	681a      	ldr	r2, [r3, #0]
 8001718:	2380      	movs	r3, #128	; 0x80
 800171a:	029b      	lsls	r3, r3, #10
 800171c:	4013      	ands	r3, r2
 800171e:	d1f0      	bne.n	8001702 <HAL_RCC_OscConfig+0xf6>
 8001720:	e000      	b.n	8001724 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001722:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	2202      	movs	r2, #2
 800172a:	4013      	ands	r3, r2
 800172c:	d100      	bne.n	8001730 <HAL_RCC_OscConfig+0x124>
 800172e:	e099      	b.n	8001864 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001730:	4b81      	ldr	r3, [pc, #516]	; (8001938 <HAL_RCC_OscConfig+0x32c>)
 8001732:	689b      	ldr	r3, [r3, #8]
 8001734:	2238      	movs	r2, #56	; 0x38
 8001736:	4013      	ands	r3, r2
 8001738:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800173a:	4b7f      	ldr	r3, [pc, #508]	; (8001938 <HAL_RCC_OscConfig+0x32c>)
 800173c:	68db      	ldr	r3, [r3, #12]
 800173e:	2203      	movs	r2, #3
 8001740:	4013      	ands	r3, r2
 8001742:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8001744:	69bb      	ldr	r3, [r7, #24]
 8001746:	2b10      	cmp	r3, #16
 8001748:	d102      	bne.n	8001750 <HAL_RCC_OscConfig+0x144>
 800174a:	697b      	ldr	r3, [r7, #20]
 800174c:	2b02      	cmp	r3, #2
 800174e:	d002      	beq.n	8001756 <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8001750:	69bb      	ldr	r3, [r7, #24]
 8001752:	2b00      	cmp	r3, #0
 8001754:	d135      	bne.n	80017c2 <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001756:	4b78      	ldr	r3, [pc, #480]	; (8001938 <HAL_RCC_OscConfig+0x32c>)
 8001758:	681a      	ldr	r2, [r3, #0]
 800175a:	2380      	movs	r3, #128	; 0x80
 800175c:	00db      	lsls	r3, r3, #3
 800175e:	4013      	ands	r3, r2
 8001760:	d005      	beq.n	800176e <HAL_RCC_OscConfig+0x162>
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	68db      	ldr	r3, [r3, #12]
 8001766:	2b00      	cmp	r3, #0
 8001768:	d101      	bne.n	800176e <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 800176a:	2301      	movs	r3, #1
 800176c:	e256      	b.n	8001c1c <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800176e:	4b72      	ldr	r3, [pc, #456]	; (8001938 <HAL_RCC_OscConfig+0x32c>)
 8001770:	685b      	ldr	r3, [r3, #4]
 8001772:	4a74      	ldr	r2, [pc, #464]	; (8001944 <HAL_RCC_OscConfig+0x338>)
 8001774:	4013      	ands	r3, r2
 8001776:	0019      	movs	r1, r3
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	695b      	ldr	r3, [r3, #20]
 800177c:	021a      	lsls	r2, r3, #8
 800177e:	4b6e      	ldr	r3, [pc, #440]	; (8001938 <HAL_RCC_OscConfig+0x32c>)
 8001780:	430a      	orrs	r2, r1
 8001782:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001784:	69bb      	ldr	r3, [r7, #24]
 8001786:	2b00      	cmp	r3, #0
 8001788:	d112      	bne.n	80017b0 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800178a:	4b6b      	ldr	r3, [pc, #428]	; (8001938 <HAL_RCC_OscConfig+0x32c>)
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	4a6e      	ldr	r2, [pc, #440]	; (8001948 <HAL_RCC_OscConfig+0x33c>)
 8001790:	4013      	ands	r3, r2
 8001792:	0019      	movs	r1, r3
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	691a      	ldr	r2, [r3, #16]
 8001798:	4b67      	ldr	r3, [pc, #412]	; (8001938 <HAL_RCC_OscConfig+0x32c>)
 800179a:	430a      	orrs	r2, r1
 800179c:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 800179e:	4b66      	ldr	r3, [pc, #408]	; (8001938 <HAL_RCC_OscConfig+0x32c>)
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	0adb      	lsrs	r3, r3, #11
 80017a4:	2207      	movs	r2, #7
 80017a6:	4013      	ands	r3, r2
 80017a8:	4a68      	ldr	r2, [pc, #416]	; (800194c <HAL_RCC_OscConfig+0x340>)
 80017aa:	40da      	lsrs	r2, r3
 80017ac:	4b68      	ldr	r3, [pc, #416]	; (8001950 <HAL_RCC_OscConfig+0x344>)
 80017ae:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80017b0:	4b68      	ldr	r3, [pc, #416]	; (8001954 <HAL_RCC_OscConfig+0x348>)
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	0018      	movs	r0, r3
 80017b6:	f7ff fc1d 	bl	8000ff4 <HAL_InitTick>
 80017ba:	1e03      	subs	r3, r0, #0
 80017bc:	d051      	beq.n	8001862 <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 80017be:	2301      	movs	r3, #1
 80017c0:	e22c      	b.n	8001c1c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	68db      	ldr	r3, [r3, #12]
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d030      	beq.n	800182c <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80017ca:	4b5b      	ldr	r3, [pc, #364]	; (8001938 <HAL_RCC_OscConfig+0x32c>)
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	4a5e      	ldr	r2, [pc, #376]	; (8001948 <HAL_RCC_OscConfig+0x33c>)
 80017d0:	4013      	ands	r3, r2
 80017d2:	0019      	movs	r1, r3
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	691a      	ldr	r2, [r3, #16]
 80017d8:	4b57      	ldr	r3, [pc, #348]	; (8001938 <HAL_RCC_OscConfig+0x32c>)
 80017da:	430a      	orrs	r2, r1
 80017dc:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 80017de:	4b56      	ldr	r3, [pc, #344]	; (8001938 <HAL_RCC_OscConfig+0x32c>)
 80017e0:	681a      	ldr	r2, [r3, #0]
 80017e2:	4b55      	ldr	r3, [pc, #340]	; (8001938 <HAL_RCC_OscConfig+0x32c>)
 80017e4:	2180      	movs	r1, #128	; 0x80
 80017e6:	0049      	lsls	r1, r1, #1
 80017e8:	430a      	orrs	r2, r1
 80017ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017ec:	f7ff fc5e 	bl	80010ac <HAL_GetTick>
 80017f0:	0003      	movs	r3, r0
 80017f2:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80017f4:	e008      	b.n	8001808 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80017f6:	f7ff fc59 	bl	80010ac <HAL_GetTick>
 80017fa:	0002      	movs	r2, r0
 80017fc:	693b      	ldr	r3, [r7, #16]
 80017fe:	1ad3      	subs	r3, r2, r3
 8001800:	2b02      	cmp	r3, #2
 8001802:	d901      	bls.n	8001808 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8001804:	2303      	movs	r3, #3
 8001806:	e209      	b.n	8001c1c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001808:	4b4b      	ldr	r3, [pc, #300]	; (8001938 <HAL_RCC_OscConfig+0x32c>)
 800180a:	681a      	ldr	r2, [r3, #0]
 800180c:	2380      	movs	r3, #128	; 0x80
 800180e:	00db      	lsls	r3, r3, #3
 8001810:	4013      	ands	r3, r2
 8001812:	d0f0      	beq.n	80017f6 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001814:	4b48      	ldr	r3, [pc, #288]	; (8001938 <HAL_RCC_OscConfig+0x32c>)
 8001816:	685b      	ldr	r3, [r3, #4]
 8001818:	4a4a      	ldr	r2, [pc, #296]	; (8001944 <HAL_RCC_OscConfig+0x338>)
 800181a:	4013      	ands	r3, r2
 800181c:	0019      	movs	r1, r3
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	695b      	ldr	r3, [r3, #20]
 8001822:	021a      	lsls	r2, r3, #8
 8001824:	4b44      	ldr	r3, [pc, #272]	; (8001938 <HAL_RCC_OscConfig+0x32c>)
 8001826:	430a      	orrs	r2, r1
 8001828:	605a      	str	r2, [r3, #4]
 800182a:	e01b      	b.n	8001864 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 800182c:	4b42      	ldr	r3, [pc, #264]	; (8001938 <HAL_RCC_OscConfig+0x32c>)
 800182e:	681a      	ldr	r2, [r3, #0]
 8001830:	4b41      	ldr	r3, [pc, #260]	; (8001938 <HAL_RCC_OscConfig+0x32c>)
 8001832:	4949      	ldr	r1, [pc, #292]	; (8001958 <HAL_RCC_OscConfig+0x34c>)
 8001834:	400a      	ands	r2, r1
 8001836:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001838:	f7ff fc38 	bl	80010ac <HAL_GetTick>
 800183c:	0003      	movs	r3, r0
 800183e:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001840:	e008      	b.n	8001854 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001842:	f7ff fc33 	bl	80010ac <HAL_GetTick>
 8001846:	0002      	movs	r2, r0
 8001848:	693b      	ldr	r3, [r7, #16]
 800184a:	1ad3      	subs	r3, r2, r3
 800184c:	2b02      	cmp	r3, #2
 800184e:	d901      	bls.n	8001854 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8001850:	2303      	movs	r3, #3
 8001852:	e1e3      	b.n	8001c1c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001854:	4b38      	ldr	r3, [pc, #224]	; (8001938 <HAL_RCC_OscConfig+0x32c>)
 8001856:	681a      	ldr	r2, [r3, #0]
 8001858:	2380      	movs	r3, #128	; 0x80
 800185a:	00db      	lsls	r3, r3, #3
 800185c:	4013      	ands	r3, r2
 800185e:	d1f0      	bne.n	8001842 <HAL_RCC_OscConfig+0x236>
 8001860:	e000      	b.n	8001864 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001862:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	2208      	movs	r2, #8
 800186a:	4013      	ands	r3, r2
 800186c:	d047      	beq.n	80018fe <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 800186e:	4b32      	ldr	r3, [pc, #200]	; (8001938 <HAL_RCC_OscConfig+0x32c>)
 8001870:	689b      	ldr	r3, [r3, #8]
 8001872:	2238      	movs	r2, #56	; 0x38
 8001874:	4013      	ands	r3, r2
 8001876:	2b18      	cmp	r3, #24
 8001878:	d10a      	bne.n	8001890 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 800187a:	4b2f      	ldr	r3, [pc, #188]	; (8001938 <HAL_RCC_OscConfig+0x32c>)
 800187c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800187e:	2202      	movs	r2, #2
 8001880:	4013      	ands	r3, r2
 8001882:	d03c      	beq.n	80018fe <HAL_RCC_OscConfig+0x2f2>
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	699b      	ldr	r3, [r3, #24]
 8001888:	2b00      	cmp	r3, #0
 800188a:	d138      	bne.n	80018fe <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 800188c:	2301      	movs	r3, #1
 800188e:	e1c5      	b.n	8001c1c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	699b      	ldr	r3, [r3, #24]
 8001894:	2b00      	cmp	r3, #0
 8001896:	d019      	beq.n	80018cc <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8001898:	4b27      	ldr	r3, [pc, #156]	; (8001938 <HAL_RCC_OscConfig+0x32c>)
 800189a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800189c:	4b26      	ldr	r3, [pc, #152]	; (8001938 <HAL_RCC_OscConfig+0x32c>)
 800189e:	2101      	movs	r1, #1
 80018a0:	430a      	orrs	r2, r1
 80018a2:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018a4:	f7ff fc02 	bl	80010ac <HAL_GetTick>
 80018a8:	0003      	movs	r3, r0
 80018aa:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80018ac:	e008      	b.n	80018c0 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80018ae:	f7ff fbfd 	bl	80010ac <HAL_GetTick>
 80018b2:	0002      	movs	r2, r0
 80018b4:	693b      	ldr	r3, [r7, #16]
 80018b6:	1ad3      	subs	r3, r2, r3
 80018b8:	2b02      	cmp	r3, #2
 80018ba:	d901      	bls.n	80018c0 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 80018bc:	2303      	movs	r3, #3
 80018be:	e1ad      	b.n	8001c1c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80018c0:	4b1d      	ldr	r3, [pc, #116]	; (8001938 <HAL_RCC_OscConfig+0x32c>)
 80018c2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80018c4:	2202      	movs	r2, #2
 80018c6:	4013      	ands	r3, r2
 80018c8:	d0f1      	beq.n	80018ae <HAL_RCC_OscConfig+0x2a2>
 80018ca:	e018      	b.n	80018fe <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 80018cc:	4b1a      	ldr	r3, [pc, #104]	; (8001938 <HAL_RCC_OscConfig+0x32c>)
 80018ce:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80018d0:	4b19      	ldr	r3, [pc, #100]	; (8001938 <HAL_RCC_OscConfig+0x32c>)
 80018d2:	2101      	movs	r1, #1
 80018d4:	438a      	bics	r2, r1
 80018d6:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018d8:	f7ff fbe8 	bl	80010ac <HAL_GetTick>
 80018dc:	0003      	movs	r3, r0
 80018de:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80018e0:	e008      	b.n	80018f4 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80018e2:	f7ff fbe3 	bl	80010ac <HAL_GetTick>
 80018e6:	0002      	movs	r2, r0
 80018e8:	693b      	ldr	r3, [r7, #16]
 80018ea:	1ad3      	subs	r3, r2, r3
 80018ec:	2b02      	cmp	r3, #2
 80018ee:	d901      	bls.n	80018f4 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 80018f0:	2303      	movs	r3, #3
 80018f2:	e193      	b.n	8001c1c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80018f4:	4b10      	ldr	r3, [pc, #64]	; (8001938 <HAL_RCC_OscConfig+0x32c>)
 80018f6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80018f8:	2202      	movs	r2, #2
 80018fa:	4013      	ands	r3, r2
 80018fc:	d1f1      	bne.n	80018e2 <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	2204      	movs	r2, #4
 8001904:	4013      	ands	r3, r2
 8001906:	d100      	bne.n	800190a <HAL_RCC_OscConfig+0x2fe>
 8001908:	e0c6      	b.n	8001a98 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 800190a:	231f      	movs	r3, #31
 800190c:	18fb      	adds	r3, r7, r3
 800190e:	2200      	movs	r2, #0
 8001910:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8001912:	4b09      	ldr	r3, [pc, #36]	; (8001938 <HAL_RCC_OscConfig+0x32c>)
 8001914:	689b      	ldr	r3, [r3, #8]
 8001916:	2238      	movs	r2, #56	; 0x38
 8001918:	4013      	ands	r3, r2
 800191a:	2b20      	cmp	r3, #32
 800191c:	d11e      	bne.n	800195c <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 800191e:	4b06      	ldr	r3, [pc, #24]	; (8001938 <HAL_RCC_OscConfig+0x32c>)
 8001920:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001922:	2202      	movs	r2, #2
 8001924:	4013      	ands	r3, r2
 8001926:	d100      	bne.n	800192a <HAL_RCC_OscConfig+0x31e>
 8001928:	e0b6      	b.n	8001a98 <HAL_RCC_OscConfig+0x48c>
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	689b      	ldr	r3, [r3, #8]
 800192e:	2b00      	cmp	r3, #0
 8001930:	d000      	beq.n	8001934 <HAL_RCC_OscConfig+0x328>
 8001932:	e0b1      	b.n	8001a98 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8001934:	2301      	movs	r3, #1
 8001936:	e171      	b.n	8001c1c <HAL_RCC_OscConfig+0x610>
 8001938:	40021000 	.word	0x40021000
 800193c:	fffeffff 	.word	0xfffeffff
 8001940:	fffbffff 	.word	0xfffbffff
 8001944:	ffff80ff 	.word	0xffff80ff
 8001948:	ffffc7ff 	.word	0xffffc7ff
 800194c:	00f42400 	.word	0x00f42400
 8001950:	20000004 	.word	0x20000004
 8001954:	20000008 	.word	0x20000008
 8001958:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800195c:	4bb1      	ldr	r3, [pc, #708]	; (8001c24 <HAL_RCC_OscConfig+0x618>)
 800195e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001960:	2380      	movs	r3, #128	; 0x80
 8001962:	055b      	lsls	r3, r3, #21
 8001964:	4013      	ands	r3, r2
 8001966:	d101      	bne.n	800196c <HAL_RCC_OscConfig+0x360>
 8001968:	2301      	movs	r3, #1
 800196a:	e000      	b.n	800196e <HAL_RCC_OscConfig+0x362>
 800196c:	2300      	movs	r3, #0
 800196e:	2b00      	cmp	r3, #0
 8001970:	d011      	beq.n	8001996 <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8001972:	4bac      	ldr	r3, [pc, #688]	; (8001c24 <HAL_RCC_OscConfig+0x618>)
 8001974:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001976:	4bab      	ldr	r3, [pc, #684]	; (8001c24 <HAL_RCC_OscConfig+0x618>)
 8001978:	2180      	movs	r1, #128	; 0x80
 800197a:	0549      	lsls	r1, r1, #21
 800197c:	430a      	orrs	r2, r1
 800197e:	63da      	str	r2, [r3, #60]	; 0x3c
 8001980:	4ba8      	ldr	r3, [pc, #672]	; (8001c24 <HAL_RCC_OscConfig+0x618>)
 8001982:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001984:	2380      	movs	r3, #128	; 0x80
 8001986:	055b      	lsls	r3, r3, #21
 8001988:	4013      	ands	r3, r2
 800198a:	60fb      	str	r3, [r7, #12]
 800198c:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 800198e:	231f      	movs	r3, #31
 8001990:	18fb      	adds	r3, r7, r3
 8001992:	2201      	movs	r2, #1
 8001994:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001996:	4ba4      	ldr	r3, [pc, #656]	; (8001c28 <HAL_RCC_OscConfig+0x61c>)
 8001998:	681a      	ldr	r2, [r3, #0]
 800199a:	2380      	movs	r3, #128	; 0x80
 800199c:	005b      	lsls	r3, r3, #1
 800199e:	4013      	ands	r3, r2
 80019a0:	d11a      	bne.n	80019d8 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80019a2:	4ba1      	ldr	r3, [pc, #644]	; (8001c28 <HAL_RCC_OscConfig+0x61c>)
 80019a4:	681a      	ldr	r2, [r3, #0]
 80019a6:	4ba0      	ldr	r3, [pc, #640]	; (8001c28 <HAL_RCC_OscConfig+0x61c>)
 80019a8:	2180      	movs	r1, #128	; 0x80
 80019aa:	0049      	lsls	r1, r1, #1
 80019ac:	430a      	orrs	r2, r1
 80019ae:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 80019b0:	f7ff fb7c 	bl	80010ac <HAL_GetTick>
 80019b4:	0003      	movs	r3, r0
 80019b6:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80019b8:	e008      	b.n	80019cc <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80019ba:	f7ff fb77 	bl	80010ac <HAL_GetTick>
 80019be:	0002      	movs	r2, r0
 80019c0:	693b      	ldr	r3, [r7, #16]
 80019c2:	1ad3      	subs	r3, r2, r3
 80019c4:	2b02      	cmp	r3, #2
 80019c6:	d901      	bls.n	80019cc <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 80019c8:	2303      	movs	r3, #3
 80019ca:	e127      	b.n	8001c1c <HAL_RCC_OscConfig+0x610>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80019cc:	4b96      	ldr	r3, [pc, #600]	; (8001c28 <HAL_RCC_OscConfig+0x61c>)
 80019ce:	681a      	ldr	r2, [r3, #0]
 80019d0:	2380      	movs	r3, #128	; 0x80
 80019d2:	005b      	lsls	r3, r3, #1
 80019d4:	4013      	ands	r3, r2
 80019d6:	d0f0      	beq.n	80019ba <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	689b      	ldr	r3, [r3, #8]
 80019dc:	2b01      	cmp	r3, #1
 80019de:	d106      	bne.n	80019ee <HAL_RCC_OscConfig+0x3e2>
 80019e0:	4b90      	ldr	r3, [pc, #576]	; (8001c24 <HAL_RCC_OscConfig+0x618>)
 80019e2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80019e4:	4b8f      	ldr	r3, [pc, #572]	; (8001c24 <HAL_RCC_OscConfig+0x618>)
 80019e6:	2101      	movs	r1, #1
 80019e8:	430a      	orrs	r2, r1
 80019ea:	65da      	str	r2, [r3, #92]	; 0x5c
 80019ec:	e01c      	b.n	8001a28 <HAL_RCC_OscConfig+0x41c>
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	689b      	ldr	r3, [r3, #8]
 80019f2:	2b05      	cmp	r3, #5
 80019f4:	d10c      	bne.n	8001a10 <HAL_RCC_OscConfig+0x404>
 80019f6:	4b8b      	ldr	r3, [pc, #556]	; (8001c24 <HAL_RCC_OscConfig+0x618>)
 80019f8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80019fa:	4b8a      	ldr	r3, [pc, #552]	; (8001c24 <HAL_RCC_OscConfig+0x618>)
 80019fc:	2104      	movs	r1, #4
 80019fe:	430a      	orrs	r2, r1
 8001a00:	65da      	str	r2, [r3, #92]	; 0x5c
 8001a02:	4b88      	ldr	r3, [pc, #544]	; (8001c24 <HAL_RCC_OscConfig+0x618>)
 8001a04:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001a06:	4b87      	ldr	r3, [pc, #540]	; (8001c24 <HAL_RCC_OscConfig+0x618>)
 8001a08:	2101      	movs	r1, #1
 8001a0a:	430a      	orrs	r2, r1
 8001a0c:	65da      	str	r2, [r3, #92]	; 0x5c
 8001a0e:	e00b      	b.n	8001a28 <HAL_RCC_OscConfig+0x41c>
 8001a10:	4b84      	ldr	r3, [pc, #528]	; (8001c24 <HAL_RCC_OscConfig+0x618>)
 8001a12:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001a14:	4b83      	ldr	r3, [pc, #524]	; (8001c24 <HAL_RCC_OscConfig+0x618>)
 8001a16:	2101      	movs	r1, #1
 8001a18:	438a      	bics	r2, r1
 8001a1a:	65da      	str	r2, [r3, #92]	; 0x5c
 8001a1c:	4b81      	ldr	r3, [pc, #516]	; (8001c24 <HAL_RCC_OscConfig+0x618>)
 8001a1e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001a20:	4b80      	ldr	r3, [pc, #512]	; (8001c24 <HAL_RCC_OscConfig+0x618>)
 8001a22:	2104      	movs	r1, #4
 8001a24:	438a      	bics	r2, r1
 8001a26:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	689b      	ldr	r3, [r3, #8]
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d014      	beq.n	8001a5a <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a30:	f7ff fb3c 	bl	80010ac <HAL_GetTick>
 8001a34:	0003      	movs	r3, r0
 8001a36:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001a38:	e009      	b.n	8001a4e <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a3a:	f7ff fb37 	bl	80010ac <HAL_GetTick>
 8001a3e:	0002      	movs	r2, r0
 8001a40:	693b      	ldr	r3, [r7, #16]
 8001a42:	1ad3      	subs	r3, r2, r3
 8001a44:	4a79      	ldr	r2, [pc, #484]	; (8001c2c <HAL_RCC_OscConfig+0x620>)
 8001a46:	4293      	cmp	r3, r2
 8001a48:	d901      	bls.n	8001a4e <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 8001a4a:	2303      	movs	r3, #3
 8001a4c:	e0e6      	b.n	8001c1c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001a4e:	4b75      	ldr	r3, [pc, #468]	; (8001c24 <HAL_RCC_OscConfig+0x618>)
 8001a50:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a52:	2202      	movs	r2, #2
 8001a54:	4013      	ands	r3, r2
 8001a56:	d0f0      	beq.n	8001a3a <HAL_RCC_OscConfig+0x42e>
 8001a58:	e013      	b.n	8001a82 <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a5a:	f7ff fb27 	bl	80010ac <HAL_GetTick>
 8001a5e:	0003      	movs	r3, r0
 8001a60:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001a62:	e009      	b.n	8001a78 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a64:	f7ff fb22 	bl	80010ac <HAL_GetTick>
 8001a68:	0002      	movs	r2, r0
 8001a6a:	693b      	ldr	r3, [r7, #16]
 8001a6c:	1ad3      	subs	r3, r2, r3
 8001a6e:	4a6f      	ldr	r2, [pc, #444]	; (8001c2c <HAL_RCC_OscConfig+0x620>)
 8001a70:	4293      	cmp	r3, r2
 8001a72:	d901      	bls.n	8001a78 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8001a74:	2303      	movs	r3, #3
 8001a76:	e0d1      	b.n	8001c1c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001a78:	4b6a      	ldr	r3, [pc, #424]	; (8001c24 <HAL_RCC_OscConfig+0x618>)
 8001a7a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a7c:	2202      	movs	r2, #2
 8001a7e:	4013      	ands	r3, r2
 8001a80:	d1f0      	bne.n	8001a64 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8001a82:	231f      	movs	r3, #31
 8001a84:	18fb      	adds	r3, r7, r3
 8001a86:	781b      	ldrb	r3, [r3, #0]
 8001a88:	2b01      	cmp	r3, #1
 8001a8a:	d105      	bne.n	8001a98 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8001a8c:	4b65      	ldr	r3, [pc, #404]	; (8001c24 <HAL_RCC_OscConfig+0x618>)
 8001a8e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001a90:	4b64      	ldr	r3, [pc, #400]	; (8001c24 <HAL_RCC_OscConfig+0x618>)
 8001a92:	4967      	ldr	r1, [pc, #412]	; (8001c30 <HAL_RCC_OscConfig+0x624>)
 8001a94:	400a      	ands	r2, r1
 8001a96:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	69db      	ldr	r3, [r3, #28]
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d100      	bne.n	8001aa2 <HAL_RCC_OscConfig+0x496>
 8001aa0:	e0bb      	b.n	8001c1a <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001aa2:	4b60      	ldr	r3, [pc, #384]	; (8001c24 <HAL_RCC_OscConfig+0x618>)
 8001aa4:	689b      	ldr	r3, [r3, #8]
 8001aa6:	2238      	movs	r2, #56	; 0x38
 8001aa8:	4013      	ands	r3, r2
 8001aaa:	2b10      	cmp	r3, #16
 8001aac:	d100      	bne.n	8001ab0 <HAL_RCC_OscConfig+0x4a4>
 8001aae:	e07b      	b.n	8001ba8 <HAL_RCC_OscConfig+0x59c>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	69db      	ldr	r3, [r3, #28]
 8001ab4:	2b02      	cmp	r3, #2
 8001ab6:	d156      	bne.n	8001b66 <HAL_RCC_OscConfig+0x55a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ab8:	4b5a      	ldr	r3, [pc, #360]	; (8001c24 <HAL_RCC_OscConfig+0x618>)
 8001aba:	681a      	ldr	r2, [r3, #0]
 8001abc:	4b59      	ldr	r3, [pc, #356]	; (8001c24 <HAL_RCC_OscConfig+0x618>)
 8001abe:	495d      	ldr	r1, [pc, #372]	; (8001c34 <HAL_RCC_OscConfig+0x628>)
 8001ac0:	400a      	ands	r2, r1
 8001ac2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ac4:	f7ff faf2 	bl	80010ac <HAL_GetTick>
 8001ac8:	0003      	movs	r3, r0
 8001aca:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001acc:	e008      	b.n	8001ae0 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ace:	f7ff faed 	bl	80010ac <HAL_GetTick>
 8001ad2:	0002      	movs	r2, r0
 8001ad4:	693b      	ldr	r3, [r7, #16]
 8001ad6:	1ad3      	subs	r3, r2, r3
 8001ad8:	2b02      	cmp	r3, #2
 8001ada:	d901      	bls.n	8001ae0 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8001adc:	2303      	movs	r3, #3
 8001ade:	e09d      	b.n	8001c1c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001ae0:	4b50      	ldr	r3, [pc, #320]	; (8001c24 <HAL_RCC_OscConfig+0x618>)
 8001ae2:	681a      	ldr	r2, [r3, #0]
 8001ae4:	2380      	movs	r3, #128	; 0x80
 8001ae6:	049b      	lsls	r3, r3, #18
 8001ae8:	4013      	ands	r3, r2
 8001aea:	d1f0      	bne.n	8001ace <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001aec:	4b4d      	ldr	r3, [pc, #308]	; (8001c24 <HAL_RCC_OscConfig+0x618>)
 8001aee:	68db      	ldr	r3, [r3, #12]
 8001af0:	4a51      	ldr	r2, [pc, #324]	; (8001c38 <HAL_RCC_OscConfig+0x62c>)
 8001af2:	4013      	ands	r3, r2
 8001af4:	0019      	movs	r1, r3
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	6a1a      	ldr	r2, [r3, #32]
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001afe:	431a      	orrs	r2, r3
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b04:	021b      	lsls	r3, r3, #8
 8001b06:	431a      	orrs	r2, r3
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b0c:	431a      	orrs	r2, r3
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b12:	431a      	orrs	r2, r3
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b18:	431a      	orrs	r2, r3
 8001b1a:	4b42      	ldr	r3, [pc, #264]	; (8001c24 <HAL_RCC_OscConfig+0x618>)
 8001b1c:	430a      	orrs	r2, r1
 8001b1e:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001b20:	4b40      	ldr	r3, [pc, #256]	; (8001c24 <HAL_RCC_OscConfig+0x618>)
 8001b22:	681a      	ldr	r2, [r3, #0]
 8001b24:	4b3f      	ldr	r3, [pc, #252]	; (8001c24 <HAL_RCC_OscConfig+0x618>)
 8001b26:	2180      	movs	r1, #128	; 0x80
 8001b28:	0449      	lsls	r1, r1, #17
 8001b2a:	430a      	orrs	r2, r1
 8001b2c:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8001b2e:	4b3d      	ldr	r3, [pc, #244]	; (8001c24 <HAL_RCC_OscConfig+0x618>)
 8001b30:	68da      	ldr	r2, [r3, #12]
 8001b32:	4b3c      	ldr	r3, [pc, #240]	; (8001c24 <HAL_RCC_OscConfig+0x618>)
 8001b34:	2180      	movs	r1, #128	; 0x80
 8001b36:	0549      	lsls	r1, r1, #21
 8001b38:	430a      	orrs	r2, r1
 8001b3a:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b3c:	f7ff fab6 	bl	80010ac <HAL_GetTick>
 8001b40:	0003      	movs	r3, r0
 8001b42:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001b44:	e008      	b.n	8001b58 <HAL_RCC_OscConfig+0x54c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b46:	f7ff fab1 	bl	80010ac <HAL_GetTick>
 8001b4a:	0002      	movs	r2, r0
 8001b4c:	693b      	ldr	r3, [r7, #16]
 8001b4e:	1ad3      	subs	r3, r2, r3
 8001b50:	2b02      	cmp	r3, #2
 8001b52:	d901      	bls.n	8001b58 <HAL_RCC_OscConfig+0x54c>
          {
            return HAL_TIMEOUT;
 8001b54:	2303      	movs	r3, #3
 8001b56:	e061      	b.n	8001c1c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001b58:	4b32      	ldr	r3, [pc, #200]	; (8001c24 <HAL_RCC_OscConfig+0x618>)
 8001b5a:	681a      	ldr	r2, [r3, #0]
 8001b5c:	2380      	movs	r3, #128	; 0x80
 8001b5e:	049b      	lsls	r3, r3, #18
 8001b60:	4013      	ands	r3, r2
 8001b62:	d0f0      	beq.n	8001b46 <HAL_RCC_OscConfig+0x53a>
 8001b64:	e059      	b.n	8001c1a <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b66:	4b2f      	ldr	r3, [pc, #188]	; (8001c24 <HAL_RCC_OscConfig+0x618>)
 8001b68:	681a      	ldr	r2, [r3, #0]
 8001b6a:	4b2e      	ldr	r3, [pc, #184]	; (8001c24 <HAL_RCC_OscConfig+0x618>)
 8001b6c:	4931      	ldr	r1, [pc, #196]	; (8001c34 <HAL_RCC_OscConfig+0x628>)
 8001b6e:	400a      	ands	r2, r1
 8001b70:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b72:	f7ff fa9b 	bl	80010ac <HAL_GetTick>
 8001b76:	0003      	movs	r3, r0
 8001b78:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001b7a:	e008      	b.n	8001b8e <HAL_RCC_OscConfig+0x582>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b7c:	f7ff fa96 	bl	80010ac <HAL_GetTick>
 8001b80:	0002      	movs	r2, r0
 8001b82:	693b      	ldr	r3, [r7, #16]
 8001b84:	1ad3      	subs	r3, r2, r3
 8001b86:	2b02      	cmp	r3, #2
 8001b88:	d901      	bls.n	8001b8e <HAL_RCC_OscConfig+0x582>
          {
            return HAL_TIMEOUT;
 8001b8a:	2303      	movs	r3, #3
 8001b8c:	e046      	b.n	8001c1c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001b8e:	4b25      	ldr	r3, [pc, #148]	; (8001c24 <HAL_RCC_OscConfig+0x618>)
 8001b90:	681a      	ldr	r2, [r3, #0]
 8001b92:	2380      	movs	r3, #128	; 0x80
 8001b94:	049b      	lsls	r3, r3, #18
 8001b96:	4013      	ands	r3, r2
 8001b98:	d1f0      	bne.n	8001b7c <HAL_RCC_OscConfig+0x570>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 8001b9a:	4b22      	ldr	r3, [pc, #136]	; (8001c24 <HAL_RCC_OscConfig+0x618>)
 8001b9c:	68da      	ldr	r2, [r3, #12]
 8001b9e:	4b21      	ldr	r3, [pc, #132]	; (8001c24 <HAL_RCC_OscConfig+0x618>)
 8001ba0:	4926      	ldr	r1, [pc, #152]	; (8001c3c <HAL_RCC_OscConfig+0x630>)
 8001ba2:	400a      	ands	r2, r1
 8001ba4:	60da      	str	r2, [r3, #12]
 8001ba6:	e038      	b.n	8001c1a <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	69db      	ldr	r3, [r3, #28]
 8001bac:	2b01      	cmp	r3, #1
 8001bae:	d101      	bne.n	8001bb4 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8001bb0:	2301      	movs	r3, #1
 8001bb2:	e033      	b.n	8001c1c <HAL_RCC_OscConfig+0x610>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8001bb4:	4b1b      	ldr	r3, [pc, #108]	; (8001c24 <HAL_RCC_OscConfig+0x618>)
 8001bb6:	68db      	ldr	r3, [r3, #12]
 8001bb8:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001bba:	697b      	ldr	r3, [r7, #20]
 8001bbc:	2203      	movs	r2, #3
 8001bbe:	401a      	ands	r2, r3
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	6a1b      	ldr	r3, [r3, #32]
 8001bc4:	429a      	cmp	r2, r3
 8001bc6:	d126      	bne.n	8001c16 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001bc8:	697b      	ldr	r3, [r7, #20]
 8001bca:	2270      	movs	r2, #112	; 0x70
 8001bcc:	401a      	ands	r2, r3
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001bd2:	429a      	cmp	r2, r3
 8001bd4:	d11f      	bne.n	8001c16 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001bd6:	697a      	ldr	r2, [r7, #20]
 8001bd8:	23fe      	movs	r3, #254	; 0xfe
 8001bda:	01db      	lsls	r3, r3, #7
 8001bdc:	401a      	ands	r2, r3
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001be2:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001be4:	429a      	cmp	r2, r3
 8001be6:	d116      	bne.n	8001c16 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001be8:	697a      	ldr	r2, [r7, #20]
 8001bea:	23f8      	movs	r3, #248	; 0xf8
 8001bec:	039b      	lsls	r3, r3, #14
 8001bee:	401a      	ands	r2, r3
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001bf4:	429a      	cmp	r2, r3
 8001bf6:	d10e      	bne.n	8001c16 <HAL_RCC_OscConfig+0x60a>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8001bf8:	697a      	ldr	r2, [r7, #20]
 8001bfa:	23e0      	movs	r3, #224	; 0xe0
 8001bfc:	051b      	lsls	r3, r3, #20
 8001bfe:	401a      	ands	r2, r3
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001c04:	429a      	cmp	r2, r3
 8001c06:	d106      	bne.n	8001c16 <HAL_RCC_OscConfig+0x60a>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8001c08:	697b      	ldr	r3, [r7, #20]
 8001c0a:	0f5b      	lsrs	r3, r3, #29
 8001c0c:	075a      	lsls	r2, r3, #29
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8001c12:	429a      	cmp	r2, r3
 8001c14:	d001      	beq.n	8001c1a <HAL_RCC_OscConfig+0x60e>
        {
          return HAL_ERROR;
 8001c16:	2301      	movs	r3, #1
 8001c18:	e000      	b.n	8001c1c <HAL_RCC_OscConfig+0x610>
        }
      }
    }
  }
  return HAL_OK;
 8001c1a:	2300      	movs	r3, #0
}
 8001c1c:	0018      	movs	r0, r3
 8001c1e:	46bd      	mov	sp, r7
 8001c20:	b008      	add	sp, #32
 8001c22:	bd80      	pop	{r7, pc}
 8001c24:	40021000 	.word	0x40021000
 8001c28:	40007000 	.word	0x40007000
 8001c2c:	00001388 	.word	0x00001388
 8001c30:	efffffff 	.word	0xefffffff
 8001c34:	feffffff 	.word	0xfeffffff
 8001c38:	11c1808c 	.word	0x11c1808c
 8001c3c:	eefefffc 	.word	0xeefefffc

08001c40 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001c40:	b580      	push	{r7, lr}
 8001c42:	b084      	sub	sp, #16
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	6078      	str	r0, [r7, #4]
 8001c48:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d101      	bne.n	8001c54 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001c50:	2301      	movs	r3, #1
 8001c52:	e0e9      	b.n	8001e28 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001c54:	4b76      	ldr	r3, [pc, #472]	; (8001e30 <HAL_RCC_ClockConfig+0x1f0>)
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	2207      	movs	r2, #7
 8001c5a:	4013      	ands	r3, r2
 8001c5c:	683a      	ldr	r2, [r7, #0]
 8001c5e:	429a      	cmp	r2, r3
 8001c60:	d91e      	bls.n	8001ca0 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c62:	4b73      	ldr	r3, [pc, #460]	; (8001e30 <HAL_RCC_ClockConfig+0x1f0>)
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	2207      	movs	r2, #7
 8001c68:	4393      	bics	r3, r2
 8001c6a:	0019      	movs	r1, r3
 8001c6c:	4b70      	ldr	r3, [pc, #448]	; (8001e30 <HAL_RCC_ClockConfig+0x1f0>)
 8001c6e:	683a      	ldr	r2, [r7, #0]
 8001c70:	430a      	orrs	r2, r1
 8001c72:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001c74:	f7ff fa1a 	bl	80010ac <HAL_GetTick>
 8001c78:	0003      	movs	r3, r0
 8001c7a:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001c7c:	e009      	b.n	8001c92 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c7e:	f7ff fa15 	bl	80010ac <HAL_GetTick>
 8001c82:	0002      	movs	r2, r0
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	1ad3      	subs	r3, r2, r3
 8001c88:	4a6a      	ldr	r2, [pc, #424]	; (8001e34 <HAL_RCC_ClockConfig+0x1f4>)
 8001c8a:	4293      	cmp	r3, r2
 8001c8c:	d901      	bls.n	8001c92 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8001c8e:	2303      	movs	r3, #3
 8001c90:	e0ca      	b.n	8001e28 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001c92:	4b67      	ldr	r3, [pc, #412]	; (8001e30 <HAL_RCC_ClockConfig+0x1f0>)
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	2207      	movs	r2, #7
 8001c98:	4013      	ands	r3, r2
 8001c9a:	683a      	ldr	r2, [r7, #0]
 8001c9c:	429a      	cmp	r2, r3
 8001c9e:	d1ee      	bne.n	8001c7e <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	2202      	movs	r2, #2
 8001ca6:	4013      	ands	r3, r2
 8001ca8:	d015      	beq.n	8001cd6 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	2204      	movs	r2, #4
 8001cb0:	4013      	ands	r3, r2
 8001cb2:	d006      	beq.n	8001cc2 <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8001cb4:	4b60      	ldr	r3, [pc, #384]	; (8001e38 <HAL_RCC_ClockConfig+0x1f8>)
 8001cb6:	689a      	ldr	r2, [r3, #8]
 8001cb8:	4b5f      	ldr	r3, [pc, #380]	; (8001e38 <HAL_RCC_ClockConfig+0x1f8>)
 8001cba:	21e0      	movs	r1, #224	; 0xe0
 8001cbc:	01c9      	lsls	r1, r1, #7
 8001cbe:	430a      	orrs	r2, r1
 8001cc0:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001cc2:	4b5d      	ldr	r3, [pc, #372]	; (8001e38 <HAL_RCC_ClockConfig+0x1f8>)
 8001cc4:	689b      	ldr	r3, [r3, #8]
 8001cc6:	4a5d      	ldr	r2, [pc, #372]	; (8001e3c <HAL_RCC_ClockConfig+0x1fc>)
 8001cc8:	4013      	ands	r3, r2
 8001cca:	0019      	movs	r1, r3
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	689a      	ldr	r2, [r3, #8]
 8001cd0:	4b59      	ldr	r3, [pc, #356]	; (8001e38 <HAL_RCC_ClockConfig+0x1f8>)
 8001cd2:	430a      	orrs	r2, r1
 8001cd4:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	2201      	movs	r2, #1
 8001cdc:	4013      	ands	r3, r2
 8001cde:	d057      	beq.n	8001d90 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	685b      	ldr	r3, [r3, #4]
 8001ce4:	2b01      	cmp	r3, #1
 8001ce6:	d107      	bne.n	8001cf8 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001ce8:	4b53      	ldr	r3, [pc, #332]	; (8001e38 <HAL_RCC_ClockConfig+0x1f8>)
 8001cea:	681a      	ldr	r2, [r3, #0]
 8001cec:	2380      	movs	r3, #128	; 0x80
 8001cee:	029b      	lsls	r3, r3, #10
 8001cf0:	4013      	ands	r3, r2
 8001cf2:	d12b      	bne.n	8001d4c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001cf4:	2301      	movs	r3, #1
 8001cf6:	e097      	b.n	8001e28 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	685b      	ldr	r3, [r3, #4]
 8001cfc:	2b02      	cmp	r3, #2
 8001cfe:	d107      	bne.n	8001d10 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001d00:	4b4d      	ldr	r3, [pc, #308]	; (8001e38 <HAL_RCC_ClockConfig+0x1f8>)
 8001d02:	681a      	ldr	r2, [r3, #0]
 8001d04:	2380      	movs	r3, #128	; 0x80
 8001d06:	049b      	lsls	r3, r3, #18
 8001d08:	4013      	ands	r3, r2
 8001d0a:	d11f      	bne.n	8001d4c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001d0c:	2301      	movs	r3, #1
 8001d0e:	e08b      	b.n	8001e28 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	685b      	ldr	r3, [r3, #4]
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d107      	bne.n	8001d28 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001d18:	4b47      	ldr	r3, [pc, #284]	; (8001e38 <HAL_RCC_ClockConfig+0x1f8>)
 8001d1a:	681a      	ldr	r2, [r3, #0]
 8001d1c:	2380      	movs	r3, #128	; 0x80
 8001d1e:	00db      	lsls	r3, r3, #3
 8001d20:	4013      	ands	r3, r2
 8001d22:	d113      	bne.n	8001d4c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001d24:	2301      	movs	r3, #1
 8001d26:	e07f      	b.n	8001e28 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	685b      	ldr	r3, [r3, #4]
 8001d2c:	2b03      	cmp	r3, #3
 8001d2e:	d106      	bne.n	8001d3e <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001d30:	4b41      	ldr	r3, [pc, #260]	; (8001e38 <HAL_RCC_ClockConfig+0x1f8>)
 8001d32:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d34:	2202      	movs	r2, #2
 8001d36:	4013      	ands	r3, r2
 8001d38:	d108      	bne.n	8001d4c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001d3a:	2301      	movs	r3, #1
 8001d3c:	e074      	b.n	8001e28 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001d3e:	4b3e      	ldr	r3, [pc, #248]	; (8001e38 <HAL_RCC_ClockConfig+0x1f8>)
 8001d40:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d42:	2202      	movs	r2, #2
 8001d44:	4013      	ands	r3, r2
 8001d46:	d101      	bne.n	8001d4c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001d48:	2301      	movs	r3, #1
 8001d4a:	e06d      	b.n	8001e28 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001d4c:	4b3a      	ldr	r3, [pc, #232]	; (8001e38 <HAL_RCC_ClockConfig+0x1f8>)
 8001d4e:	689b      	ldr	r3, [r3, #8]
 8001d50:	2207      	movs	r2, #7
 8001d52:	4393      	bics	r3, r2
 8001d54:	0019      	movs	r1, r3
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	685a      	ldr	r2, [r3, #4]
 8001d5a:	4b37      	ldr	r3, [pc, #220]	; (8001e38 <HAL_RCC_ClockConfig+0x1f8>)
 8001d5c:	430a      	orrs	r2, r1
 8001d5e:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001d60:	f7ff f9a4 	bl	80010ac <HAL_GetTick>
 8001d64:	0003      	movs	r3, r0
 8001d66:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d68:	e009      	b.n	8001d7e <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d6a:	f7ff f99f 	bl	80010ac <HAL_GetTick>
 8001d6e:	0002      	movs	r2, r0
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	1ad3      	subs	r3, r2, r3
 8001d74:	4a2f      	ldr	r2, [pc, #188]	; (8001e34 <HAL_RCC_ClockConfig+0x1f4>)
 8001d76:	4293      	cmp	r3, r2
 8001d78:	d901      	bls.n	8001d7e <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8001d7a:	2303      	movs	r3, #3
 8001d7c:	e054      	b.n	8001e28 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d7e:	4b2e      	ldr	r3, [pc, #184]	; (8001e38 <HAL_RCC_ClockConfig+0x1f8>)
 8001d80:	689b      	ldr	r3, [r3, #8]
 8001d82:	2238      	movs	r2, #56	; 0x38
 8001d84:	401a      	ands	r2, r3
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	685b      	ldr	r3, [r3, #4]
 8001d8a:	00db      	lsls	r3, r3, #3
 8001d8c:	429a      	cmp	r2, r3
 8001d8e:	d1ec      	bne.n	8001d6a <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001d90:	4b27      	ldr	r3, [pc, #156]	; (8001e30 <HAL_RCC_ClockConfig+0x1f0>)
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	2207      	movs	r2, #7
 8001d96:	4013      	ands	r3, r2
 8001d98:	683a      	ldr	r2, [r7, #0]
 8001d9a:	429a      	cmp	r2, r3
 8001d9c:	d21e      	bcs.n	8001ddc <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d9e:	4b24      	ldr	r3, [pc, #144]	; (8001e30 <HAL_RCC_ClockConfig+0x1f0>)
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	2207      	movs	r2, #7
 8001da4:	4393      	bics	r3, r2
 8001da6:	0019      	movs	r1, r3
 8001da8:	4b21      	ldr	r3, [pc, #132]	; (8001e30 <HAL_RCC_ClockConfig+0x1f0>)
 8001daa:	683a      	ldr	r2, [r7, #0]
 8001dac:	430a      	orrs	r2, r1
 8001dae:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001db0:	f7ff f97c 	bl	80010ac <HAL_GetTick>
 8001db4:	0003      	movs	r3, r0
 8001db6:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001db8:	e009      	b.n	8001dce <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001dba:	f7ff f977 	bl	80010ac <HAL_GetTick>
 8001dbe:	0002      	movs	r2, r0
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	1ad3      	subs	r3, r2, r3
 8001dc4:	4a1b      	ldr	r2, [pc, #108]	; (8001e34 <HAL_RCC_ClockConfig+0x1f4>)
 8001dc6:	4293      	cmp	r3, r2
 8001dc8:	d901      	bls.n	8001dce <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8001dca:	2303      	movs	r3, #3
 8001dcc:	e02c      	b.n	8001e28 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001dce:	4b18      	ldr	r3, [pc, #96]	; (8001e30 <HAL_RCC_ClockConfig+0x1f0>)
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	2207      	movs	r2, #7
 8001dd4:	4013      	ands	r3, r2
 8001dd6:	683a      	ldr	r2, [r7, #0]
 8001dd8:	429a      	cmp	r2, r3
 8001dda:	d1ee      	bne.n	8001dba <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	2204      	movs	r2, #4
 8001de2:	4013      	ands	r3, r2
 8001de4:	d009      	beq.n	8001dfa <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001de6:	4b14      	ldr	r3, [pc, #80]	; (8001e38 <HAL_RCC_ClockConfig+0x1f8>)
 8001de8:	689b      	ldr	r3, [r3, #8]
 8001dea:	4a15      	ldr	r2, [pc, #84]	; (8001e40 <HAL_RCC_ClockConfig+0x200>)
 8001dec:	4013      	ands	r3, r2
 8001dee:	0019      	movs	r1, r3
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	68da      	ldr	r2, [r3, #12]
 8001df4:	4b10      	ldr	r3, [pc, #64]	; (8001e38 <HAL_RCC_ClockConfig+0x1f8>)
 8001df6:	430a      	orrs	r2, r1
 8001df8:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8001dfa:	f000 f829 	bl	8001e50 <HAL_RCC_GetSysClockFreq>
 8001dfe:	0001      	movs	r1, r0
 8001e00:	4b0d      	ldr	r3, [pc, #52]	; (8001e38 <HAL_RCC_ClockConfig+0x1f8>)
 8001e02:	689b      	ldr	r3, [r3, #8]
 8001e04:	0a1b      	lsrs	r3, r3, #8
 8001e06:	220f      	movs	r2, #15
 8001e08:	401a      	ands	r2, r3
 8001e0a:	4b0e      	ldr	r3, [pc, #56]	; (8001e44 <HAL_RCC_ClockConfig+0x204>)
 8001e0c:	0092      	lsls	r2, r2, #2
 8001e0e:	58d3      	ldr	r3, [r2, r3]
 8001e10:	221f      	movs	r2, #31
 8001e12:	4013      	ands	r3, r2
 8001e14:	000a      	movs	r2, r1
 8001e16:	40da      	lsrs	r2, r3
 8001e18:	4b0b      	ldr	r3, [pc, #44]	; (8001e48 <HAL_RCC_ClockConfig+0x208>)
 8001e1a:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8001e1c:	4b0b      	ldr	r3, [pc, #44]	; (8001e4c <HAL_RCC_ClockConfig+0x20c>)
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	0018      	movs	r0, r3
 8001e22:	f7ff f8e7 	bl	8000ff4 <HAL_InitTick>
 8001e26:	0003      	movs	r3, r0
}
 8001e28:	0018      	movs	r0, r3
 8001e2a:	46bd      	mov	sp, r7
 8001e2c:	b004      	add	sp, #16
 8001e2e:	bd80      	pop	{r7, pc}
 8001e30:	40022000 	.word	0x40022000
 8001e34:	00001388 	.word	0x00001388
 8001e38:	40021000 	.word	0x40021000
 8001e3c:	fffff0ff 	.word	0xfffff0ff
 8001e40:	ffff8fff 	.word	0xffff8fff
 8001e44:	08003df8 	.word	0x08003df8
 8001e48:	20000004 	.word	0x20000004
 8001e4c:	20000008 	.word	0x20000008

08001e50 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001e50:	b580      	push	{r7, lr}
 8001e52:	b086      	sub	sp, #24
 8001e54:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001e56:	4b3c      	ldr	r3, [pc, #240]	; (8001f48 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001e58:	689b      	ldr	r3, [r3, #8]
 8001e5a:	2238      	movs	r2, #56	; 0x38
 8001e5c:	4013      	ands	r3, r2
 8001e5e:	d10f      	bne.n	8001e80 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8001e60:	4b39      	ldr	r3, [pc, #228]	; (8001f48 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	0adb      	lsrs	r3, r3, #11
 8001e66:	2207      	movs	r2, #7
 8001e68:	4013      	ands	r3, r2
 8001e6a:	2201      	movs	r2, #1
 8001e6c:	409a      	lsls	r2, r3
 8001e6e:	0013      	movs	r3, r2
 8001e70:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8001e72:	6839      	ldr	r1, [r7, #0]
 8001e74:	4835      	ldr	r0, [pc, #212]	; (8001f4c <HAL_RCC_GetSysClockFreq+0xfc>)
 8001e76:	f7fe f945 	bl	8000104 <__udivsi3>
 8001e7a:	0003      	movs	r3, r0
 8001e7c:	613b      	str	r3, [r7, #16]
 8001e7e:	e05d      	b.n	8001f3c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001e80:	4b31      	ldr	r3, [pc, #196]	; (8001f48 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001e82:	689b      	ldr	r3, [r3, #8]
 8001e84:	2238      	movs	r2, #56	; 0x38
 8001e86:	4013      	ands	r3, r2
 8001e88:	2b08      	cmp	r3, #8
 8001e8a:	d102      	bne.n	8001e92 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001e8c:	4b30      	ldr	r3, [pc, #192]	; (8001f50 <HAL_RCC_GetSysClockFreq+0x100>)
 8001e8e:	613b      	str	r3, [r7, #16]
 8001e90:	e054      	b.n	8001f3c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001e92:	4b2d      	ldr	r3, [pc, #180]	; (8001f48 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001e94:	689b      	ldr	r3, [r3, #8]
 8001e96:	2238      	movs	r2, #56	; 0x38
 8001e98:	4013      	ands	r3, r2
 8001e9a:	2b10      	cmp	r3, #16
 8001e9c:	d138      	bne.n	8001f10 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8001e9e:	4b2a      	ldr	r3, [pc, #168]	; (8001f48 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001ea0:	68db      	ldr	r3, [r3, #12]
 8001ea2:	2203      	movs	r2, #3
 8001ea4:	4013      	ands	r3, r2
 8001ea6:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001ea8:	4b27      	ldr	r3, [pc, #156]	; (8001f48 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001eaa:	68db      	ldr	r3, [r3, #12]
 8001eac:	091b      	lsrs	r3, r3, #4
 8001eae:	2207      	movs	r2, #7
 8001eb0:	4013      	ands	r3, r2
 8001eb2:	3301      	adds	r3, #1
 8001eb4:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	2b03      	cmp	r3, #3
 8001eba:	d10d      	bne.n	8001ed8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001ebc:	68b9      	ldr	r1, [r7, #8]
 8001ebe:	4824      	ldr	r0, [pc, #144]	; (8001f50 <HAL_RCC_GetSysClockFreq+0x100>)
 8001ec0:	f7fe f920 	bl	8000104 <__udivsi3>
 8001ec4:	0003      	movs	r3, r0
 8001ec6:	0019      	movs	r1, r3
 8001ec8:	4b1f      	ldr	r3, [pc, #124]	; (8001f48 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001eca:	68db      	ldr	r3, [r3, #12]
 8001ecc:	0a1b      	lsrs	r3, r3, #8
 8001ece:	227f      	movs	r2, #127	; 0x7f
 8001ed0:	4013      	ands	r3, r2
 8001ed2:	434b      	muls	r3, r1
 8001ed4:	617b      	str	r3, [r7, #20]
        break;
 8001ed6:	e00d      	b.n	8001ef4 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8001ed8:	68b9      	ldr	r1, [r7, #8]
 8001eda:	481c      	ldr	r0, [pc, #112]	; (8001f4c <HAL_RCC_GetSysClockFreq+0xfc>)
 8001edc:	f7fe f912 	bl	8000104 <__udivsi3>
 8001ee0:	0003      	movs	r3, r0
 8001ee2:	0019      	movs	r1, r3
 8001ee4:	4b18      	ldr	r3, [pc, #96]	; (8001f48 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001ee6:	68db      	ldr	r3, [r3, #12]
 8001ee8:	0a1b      	lsrs	r3, r3, #8
 8001eea:	227f      	movs	r2, #127	; 0x7f
 8001eec:	4013      	ands	r3, r2
 8001eee:	434b      	muls	r3, r1
 8001ef0:	617b      	str	r3, [r7, #20]
        break;
 8001ef2:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8001ef4:	4b14      	ldr	r3, [pc, #80]	; (8001f48 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001ef6:	68db      	ldr	r3, [r3, #12]
 8001ef8:	0f5b      	lsrs	r3, r3, #29
 8001efa:	2207      	movs	r2, #7
 8001efc:	4013      	ands	r3, r2
 8001efe:	3301      	adds	r3, #1
 8001f00:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8001f02:	6879      	ldr	r1, [r7, #4]
 8001f04:	6978      	ldr	r0, [r7, #20]
 8001f06:	f7fe f8fd 	bl	8000104 <__udivsi3>
 8001f0a:	0003      	movs	r3, r0
 8001f0c:	613b      	str	r3, [r7, #16]
 8001f0e:	e015      	b.n	8001f3c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8001f10:	4b0d      	ldr	r3, [pc, #52]	; (8001f48 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001f12:	689b      	ldr	r3, [r3, #8]
 8001f14:	2238      	movs	r2, #56	; 0x38
 8001f16:	4013      	ands	r3, r2
 8001f18:	2b20      	cmp	r3, #32
 8001f1a:	d103      	bne.n	8001f24 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8001f1c:	2380      	movs	r3, #128	; 0x80
 8001f1e:	021b      	lsls	r3, r3, #8
 8001f20:	613b      	str	r3, [r7, #16]
 8001f22:	e00b      	b.n	8001f3c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8001f24:	4b08      	ldr	r3, [pc, #32]	; (8001f48 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001f26:	689b      	ldr	r3, [r3, #8]
 8001f28:	2238      	movs	r2, #56	; 0x38
 8001f2a:	4013      	ands	r3, r2
 8001f2c:	2b18      	cmp	r3, #24
 8001f2e:	d103      	bne.n	8001f38 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8001f30:	23fa      	movs	r3, #250	; 0xfa
 8001f32:	01db      	lsls	r3, r3, #7
 8001f34:	613b      	str	r3, [r7, #16]
 8001f36:	e001      	b.n	8001f3c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8001f38:	2300      	movs	r3, #0
 8001f3a:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8001f3c:	693b      	ldr	r3, [r7, #16]
}
 8001f3e:	0018      	movs	r0, r3
 8001f40:	46bd      	mov	sp, r7
 8001f42:	b006      	add	sp, #24
 8001f44:	bd80      	pop	{r7, pc}
 8001f46:	46c0      	nop			; (mov r8, r8)
 8001f48:	40021000 	.word	0x40021000
 8001f4c:	00f42400 	.word	0x00f42400
 8001f50:	007a1200 	.word	0x007a1200

08001f54 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001f54:	b580      	push	{r7, lr}
 8001f56:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001f58:	4b02      	ldr	r3, [pc, #8]	; (8001f64 <HAL_RCC_GetHCLKFreq+0x10>)
 8001f5a:	681b      	ldr	r3, [r3, #0]
}
 8001f5c:	0018      	movs	r0, r3
 8001f5e:	46bd      	mov	sp, r7
 8001f60:	bd80      	pop	{r7, pc}
 8001f62:	46c0      	nop			; (mov r8, r8)
 8001f64:	20000004 	.word	0x20000004

08001f68 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001f68:	b5b0      	push	{r4, r5, r7, lr}
 8001f6a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8001f6c:	f7ff fff2 	bl	8001f54 <HAL_RCC_GetHCLKFreq>
 8001f70:	0004      	movs	r4, r0
 8001f72:	f7ff fb3f 	bl	80015f4 <LL_RCC_GetAPB1Prescaler>
 8001f76:	0003      	movs	r3, r0
 8001f78:	0b1a      	lsrs	r2, r3, #12
 8001f7a:	4b05      	ldr	r3, [pc, #20]	; (8001f90 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001f7c:	0092      	lsls	r2, r2, #2
 8001f7e:	58d3      	ldr	r3, [r2, r3]
 8001f80:	221f      	movs	r2, #31
 8001f82:	4013      	ands	r3, r2
 8001f84:	40dc      	lsrs	r4, r3
 8001f86:	0023      	movs	r3, r4
}
 8001f88:	0018      	movs	r0, r3
 8001f8a:	46bd      	mov	sp, r7
 8001f8c:	bdb0      	pop	{r4, r5, r7, pc}
 8001f8e:	46c0      	nop			; (mov r8, r8)
 8001f90:	08003e38 	.word	0x08003e38

08001f94 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001f94:	b580      	push	{r7, lr}
 8001f96:	b086      	sub	sp, #24
 8001f98:	af00      	add	r7, sp, #0
 8001f9a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8001f9c:	2313      	movs	r3, #19
 8001f9e:	18fb      	adds	r3, r7, r3
 8001fa0:	2200      	movs	r2, #0
 8001fa2:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001fa4:	2312      	movs	r3, #18
 8001fa6:	18fb      	adds	r3, r7, r3
 8001fa8:	2200      	movs	r2, #0
 8001faa:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681a      	ldr	r2, [r3, #0]
 8001fb0:	2380      	movs	r3, #128	; 0x80
 8001fb2:	029b      	lsls	r3, r3, #10
 8001fb4:	4013      	ands	r3, r2
 8001fb6:	d100      	bne.n	8001fba <HAL_RCCEx_PeriphCLKConfig+0x26>
 8001fb8:	e0a3      	b.n	8002102 <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001fba:	2011      	movs	r0, #17
 8001fbc:	183b      	adds	r3, r7, r0
 8001fbe:	2200      	movs	r2, #0
 8001fc0:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001fc2:	4bc3      	ldr	r3, [pc, #780]	; (80022d0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001fc4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001fc6:	2380      	movs	r3, #128	; 0x80
 8001fc8:	055b      	lsls	r3, r3, #21
 8001fca:	4013      	ands	r3, r2
 8001fcc:	d110      	bne.n	8001ff0 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001fce:	4bc0      	ldr	r3, [pc, #768]	; (80022d0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001fd0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001fd2:	4bbf      	ldr	r3, [pc, #764]	; (80022d0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001fd4:	2180      	movs	r1, #128	; 0x80
 8001fd6:	0549      	lsls	r1, r1, #21
 8001fd8:	430a      	orrs	r2, r1
 8001fda:	63da      	str	r2, [r3, #60]	; 0x3c
 8001fdc:	4bbc      	ldr	r3, [pc, #752]	; (80022d0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001fde:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001fe0:	2380      	movs	r3, #128	; 0x80
 8001fe2:	055b      	lsls	r3, r3, #21
 8001fe4:	4013      	ands	r3, r2
 8001fe6:	60bb      	str	r3, [r7, #8]
 8001fe8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001fea:	183b      	adds	r3, r7, r0
 8001fec:	2201      	movs	r2, #1
 8001fee:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001ff0:	4bb8      	ldr	r3, [pc, #736]	; (80022d4 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8001ff2:	681a      	ldr	r2, [r3, #0]
 8001ff4:	4bb7      	ldr	r3, [pc, #732]	; (80022d4 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8001ff6:	2180      	movs	r1, #128	; 0x80
 8001ff8:	0049      	lsls	r1, r1, #1
 8001ffa:	430a      	orrs	r2, r1
 8001ffc:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001ffe:	f7ff f855 	bl	80010ac <HAL_GetTick>
 8002002:	0003      	movs	r3, r0
 8002004:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002006:	e00b      	b.n	8002020 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002008:	f7ff f850 	bl	80010ac <HAL_GetTick>
 800200c:	0002      	movs	r2, r0
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	1ad3      	subs	r3, r2, r3
 8002012:	2b02      	cmp	r3, #2
 8002014:	d904      	bls.n	8002020 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 8002016:	2313      	movs	r3, #19
 8002018:	18fb      	adds	r3, r7, r3
 800201a:	2203      	movs	r2, #3
 800201c:	701a      	strb	r2, [r3, #0]
        break;
 800201e:	e005      	b.n	800202c <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002020:	4bac      	ldr	r3, [pc, #688]	; (80022d4 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8002022:	681a      	ldr	r2, [r3, #0]
 8002024:	2380      	movs	r3, #128	; 0x80
 8002026:	005b      	lsls	r3, r3, #1
 8002028:	4013      	ands	r3, r2
 800202a:	d0ed      	beq.n	8002008 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 800202c:	2313      	movs	r3, #19
 800202e:	18fb      	adds	r3, r7, r3
 8002030:	781b      	ldrb	r3, [r3, #0]
 8002032:	2b00      	cmp	r3, #0
 8002034:	d154      	bne.n	80020e0 <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002036:	4ba6      	ldr	r3, [pc, #664]	; (80022d0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002038:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800203a:	23c0      	movs	r3, #192	; 0xc0
 800203c:	009b      	lsls	r3, r3, #2
 800203e:	4013      	ands	r3, r2
 8002040:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002042:	697b      	ldr	r3, [r7, #20]
 8002044:	2b00      	cmp	r3, #0
 8002046:	d019      	beq.n	800207c <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800204c:	697a      	ldr	r2, [r7, #20]
 800204e:	429a      	cmp	r2, r3
 8002050:	d014      	beq.n	800207c <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002052:	4b9f      	ldr	r3, [pc, #636]	; (80022d0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002054:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002056:	4aa0      	ldr	r2, [pc, #640]	; (80022d8 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8002058:	4013      	ands	r3, r2
 800205a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800205c:	4b9c      	ldr	r3, [pc, #624]	; (80022d0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800205e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002060:	4b9b      	ldr	r3, [pc, #620]	; (80022d0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002062:	2180      	movs	r1, #128	; 0x80
 8002064:	0249      	lsls	r1, r1, #9
 8002066:	430a      	orrs	r2, r1
 8002068:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 800206a:	4b99      	ldr	r3, [pc, #612]	; (80022d0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800206c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800206e:	4b98      	ldr	r3, [pc, #608]	; (80022d0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002070:	499a      	ldr	r1, [pc, #616]	; (80022dc <HAL_RCCEx_PeriphCLKConfig+0x348>)
 8002072:	400a      	ands	r2, r1
 8002074:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002076:	4b96      	ldr	r3, [pc, #600]	; (80022d0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002078:	697a      	ldr	r2, [r7, #20]
 800207a:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800207c:	697b      	ldr	r3, [r7, #20]
 800207e:	2201      	movs	r2, #1
 8002080:	4013      	ands	r3, r2
 8002082:	d016      	beq.n	80020b2 <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002084:	f7ff f812 	bl	80010ac <HAL_GetTick>
 8002088:	0003      	movs	r3, r0
 800208a:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800208c:	e00c      	b.n	80020a8 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800208e:	f7ff f80d 	bl	80010ac <HAL_GetTick>
 8002092:	0002      	movs	r2, r0
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	1ad3      	subs	r3, r2, r3
 8002098:	4a91      	ldr	r2, [pc, #580]	; (80022e0 <HAL_RCCEx_PeriphCLKConfig+0x34c>)
 800209a:	4293      	cmp	r3, r2
 800209c:	d904      	bls.n	80020a8 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 800209e:	2313      	movs	r3, #19
 80020a0:	18fb      	adds	r3, r7, r3
 80020a2:	2203      	movs	r2, #3
 80020a4:	701a      	strb	r2, [r3, #0]
            break;
 80020a6:	e004      	b.n	80020b2 <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80020a8:	4b89      	ldr	r3, [pc, #548]	; (80022d0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80020aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020ac:	2202      	movs	r2, #2
 80020ae:	4013      	ands	r3, r2
 80020b0:	d0ed      	beq.n	800208e <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 80020b2:	2313      	movs	r3, #19
 80020b4:	18fb      	adds	r3, r7, r3
 80020b6:	781b      	ldrb	r3, [r3, #0]
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d10a      	bne.n	80020d2 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80020bc:	4b84      	ldr	r3, [pc, #528]	; (80022d0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80020be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020c0:	4a85      	ldr	r2, [pc, #532]	; (80022d8 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 80020c2:	4013      	ands	r3, r2
 80020c4:	0019      	movs	r1, r3
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80020ca:	4b81      	ldr	r3, [pc, #516]	; (80022d0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80020cc:	430a      	orrs	r2, r1
 80020ce:	65da      	str	r2, [r3, #92]	; 0x5c
 80020d0:	e00c      	b.n	80020ec <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80020d2:	2312      	movs	r3, #18
 80020d4:	18fb      	adds	r3, r7, r3
 80020d6:	2213      	movs	r2, #19
 80020d8:	18ba      	adds	r2, r7, r2
 80020da:	7812      	ldrb	r2, [r2, #0]
 80020dc:	701a      	strb	r2, [r3, #0]
 80020de:	e005      	b.n	80020ec <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80020e0:	2312      	movs	r3, #18
 80020e2:	18fb      	adds	r3, r7, r3
 80020e4:	2213      	movs	r2, #19
 80020e6:	18ba      	adds	r2, r7, r2
 80020e8:	7812      	ldrb	r2, [r2, #0]
 80020ea:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80020ec:	2311      	movs	r3, #17
 80020ee:	18fb      	adds	r3, r7, r3
 80020f0:	781b      	ldrb	r3, [r3, #0]
 80020f2:	2b01      	cmp	r3, #1
 80020f4:	d105      	bne.n	8002102 <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80020f6:	4b76      	ldr	r3, [pc, #472]	; (80022d0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80020f8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80020fa:	4b75      	ldr	r3, [pc, #468]	; (80022d0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80020fc:	4979      	ldr	r1, [pc, #484]	; (80022e4 <HAL_RCCEx_PeriphCLKConfig+0x350>)
 80020fe:	400a      	ands	r2, r1
 8002100:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	2201      	movs	r2, #1
 8002108:	4013      	ands	r3, r2
 800210a:	d009      	beq.n	8002120 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800210c:	4b70      	ldr	r3, [pc, #448]	; (80022d0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800210e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002110:	2203      	movs	r2, #3
 8002112:	4393      	bics	r3, r2
 8002114:	0019      	movs	r1, r3
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	685a      	ldr	r2, [r3, #4]
 800211a:	4b6d      	ldr	r3, [pc, #436]	; (80022d0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800211c:	430a      	orrs	r2, r1
 800211e:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	2202      	movs	r2, #2
 8002126:	4013      	ands	r3, r2
 8002128:	d009      	beq.n	800213e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800212a:	4b69      	ldr	r3, [pc, #420]	; (80022d0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800212c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800212e:	220c      	movs	r2, #12
 8002130:	4393      	bics	r3, r2
 8002132:	0019      	movs	r1, r3
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	689a      	ldr	r2, [r3, #8]
 8002138:	4b65      	ldr	r3, [pc, #404]	; (80022d0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800213a:	430a      	orrs	r2, r1
 800213c:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	2210      	movs	r2, #16
 8002144:	4013      	ands	r3, r2
 8002146:	d009      	beq.n	800215c <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002148:	4b61      	ldr	r3, [pc, #388]	; (80022d0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800214a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800214c:	4a66      	ldr	r2, [pc, #408]	; (80022e8 <HAL_RCCEx_PeriphCLKConfig+0x354>)
 800214e:	4013      	ands	r3, r2
 8002150:	0019      	movs	r1, r3
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	68da      	ldr	r2, [r3, #12]
 8002156:	4b5e      	ldr	r3, [pc, #376]	; (80022d0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002158:	430a      	orrs	r2, r1
 800215a:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681a      	ldr	r2, [r3, #0]
 8002160:	2380      	movs	r3, #128	; 0x80
 8002162:	009b      	lsls	r3, r3, #2
 8002164:	4013      	ands	r3, r2
 8002166:	d009      	beq.n	800217c <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002168:	4b59      	ldr	r3, [pc, #356]	; (80022d0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800216a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800216c:	4a5f      	ldr	r2, [pc, #380]	; (80022ec <HAL_RCCEx_PeriphCLKConfig+0x358>)
 800216e:	4013      	ands	r3, r2
 8002170:	0019      	movs	r1, r3
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	699a      	ldr	r2, [r3, #24]
 8002176:	4b56      	ldr	r3, [pc, #344]	; (80022d0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002178:	430a      	orrs	r2, r1
 800217a:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681a      	ldr	r2, [r3, #0]
 8002180:	2380      	movs	r3, #128	; 0x80
 8002182:	00db      	lsls	r3, r3, #3
 8002184:	4013      	ands	r3, r2
 8002186:	d009      	beq.n	800219c <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002188:	4b51      	ldr	r3, [pc, #324]	; (80022d0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800218a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800218c:	4a58      	ldr	r2, [pc, #352]	; (80022f0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800218e:	4013      	ands	r3, r2
 8002190:	0019      	movs	r1, r3
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	69da      	ldr	r2, [r3, #28]
 8002196:	4b4e      	ldr	r3, [pc, #312]	; (80022d0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002198:	430a      	orrs	r2, r1
 800219a:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	2220      	movs	r2, #32
 80021a2:	4013      	ands	r3, r2
 80021a4:	d009      	beq.n	80021ba <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80021a6:	4b4a      	ldr	r3, [pc, #296]	; (80022d0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80021a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021aa:	4a52      	ldr	r2, [pc, #328]	; (80022f4 <HAL_RCCEx_PeriphCLKConfig+0x360>)
 80021ac:	4013      	ands	r3, r2
 80021ae:	0019      	movs	r1, r3
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	691a      	ldr	r2, [r3, #16]
 80021b4:	4b46      	ldr	r3, [pc, #280]	; (80022d0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80021b6:	430a      	orrs	r2, r1
 80021b8:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681a      	ldr	r2, [r3, #0]
 80021be:	2380      	movs	r3, #128	; 0x80
 80021c0:	01db      	lsls	r3, r3, #7
 80021c2:	4013      	ands	r3, r2
 80021c4:	d015      	beq.n	80021f2 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80021c6:	4b42      	ldr	r3, [pc, #264]	; (80022d0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80021c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021ca:	009b      	lsls	r3, r3, #2
 80021cc:	0899      	lsrs	r1, r3, #2
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	6a1a      	ldr	r2, [r3, #32]
 80021d2:	4b3f      	ldr	r3, [pc, #252]	; (80022d0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80021d4:	430a      	orrs	r2, r1
 80021d6:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	6a1a      	ldr	r2, [r3, #32]
 80021dc:	2380      	movs	r3, #128	; 0x80
 80021de:	05db      	lsls	r3, r3, #23
 80021e0:	429a      	cmp	r2, r3
 80021e2:	d106      	bne.n	80021f2 <HAL_RCCEx_PeriphCLKConfig+0x25e>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 80021e4:	4b3a      	ldr	r3, [pc, #232]	; (80022d0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80021e6:	68da      	ldr	r2, [r3, #12]
 80021e8:	4b39      	ldr	r3, [pc, #228]	; (80022d0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80021ea:	2180      	movs	r1, #128	; 0x80
 80021ec:	0249      	lsls	r1, r1, #9
 80021ee:	430a      	orrs	r2, r1
 80021f0:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681a      	ldr	r2, [r3, #0]
 80021f6:	2380      	movs	r3, #128	; 0x80
 80021f8:	031b      	lsls	r3, r3, #12
 80021fa:	4013      	ands	r3, r2
 80021fc:	d009      	beq.n	8002212 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80021fe:	4b34      	ldr	r3, [pc, #208]	; (80022d0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002200:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002202:	2240      	movs	r2, #64	; 0x40
 8002204:	4393      	bics	r3, r2
 8002206:	0019      	movs	r1, r3
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800220c:	4b30      	ldr	r3, [pc, #192]	; (80022d0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800220e:	430a      	orrs	r2, r1
 8002210:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681a      	ldr	r2, [r3, #0]
 8002216:	2380      	movs	r3, #128	; 0x80
 8002218:	039b      	lsls	r3, r3, #14
 800221a:	4013      	ands	r3, r2
 800221c:	d016      	beq.n	800224c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 800221e:	4b2c      	ldr	r3, [pc, #176]	; (80022d0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002220:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002222:	4a35      	ldr	r2, [pc, #212]	; (80022f8 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8002224:	4013      	ands	r3, r2
 8002226:	0019      	movs	r1, r3
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800222c:	4b28      	ldr	r3, [pc, #160]	; (80022d0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800222e:	430a      	orrs	r2, r1
 8002230:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002236:	2380      	movs	r3, #128	; 0x80
 8002238:	03db      	lsls	r3, r3, #15
 800223a:	429a      	cmp	r2, r3
 800223c:	d106      	bne.n	800224c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 800223e:	4b24      	ldr	r3, [pc, #144]	; (80022d0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002240:	68da      	ldr	r2, [r3, #12]
 8002242:	4b23      	ldr	r3, [pc, #140]	; (80022d0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002244:	2180      	movs	r1, #128	; 0x80
 8002246:	0449      	lsls	r1, r1, #17
 8002248:	430a      	orrs	r2, r1
 800224a:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR_TIM1SEL */

#if defined(RCC_CCIPR_TIM15SEL)
  /*-------------------------- TIM15 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681a      	ldr	r2, [r3, #0]
 8002250:	2380      	movs	r3, #128	; 0x80
 8002252:	03db      	lsls	r3, r3, #15
 8002254:	4013      	ands	r3, r2
 8002256:	d016      	beq.n	8002286 <HAL_RCCEx_PeriphCLKConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));

    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8002258:	4b1d      	ldr	r3, [pc, #116]	; (80022d0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800225a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800225c:	4a27      	ldr	r2, [pc, #156]	; (80022fc <HAL_RCCEx_PeriphCLKConfig+0x368>)
 800225e:	4013      	ands	r3, r2
 8002260:	0019      	movs	r1, r3
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002266:	4b1a      	ldr	r3, [pc, #104]	; (80022d0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002268:	430a      	orrs	r2, r1
 800226a:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLL)
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002270:	2380      	movs	r3, #128	; 0x80
 8002272:	045b      	lsls	r3, r3, #17
 8002274:	429a      	cmp	r2, r3
 8002276:	d106      	bne.n	8002286 <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8002278:	4b15      	ldr	r3, [pc, #84]	; (80022d0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800227a:	68da      	ldr	r2, [r3, #12]
 800227c:	4b14      	ldr	r3, [pc, #80]	; (80022d0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800227e:	2180      	movs	r1, #128	; 0x80
 8002280:	0449      	lsls	r1, r1, #17
 8002282:	430a      	orrs	r2, r1
 8002284:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681a      	ldr	r2, [r3, #0]
 800228a:	2380      	movs	r3, #128	; 0x80
 800228c:	011b      	lsls	r3, r3, #4
 800228e:	4013      	ands	r3, r2
 8002290:	d016      	beq.n	80022c0 <HAL_RCCEx_PeriphCLKConfig+0x32c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8002292:	4b0f      	ldr	r3, [pc, #60]	; (80022d0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002294:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002296:	4a1a      	ldr	r2, [pc, #104]	; (8002300 <HAL_RCCEx_PeriphCLKConfig+0x36c>)
 8002298:	4013      	ands	r3, r2
 800229a:	0019      	movs	r1, r3
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	695a      	ldr	r2, [r3, #20]
 80022a0:	4b0b      	ldr	r3, [pc, #44]	; (80022d0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80022a2:	430a      	orrs	r2, r1
 80022a4:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	695a      	ldr	r2, [r3, #20]
 80022aa:	2380      	movs	r3, #128	; 0x80
 80022ac:	01db      	lsls	r3, r3, #7
 80022ae:	429a      	cmp	r2, r3
 80022b0:	d106      	bne.n	80022c0 <HAL_RCCEx_PeriphCLKConfig+0x32c>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 80022b2:	4b07      	ldr	r3, [pc, #28]	; (80022d0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80022b4:	68da      	ldr	r2, [r3, #12]
 80022b6:	4b06      	ldr	r3, [pc, #24]	; (80022d0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80022b8:	2180      	movs	r1, #128	; 0x80
 80022ba:	0249      	lsls	r1, r1, #9
 80022bc:	430a      	orrs	r2, r1
 80022be:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 80022c0:	2312      	movs	r3, #18
 80022c2:	18fb      	adds	r3, r7, r3
 80022c4:	781b      	ldrb	r3, [r3, #0]
}
 80022c6:	0018      	movs	r0, r3
 80022c8:	46bd      	mov	sp, r7
 80022ca:	b006      	add	sp, #24
 80022cc:	bd80      	pop	{r7, pc}
 80022ce:	46c0      	nop			; (mov r8, r8)
 80022d0:	40021000 	.word	0x40021000
 80022d4:	40007000 	.word	0x40007000
 80022d8:	fffffcff 	.word	0xfffffcff
 80022dc:	fffeffff 	.word	0xfffeffff
 80022e0:	00001388 	.word	0x00001388
 80022e4:	efffffff 	.word	0xefffffff
 80022e8:	fffff3ff 	.word	0xfffff3ff
 80022ec:	fff3ffff 	.word	0xfff3ffff
 80022f0:	ffcfffff 	.word	0xffcfffff
 80022f4:	ffffcfff 	.word	0xffffcfff
 80022f8:	ffbfffff 	.word	0xffbfffff
 80022fc:	feffffff 	.word	0xfeffffff
 8002300:	ffff3fff 	.word	0xffff3fff

08002304 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002304:	b580      	push	{r7, lr}
 8002306:	b082      	sub	sp, #8
 8002308:	af00      	add	r7, sp, #0
 800230a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	2b00      	cmp	r3, #0
 8002310:	d101      	bne.n	8002316 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002312:	2301      	movs	r3, #1
 8002314:	e04a      	b.n	80023ac <HAL_TIM_PWM_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	223d      	movs	r2, #61	; 0x3d
 800231a:	5c9b      	ldrb	r3, [r3, r2]
 800231c:	b2db      	uxtb	r3, r3
 800231e:	2b00      	cmp	r3, #0
 8002320:	d107      	bne.n	8002332 <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	223c      	movs	r2, #60	; 0x3c
 8002326:	2100      	movs	r1, #0
 8002328:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	0018      	movs	r0, r3
 800232e:	f7fe fcc5 	bl	8000cbc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	223d      	movs	r2, #61	; 0x3d
 8002336:	2102      	movs	r1, #2
 8002338:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681a      	ldr	r2, [r3, #0]
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	3304      	adds	r3, #4
 8002342:	0019      	movs	r1, r3
 8002344:	0010      	movs	r0, r2
 8002346:	f000 faab 	bl	80028a0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	2248      	movs	r2, #72	; 0x48
 800234e:	2101      	movs	r1, #1
 8002350:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	223e      	movs	r2, #62	; 0x3e
 8002356:	2101      	movs	r1, #1
 8002358:	5499      	strb	r1, [r3, r2]
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	223f      	movs	r2, #63	; 0x3f
 800235e:	2101      	movs	r1, #1
 8002360:	5499      	strb	r1, [r3, r2]
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	2240      	movs	r2, #64	; 0x40
 8002366:	2101      	movs	r1, #1
 8002368:	5499      	strb	r1, [r3, r2]
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	2241      	movs	r2, #65	; 0x41
 800236e:	2101      	movs	r1, #1
 8002370:	5499      	strb	r1, [r3, r2]
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	2242      	movs	r2, #66	; 0x42
 8002376:	2101      	movs	r1, #1
 8002378:	5499      	strb	r1, [r3, r2]
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	2243      	movs	r2, #67	; 0x43
 800237e:	2101      	movs	r1, #1
 8002380:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	2244      	movs	r2, #68	; 0x44
 8002386:	2101      	movs	r1, #1
 8002388:	5499      	strb	r1, [r3, r2]
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	2245      	movs	r2, #69	; 0x45
 800238e:	2101      	movs	r1, #1
 8002390:	5499      	strb	r1, [r3, r2]
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	2246      	movs	r2, #70	; 0x46
 8002396:	2101      	movs	r1, #1
 8002398:	5499      	strb	r1, [r3, r2]
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	2247      	movs	r2, #71	; 0x47
 800239e:	2101      	movs	r1, #1
 80023a0:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	223d      	movs	r2, #61	; 0x3d
 80023a6:	2101      	movs	r1, #1
 80023a8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80023aa:	2300      	movs	r3, #0
}
 80023ac:	0018      	movs	r0, r3
 80023ae:	46bd      	mov	sp, r7
 80023b0:	b002      	add	sp, #8
 80023b2:	bd80      	pop	{r7, pc}

080023b4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80023b4:	b580      	push	{r7, lr}
 80023b6:	b084      	sub	sp, #16
 80023b8:	af00      	add	r7, sp, #0
 80023ba:	6078      	str	r0, [r7, #4]
 80023bc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80023be:	683b      	ldr	r3, [r7, #0]
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d108      	bne.n	80023d6 <HAL_TIM_PWM_Start+0x22>
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	223e      	movs	r2, #62	; 0x3e
 80023c8:	5c9b      	ldrb	r3, [r3, r2]
 80023ca:	b2db      	uxtb	r3, r3
 80023cc:	3b01      	subs	r3, #1
 80023ce:	1e5a      	subs	r2, r3, #1
 80023d0:	4193      	sbcs	r3, r2
 80023d2:	b2db      	uxtb	r3, r3
 80023d4:	e037      	b.n	8002446 <HAL_TIM_PWM_Start+0x92>
 80023d6:	683b      	ldr	r3, [r7, #0]
 80023d8:	2b04      	cmp	r3, #4
 80023da:	d108      	bne.n	80023ee <HAL_TIM_PWM_Start+0x3a>
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	223f      	movs	r2, #63	; 0x3f
 80023e0:	5c9b      	ldrb	r3, [r3, r2]
 80023e2:	b2db      	uxtb	r3, r3
 80023e4:	3b01      	subs	r3, #1
 80023e6:	1e5a      	subs	r2, r3, #1
 80023e8:	4193      	sbcs	r3, r2
 80023ea:	b2db      	uxtb	r3, r3
 80023ec:	e02b      	b.n	8002446 <HAL_TIM_PWM_Start+0x92>
 80023ee:	683b      	ldr	r3, [r7, #0]
 80023f0:	2b08      	cmp	r3, #8
 80023f2:	d108      	bne.n	8002406 <HAL_TIM_PWM_Start+0x52>
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	2240      	movs	r2, #64	; 0x40
 80023f8:	5c9b      	ldrb	r3, [r3, r2]
 80023fa:	b2db      	uxtb	r3, r3
 80023fc:	3b01      	subs	r3, #1
 80023fe:	1e5a      	subs	r2, r3, #1
 8002400:	4193      	sbcs	r3, r2
 8002402:	b2db      	uxtb	r3, r3
 8002404:	e01f      	b.n	8002446 <HAL_TIM_PWM_Start+0x92>
 8002406:	683b      	ldr	r3, [r7, #0]
 8002408:	2b0c      	cmp	r3, #12
 800240a:	d108      	bne.n	800241e <HAL_TIM_PWM_Start+0x6a>
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	2241      	movs	r2, #65	; 0x41
 8002410:	5c9b      	ldrb	r3, [r3, r2]
 8002412:	b2db      	uxtb	r3, r3
 8002414:	3b01      	subs	r3, #1
 8002416:	1e5a      	subs	r2, r3, #1
 8002418:	4193      	sbcs	r3, r2
 800241a:	b2db      	uxtb	r3, r3
 800241c:	e013      	b.n	8002446 <HAL_TIM_PWM_Start+0x92>
 800241e:	683b      	ldr	r3, [r7, #0]
 8002420:	2b10      	cmp	r3, #16
 8002422:	d108      	bne.n	8002436 <HAL_TIM_PWM_Start+0x82>
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	2242      	movs	r2, #66	; 0x42
 8002428:	5c9b      	ldrb	r3, [r3, r2]
 800242a:	b2db      	uxtb	r3, r3
 800242c:	3b01      	subs	r3, #1
 800242e:	1e5a      	subs	r2, r3, #1
 8002430:	4193      	sbcs	r3, r2
 8002432:	b2db      	uxtb	r3, r3
 8002434:	e007      	b.n	8002446 <HAL_TIM_PWM_Start+0x92>
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	2243      	movs	r2, #67	; 0x43
 800243a:	5c9b      	ldrb	r3, [r3, r2]
 800243c:	b2db      	uxtb	r3, r3
 800243e:	3b01      	subs	r3, #1
 8002440:	1e5a      	subs	r2, r3, #1
 8002442:	4193      	sbcs	r3, r2
 8002444:	b2db      	uxtb	r3, r3
 8002446:	2b00      	cmp	r3, #0
 8002448:	d001      	beq.n	800244e <HAL_TIM_PWM_Start+0x9a>
  {
    return HAL_ERROR;
 800244a:	2301      	movs	r3, #1
 800244c:	e08b      	b.n	8002566 <HAL_TIM_PWM_Start+0x1b2>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800244e:	683b      	ldr	r3, [r7, #0]
 8002450:	2b00      	cmp	r3, #0
 8002452:	d104      	bne.n	800245e <HAL_TIM_PWM_Start+0xaa>
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	223e      	movs	r2, #62	; 0x3e
 8002458:	2102      	movs	r1, #2
 800245a:	5499      	strb	r1, [r3, r2]
 800245c:	e023      	b.n	80024a6 <HAL_TIM_PWM_Start+0xf2>
 800245e:	683b      	ldr	r3, [r7, #0]
 8002460:	2b04      	cmp	r3, #4
 8002462:	d104      	bne.n	800246e <HAL_TIM_PWM_Start+0xba>
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	223f      	movs	r2, #63	; 0x3f
 8002468:	2102      	movs	r1, #2
 800246a:	5499      	strb	r1, [r3, r2]
 800246c:	e01b      	b.n	80024a6 <HAL_TIM_PWM_Start+0xf2>
 800246e:	683b      	ldr	r3, [r7, #0]
 8002470:	2b08      	cmp	r3, #8
 8002472:	d104      	bne.n	800247e <HAL_TIM_PWM_Start+0xca>
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	2240      	movs	r2, #64	; 0x40
 8002478:	2102      	movs	r1, #2
 800247a:	5499      	strb	r1, [r3, r2]
 800247c:	e013      	b.n	80024a6 <HAL_TIM_PWM_Start+0xf2>
 800247e:	683b      	ldr	r3, [r7, #0]
 8002480:	2b0c      	cmp	r3, #12
 8002482:	d104      	bne.n	800248e <HAL_TIM_PWM_Start+0xda>
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	2241      	movs	r2, #65	; 0x41
 8002488:	2102      	movs	r1, #2
 800248a:	5499      	strb	r1, [r3, r2]
 800248c:	e00b      	b.n	80024a6 <HAL_TIM_PWM_Start+0xf2>
 800248e:	683b      	ldr	r3, [r7, #0]
 8002490:	2b10      	cmp	r3, #16
 8002492:	d104      	bne.n	800249e <HAL_TIM_PWM_Start+0xea>
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	2242      	movs	r2, #66	; 0x42
 8002498:	2102      	movs	r1, #2
 800249a:	5499      	strb	r1, [r3, r2]
 800249c:	e003      	b.n	80024a6 <HAL_TIM_PWM_Start+0xf2>
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	2243      	movs	r2, #67	; 0x43
 80024a2:	2102      	movs	r1, #2
 80024a4:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	6839      	ldr	r1, [r7, #0]
 80024ac:	2201      	movs	r2, #1
 80024ae:	0018      	movs	r0, r3
 80024b0:	f000 fd3a 	bl	8002f28 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	4a2d      	ldr	r2, [pc, #180]	; (8002570 <HAL_TIM_PWM_Start+0x1bc>)
 80024ba:	4293      	cmp	r3, r2
 80024bc:	d00e      	beq.n	80024dc <HAL_TIM_PWM_Start+0x128>
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	4a2c      	ldr	r2, [pc, #176]	; (8002574 <HAL_TIM_PWM_Start+0x1c0>)
 80024c4:	4293      	cmp	r3, r2
 80024c6:	d009      	beq.n	80024dc <HAL_TIM_PWM_Start+0x128>
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	4a2a      	ldr	r2, [pc, #168]	; (8002578 <HAL_TIM_PWM_Start+0x1c4>)
 80024ce:	4293      	cmp	r3, r2
 80024d0:	d004      	beq.n	80024dc <HAL_TIM_PWM_Start+0x128>
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	4a29      	ldr	r2, [pc, #164]	; (800257c <HAL_TIM_PWM_Start+0x1c8>)
 80024d8:	4293      	cmp	r3, r2
 80024da:	d101      	bne.n	80024e0 <HAL_TIM_PWM_Start+0x12c>
 80024dc:	2301      	movs	r3, #1
 80024de:	e000      	b.n	80024e2 <HAL_TIM_PWM_Start+0x12e>
 80024e0:	2300      	movs	r3, #0
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d008      	beq.n	80024f8 <HAL_TIM_PWM_Start+0x144>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	2180      	movs	r1, #128	; 0x80
 80024f2:	0209      	lsls	r1, r1, #8
 80024f4:	430a      	orrs	r2, r1
 80024f6:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	4a1c      	ldr	r2, [pc, #112]	; (8002570 <HAL_TIM_PWM_Start+0x1bc>)
 80024fe:	4293      	cmp	r3, r2
 8002500:	d00f      	beq.n	8002522 <HAL_TIM_PWM_Start+0x16e>
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681a      	ldr	r2, [r3, #0]
 8002506:	2380      	movs	r3, #128	; 0x80
 8002508:	05db      	lsls	r3, r3, #23
 800250a:	429a      	cmp	r2, r3
 800250c:	d009      	beq.n	8002522 <HAL_TIM_PWM_Start+0x16e>
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	4a1b      	ldr	r2, [pc, #108]	; (8002580 <HAL_TIM_PWM_Start+0x1cc>)
 8002514:	4293      	cmp	r3, r2
 8002516:	d004      	beq.n	8002522 <HAL_TIM_PWM_Start+0x16e>
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	4a15      	ldr	r2, [pc, #84]	; (8002574 <HAL_TIM_PWM_Start+0x1c0>)
 800251e:	4293      	cmp	r3, r2
 8002520:	d116      	bne.n	8002550 <HAL_TIM_PWM_Start+0x19c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	689b      	ldr	r3, [r3, #8]
 8002528:	4a16      	ldr	r2, [pc, #88]	; (8002584 <HAL_TIM_PWM_Start+0x1d0>)
 800252a:	4013      	ands	r3, r2
 800252c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	2b06      	cmp	r3, #6
 8002532:	d016      	beq.n	8002562 <HAL_TIM_PWM_Start+0x1ae>
 8002534:	68fa      	ldr	r2, [r7, #12]
 8002536:	2380      	movs	r3, #128	; 0x80
 8002538:	025b      	lsls	r3, r3, #9
 800253a:	429a      	cmp	r2, r3
 800253c:	d011      	beq.n	8002562 <HAL_TIM_PWM_Start+0x1ae>
    {
      __HAL_TIM_ENABLE(htim);
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	681a      	ldr	r2, [r3, #0]
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	2101      	movs	r1, #1
 800254a:	430a      	orrs	r2, r1
 800254c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800254e:	e008      	b.n	8002562 <HAL_TIM_PWM_Start+0x1ae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	681a      	ldr	r2, [r3, #0]
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	2101      	movs	r1, #1
 800255c:	430a      	orrs	r2, r1
 800255e:	601a      	str	r2, [r3, #0]
 8002560:	e000      	b.n	8002564 <HAL_TIM_PWM_Start+0x1b0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002562:	46c0      	nop			; (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 8002564:	2300      	movs	r3, #0
}
 8002566:	0018      	movs	r0, r3
 8002568:	46bd      	mov	sp, r7
 800256a:	b004      	add	sp, #16
 800256c:	bd80      	pop	{r7, pc}
 800256e:	46c0      	nop			; (mov r8, r8)
 8002570:	40012c00 	.word	0x40012c00
 8002574:	40014000 	.word	0x40014000
 8002578:	40014400 	.word	0x40014400
 800257c:	40014800 	.word	0x40014800
 8002580:	40000400 	.word	0x40000400
 8002584:	00010007 	.word	0x00010007

08002588 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002588:	b580      	push	{r7, lr}
 800258a:	b082      	sub	sp, #8
 800258c:	af00      	add	r7, sp, #0
 800258e:	6078      	str	r0, [r7, #4]
 8002590:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	6839      	ldr	r1, [r7, #0]
 8002598:	2200      	movs	r2, #0
 800259a:	0018      	movs	r0, r3
 800259c:	f000 fcc4 	bl	8002f28 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	4a37      	ldr	r2, [pc, #220]	; (8002684 <HAL_TIM_PWM_Stop+0xfc>)
 80025a6:	4293      	cmp	r3, r2
 80025a8:	d00e      	beq.n	80025c8 <HAL_TIM_PWM_Stop+0x40>
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	4a36      	ldr	r2, [pc, #216]	; (8002688 <HAL_TIM_PWM_Stop+0x100>)
 80025b0:	4293      	cmp	r3, r2
 80025b2:	d009      	beq.n	80025c8 <HAL_TIM_PWM_Stop+0x40>
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	4a34      	ldr	r2, [pc, #208]	; (800268c <HAL_TIM_PWM_Stop+0x104>)
 80025ba:	4293      	cmp	r3, r2
 80025bc:	d004      	beq.n	80025c8 <HAL_TIM_PWM_Stop+0x40>
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	4a33      	ldr	r2, [pc, #204]	; (8002690 <HAL_TIM_PWM_Stop+0x108>)
 80025c4:	4293      	cmp	r3, r2
 80025c6:	d101      	bne.n	80025cc <HAL_TIM_PWM_Stop+0x44>
 80025c8:	2301      	movs	r3, #1
 80025ca:	e000      	b.n	80025ce <HAL_TIM_PWM_Stop+0x46>
 80025cc:	2300      	movs	r3, #0
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d013      	beq.n	80025fa <HAL_TIM_PWM_Stop+0x72>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	6a1b      	ldr	r3, [r3, #32]
 80025d8:	4a2e      	ldr	r2, [pc, #184]	; (8002694 <HAL_TIM_PWM_Stop+0x10c>)
 80025da:	4013      	ands	r3, r2
 80025dc:	d10d      	bne.n	80025fa <HAL_TIM_PWM_Stop+0x72>
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	6a1b      	ldr	r3, [r3, #32]
 80025e4:	4a2c      	ldr	r2, [pc, #176]	; (8002698 <HAL_TIM_PWM_Stop+0x110>)
 80025e6:	4013      	ands	r3, r2
 80025e8:	d107      	bne.n	80025fa <HAL_TIM_PWM_Stop+0x72>
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	4929      	ldr	r1, [pc, #164]	; (800269c <HAL_TIM_PWM_Stop+0x114>)
 80025f6:	400a      	ands	r2, r1
 80025f8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	6a1b      	ldr	r3, [r3, #32]
 8002600:	4a24      	ldr	r2, [pc, #144]	; (8002694 <HAL_TIM_PWM_Stop+0x10c>)
 8002602:	4013      	ands	r3, r2
 8002604:	d10d      	bne.n	8002622 <HAL_TIM_PWM_Stop+0x9a>
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	6a1b      	ldr	r3, [r3, #32]
 800260c:	4a22      	ldr	r2, [pc, #136]	; (8002698 <HAL_TIM_PWM_Stop+0x110>)
 800260e:	4013      	ands	r3, r2
 8002610:	d107      	bne.n	8002622 <HAL_TIM_PWM_Stop+0x9a>
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	681a      	ldr	r2, [r3, #0]
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	2101      	movs	r1, #1
 800261e:	438a      	bics	r2, r1
 8002620:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8002622:	683b      	ldr	r3, [r7, #0]
 8002624:	2b00      	cmp	r3, #0
 8002626:	d104      	bne.n	8002632 <HAL_TIM_PWM_Stop+0xaa>
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	223e      	movs	r2, #62	; 0x3e
 800262c:	2101      	movs	r1, #1
 800262e:	5499      	strb	r1, [r3, r2]
 8002630:	e023      	b.n	800267a <HAL_TIM_PWM_Stop+0xf2>
 8002632:	683b      	ldr	r3, [r7, #0]
 8002634:	2b04      	cmp	r3, #4
 8002636:	d104      	bne.n	8002642 <HAL_TIM_PWM_Stop+0xba>
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	223f      	movs	r2, #63	; 0x3f
 800263c:	2101      	movs	r1, #1
 800263e:	5499      	strb	r1, [r3, r2]
 8002640:	e01b      	b.n	800267a <HAL_TIM_PWM_Stop+0xf2>
 8002642:	683b      	ldr	r3, [r7, #0]
 8002644:	2b08      	cmp	r3, #8
 8002646:	d104      	bne.n	8002652 <HAL_TIM_PWM_Stop+0xca>
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	2240      	movs	r2, #64	; 0x40
 800264c:	2101      	movs	r1, #1
 800264e:	5499      	strb	r1, [r3, r2]
 8002650:	e013      	b.n	800267a <HAL_TIM_PWM_Stop+0xf2>
 8002652:	683b      	ldr	r3, [r7, #0]
 8002654:	2b0c      	cmp	r3, #12
 8002656:	d104      	bne.n	8002662 <HAL_TIM_PWM_Stop+0xda>
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	2241      	movs	r2, #65	; 0x41
 800265c:	2101      	movs	r1, #1
 800265e:	5499      	strb	r1, [r3, r2]
 8002660:	e00b      	b.n	800267a <HAL_TIM_PWM_Stop+0xf2>
 8002662:	683b      	ldr	r3, [r7, #0]
 8002664:	2b10      	cmp	r3, #16
 8002666:	d104      	bne.n	8002672 <HAL_TIM_PWM_Stop+0xea>
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	2242      	movs	r2, #66	; 0x42
 800266c:	2101      	movs	r1, #1
 800266e:	5499      	strb	r1, [r3, r2]
 8002670:	e003      	b.n	800267a <HAL_TIM_PWM_Stop+0xf2>
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	2243      	movs	r2, #67	; 0x43
 8002676:	2101      	movs	r1, #1
 8002678:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 800267a:	2300      	movs	r3, #0
}
 800267c:	0018      	movs	r0, r3
 800267e:	46bd      	mov	sp, r7
 8002680:	b002      	add	sp, #8
 8002682:	bd80      	pop	{r7, pc}
 8002684:	40012c00 	.word	0x40012c00
 8002688:	40014000 	.word	0x40014000
 800268c:	40014400 	.word	0x40014400
 8002690:	40014800 	.word	0x40014800
 8002694:	00001111 	.word	0x00001111
 8002698:	00000444 	.word	0x00000444
 800269c:	ffff7fff 	.word	0xffff7fff

080026a0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80026a0:	b580      	push	{r7, lr}
 80026a2:	b086      	sub	sp, #24
 80026a4:	af00      	add	r7, sp, #0
 80026a6:	60f8      	str	r0, [r7, #12]
 80026a8:	60b9      	str	r1, [r7, #8]
 80026aa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80026ac:	2317      	movs	r3, #23
 80026ae:	18fb      	adds	r3, r7, r3
 80026b0:	2200      	movs	r2, #0
 80026b2:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	223c      	movs	r2, #60	; 0x3c
 80026b8:	5c9b      	ldrb	r3, [r3, r2]
 80026ba:	2b01      	cmp	r3, #1
 80026bc:	d101      	bne.n	80026c2 <HAL_TIM_PWM_ConfigChannel+0x22>
 80026be:	2302      	movs	r3, #2
 80026c0:	e0e5      	b.n	800288e <HAL_TIM_PWM_ConfigChannel+0x1ee>
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	223c      	movs	r2, #60	; 0x3c
 80026c6:	2101      	movs	r1, #1
 80026c8:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	2b14      	cmp	r3, #20
 80026ce:	d900      	bls.n	80026d2 <HAL_TIM_PWM_ConfigChannel+0x32>
 80026d0:	e0d1      	b.n	8002876 <HAL_TIM_PWM_ConfigChannel+0x1d6>
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	009a      	lsls	r2, r3, #2
 80026d6:	4b70      	ldr	r3, [pc, #448]	; (8002898 <HAL_TIM_PWM_ConfigChannel+0x1f8>)
 80026d8:	18d3      	adds	r3, r2, r3
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	469f      	mov	pc, r3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	68ba      	ldr	r2, [r7, #8]
 80026e4:	0011      	movs	r1, r2
 80026e6:	0018      	movs	r0, r3
 80026e8:	f000 f95a 	bl	80029a0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	699a      	ldr	r2, [r3, #24]
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	2108      	movs	r1, #8
 80026f8:	430a      	orrs	r2, r1
 80026fa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	699a      	ldr	r2, [r3, #24]
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	2104      	movs	r1, #4
 8002708:	438a      	bics	r2, r1
 800270a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	6999      	ldr	r1, [r3, #24]
 8002712:	68bb      	ldr	r3, [r7, #8]
 8002714:	691a      	ldr	r2, [r3, #16]
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	430a      	orrs	r2, r1
 800271c:	619a      	str	r2, [r3, #24]
      break;
 800271e:	e0af      	b.n	8002880 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	68ba      	ldr	r2, [r7, #8]
 8002726:	0011      	movs	r1, r2
 8002728:	0018      	movs	r0, r3
 800272a:	f000 f9c3 	bl	8002ab4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	699a      	ldr	r2, [r3, #24]
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	2180      	movs	r1, #128	; 0x80
 800273a:	0109      	lsls	r1, r1, #4
 800273c:	430a      	orrs	r2, r1
 800273e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	699a      	ldr	r2, [r3, #24]
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	4954      	ldr	r1, [pc, #336]	; (800289c <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 800274c:	400a      	ands	r2, r1
 800274e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	6999      	ldr	r1, [r3, #24]
 8002756:	68bb      	ldr	r3, [r7, #8]
 8002758:	691b      	ldr	r3, [r3, #16]
 800275a:	021a      	lsls	r2, r3, #8
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	430a      	orrs	r2, r1
 8002762:	619a      	str	r2, [r3, #24]
      break;
 8002764:	e08c      	b.n	8002880 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	68ba      	ldr	r2, [r7, #8]
 800276c:	0011      	movs	r1, r2
 800276e:	0018      	movs	r0, r3
 8002770:	f000 fa24 	bl	8002bbc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	69da      	ldr	r2, [r3, #28]
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	2108      	movs	r1, #8
 8002780:	430a      	orrs	r2, r1
 8002782:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	69da      	ldr	r2, [r3, #28]
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	2104      	movs	r1, #4
 8002790:	438a      	bics	r2, r1
 8002792:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	69d9      	ldr	r1, [r3, #28]
 800279a:	68bb      	ldr	r3, [r7, #8]
 800279c:	691a      	ldr	r2, [r3, #16]
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	430a      	orrs	r2, r1
 80027a4:	61da      	str	r2, [r3, #28]
      break;
 80027a6:	e06b      	b.n	8002880 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	68ba      	ldr	r2, [r7, #8]
 80027ae:	0011      	movs	r1, r2
 80027b0:	0018      	movs	r0, r3
 80027b2:	f000 fa8b 	bl	8002ccc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	69da      	ldr	r2, [r3, #28]
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	2180      	movs	r1, #128	; 0x80
 80027c2:	0109      	lsls	r1, r1, #4
 80027c4:	430a      	orrs	r2, r1
 80027c6:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	69da      	ldr	r2, [r3, #28]
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	4932      	ldr	r1, [pc, #200]	; (800289c <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 80027d4:	400a      	ands	r2, r1
 80027d6:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	69d9      	ldr	r1, [r3, #28]
 80027de:	68bb      	ldr	r3, [r7, #8]
 80027e0:	691b      	ldr	r3, [r3, #16]
 80027e2:	021a      	lsls	r2, r3, #8
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	430a      	orrs	r2, r1
 80027ea:	61da      	str	r2, [r3, #28]
      break;
 80027ec:	e048      	b.n	8002880 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	68ba      	ldr	r2, [r7, #8]
 80027f4:	0011      	movs	r1, r2
 80027f6:	0018      	movs	r0, r3
 80027f8:	f000 fad2 	bl	8002da0 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	2108      	movs	r1, #8
 8002808:	430a      	orrs	r2, r1
 800280a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	2104      	movs	r1, #4
 8002818:	438a      	bics	r2, r1
 800281a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8002822:	68bb      	ldr	r3, [r7, #8]
 8002824:	691a      	ldr	r2, [r3, #16]
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	430a      	orrs	r2, r1
 800282c:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800282e:	e027      	b.n	8002880 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	68ba      	ldr	r2, [r7, #8]
 8002836:	0011      	movs	r1, r2
 8002838:	0018      	movs	r0, r3
 800283a:	f000 fb11 	bl	8002e60 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	2180      	movs	r1, #128	; 0x80
 800284a:	0109      	lsls	r1, r1, #4
 800284c:	430a      	orrs	r2, r1
 800284e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	4910      	ldr	r1, [pc, #64]	; (800289c <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 800285c:	400a      	ands	r2, r1
 800285e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8002866:	68bb      	ldr	r3, [r7, #8]
 8002868:	691b      	ldr	r3, [r3, #16]
 800286a:	021a      	lsls	r2, r3, #8
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	430a      	orrs	r2, r1
 8002872:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8002874:	e004      	b.n	8002880 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    }

    default:
      status = HAL_ERROR;
 8002876:	2317      	movs	r3, #23
 8002878:	18fb      	adds	r3, r7, r3
 800287a:	2201      	movs	r2, #1
 800287c:	701a      	strb	r2, [r3, #0]
      break;
 800287e:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	223c      	movs	r2, #60	; 0x3c
 8002884:	2100      	movs	r1, #0
 8002886:	5499      	strb	r1, [r3, r2]

  return status;
 8002888:	2317      	movs	r3, #23
 800288a:	18fb      	adds	r3, r7, r3
 800288c:	781b      	ldrb	r3, [r3, #0]
}
 800288e:	0018      	movs	r0, r3
 8002890:	46bd      	mov	sp, r7
 8002892:	b006      	add	sp, #24
 8002894:	bd80      	pop	{r7, pc}
 8002896:	46c0      	nop			; (mov r8, r8)
 8002898:	08003e58 	.word	0x08003e58
 800289c:	fffffbff 	.word	0xfffffbff

080028a0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80028a0:	b580      	push	{r7, lr}
 80028a2:	b084      	sub	sp, #16
 80028a4:	af00      	add	r7, sp, #0
 80028a6:	6078      	str	r0, [r7, #4]
 80028a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	4a34      	ldr	r2, [pc, #208]	; (8002984 <TIM_Base_SetConfig+0xe4>)
 80028b4:	4293      	cmp	r3, r2
 80028b6:	d008      	beq.n	80028ca <TIM_Base_SetConfig+0x2a>
 80028b8:	687a      	ldr	r2, [r7, #4]
 80028ba:	2380      	movs	r3, #128	; 0x80
 80028bc:	05db      	lsls	r3, r3, #23
 80028be:	429a      	cmp	r2, r3
 80028c0:	d003      	beq.n	80028ca <TIM_Base_SetConfig+0x2a>
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	4a30      	ldr	r2, [pc, #192]	; (8002988 <TIM_Base_SetConfig+0xe8>)
 80028c6:	4293      	cmp	r3, r2
 80028c8:	d108      	bne.n	80028dc <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	2270      	movs	r2, #112	; 0x70
 80028ce:	4393      	bics	r3, r2
 80028d0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80028d2:	683b      	ldr	r3, [r7, #0]
 80028d4:	685b      	ldr	r3, [r3, #4]
 80028d6:	68fa      	ldr	r2, [r7, #12]
 80028d8:	4313      	orrs	r3, r2
 80028da:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	4a29      	ldr	r2, [pc, #164]	; (8002984 <TIM_Base_SetConfig+0xe4>)
 80028e0:	4293      	cmp	r3, r2
 80028e2:	d018      	beq.n	8002916 <TIM_Base_SetConfig+0x76>
 80028e4:	687a      	ldr	r2, [r7, #4]
 80028e6:	2380      	movs	r3, #128	; 0x80
 80028e8:	05db      	lsls	r3, r3, #23
 80028ea:	429a      	cmp	r2, r3
 80028ec:	d013      	beq.n	8002916 <TIM_Base_SetConfig+0x76>
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	4a25      	ldr	r2, [pc, #148]	; (8002988 <TIM_Base_SetConfig+0xe8>)
 80028f2:	4293      	cmp	r3, r2
 80028f4:	d00f      	beq.n	8002916 <TIM_Base_SetConfig+0x76>
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	4a24      	ldr	r2, [pc, #144]	; (800298c <TIM_Base_SetConfig+0xec>)
 80028fa:	4293      	cmp	r3, r2
 80028fc:	d00b      	beq.n	8002916 <TIM_Base_SetConfig+0x76>
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	4a23      	ldr	r2, [pc, #140]	; (8002990 <TIM_Base_SetConfig+0xf0>)
 8002902:	4293      	cmp	r3, r2
 8002904:	d007      	beq.n	8002916 <TIM_Base_SetConfig+0x76>
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	4a22      	ldr	r2, [pc, #136]	; (8002994 <TIM_Base_SetConfig+0xf4>)
 800290a:	4293      	cmp	r3, r2
 800290c:	d003      	beq.n	8002916 <TIM_Base_SetConfig+0x76>
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	4a21      	ldr	r2, [pc, #132]	; (8002998 <TIM_Base_SetConfig+0xf8>)
 8002912:	4293      	cmp	r3, r2
 8002914:	d108      	bne.n	8002928 <TIM_Base_SetConfig+0x88>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	4a20      	ldr	r2, [pc, #128]	; (800299c <TIM_Base_SetConfig+0xfc>)
 800291a:	4013      	ands	r3, r2
 800291c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800291e:	683b      	ldr	r3, [r7, #0]
 8002920:	68db      	ldr	r3, [r3, #12]
 8002922:	68fa      	ldr	r2, [r7, #12]
 8002924:	4313      	orrs	r3, r2
 8002926:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	2280      	movs	r2, #128	; 0x80
 800292c:	4393      	bics	r3, r2
 800292e:	001a      	movs	r2, r3
 8002930:	683b      	ldr	r3, [r7, #0]
 8002932:	695b      	ldr	r3, [r3, #20]
 8002934:	4313      	orrs	r3, r2
 8002936:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	68fa      	ldr	r2, [r7, #12]
 800293c:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800293e:	683b      	ldr	r3, [r7, #0]
 8002940:	689a      	ldr	r2, [r3, #8]
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002946:	683b      	ldr	r3, [r7, #0]
 8002948:	681a      	ldr	r2, [r3, #0]
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	4a0c      	ldr	r2, [pc, #48]	; (8002984 <TIM_Base_SetConfig+0xe4>)
 8002952:	4293      	cmp	r3, r2
 8002954:	d00b      	beq.n	800296e <TIM_Base_SetConfig+0xce>
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	4a0d      	ldr	r2, [pc, #52]	; (8002990 <TIM_Base_SetConfig+0xf0>)
 800295a:	4293      	cmp	r3, r2
 800295c:	d007      	beq.n	800296e <TIM_Base_SetConfig+0xce>
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	4a0c      	ldr	r2, [pc, #48]	; (8002994 <TIM_Base_SetConfig+0xf4>)
 8002962:	4293      	cmp	r3, r2
 8002964:	d003      	beq.n	800296e <TIM_Base_SetConfig+0xce>
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	4a0b      	ldr	r2, [pc, #44]	; (8002998 <TIM_Base_SetConfig+0xf8>)
 800296a:	4293      	cmp	r3, r2
 800296c:	d103      	bne.n	8002976 <TIM_Base_SetConfig+0xd6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800296e:	683b      	ldr	r3, [r7, #0]
 8002970:	691a      	ldr	r2, [r3, #16]
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	2201      	movs	r2, #1
 800297a:	615a      	str	r2, [r3, #20]
}
 800297c:	46c0      	nop			; (mov r8, r8)
 800297e:	46bd      	mov	sp, r7
 8002980:	b004      	add	sp, #16
 8002982:	bd80      	pop	{r7, pc}
 8002984:	40012c00 	.word	0x40012c00
 8002988:	40000400 	.word	0x40000400
 800298c:	40002000 	.word	0x40002000
 8002990:	40014000 	.word	0x40014000
 8002994:	40014400 	.word	0x40014400
 8002998:	40014800 	.word	0x40014800
 800299c:	fffffcff 	.word	0xfffffcff

080029a0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80029a0:	b580      	push	{r7, lr}
 80029a2:	b086      	sub	sp, #24
 80029a4:	af00      	add	r7, sp, #0
 80029a6:	6078      	str	r0, [r7, #4]
 80029a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	6a1b      	ldr	r3, [r3, #32]
 80029ae:	2201      	movs	r2, #1
 80029b0:	4393      	bics	r3, r2
 80029b2:	001a      	movs	r2, r3
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	6a1b      	ldr	r3, [r3, #32]
 80029bc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	685b      	ldr	r3, [r3, #4]
 80029c2:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	699b      	ldr	r3, [r3, #24]
 80029c8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	4a32      	ldr	r2, [pc, #200]	; (8002a98 <TIM_OC1_SetConfig+0xf8>)
 80029ce:	4013      	ands	r3, r2
 80029d0:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	2203      	movs	r2, #3
 80029d6:	4393      	bics	r3, r2
 80029d8:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80029da:	683b      	ldr	r3, [r7, #0]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	68fa      	ldr	r2, [r7, #12]
 80029e0:	4313      	orrs	r3, r2
 80029e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80029e4:	697b      	ldr	r3, [r7, #20]
 80029e6:	2202      	movs	r2, #2
 80029e8:	4393      	bics	r3, r2
 80029ea:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80029ec:	683b      	ldr	r3, [r7, #0]
 80029ee:	689b      	ldr	r3, [r3, #8]
 80029f0:	697a      	ldr	r2, [r7, #20]
 80029f2:	4313      	orrs	r3, r2
 80029f4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	4a28      	ldr	r2, [pc, #160]	; (8002a9c <TIM_OC1_SetConfig+0xfc>)
 80029fa:	4293      	cmp	r3, r2
 80029fc:	d00b      	beq.n	8002a16 <TIM_OC1_SetConfig+0x76>
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	4a27      	ldr	r2, [pc, #156]	; (8002aa0 <TIM_OC1_SetConfig+0x100>)
 8002a02:	4293      	cmp	r3, r2
 8002a04:	d007      	beq.n	8002a16 <TIM_OC1_SetConfig+0x76>
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	4a26      	ldr	r2, [pc, #152]	; (8002aa4 <TIM_OC1_SetConfig+0x104>)
 8002a0a:	4293      	cmp	r3, r2
 8002a0c:	d003      	beq.n	8002a16 <TIM_OC1_SetConfig+0x76>
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	4a25      	ldr	r2, [pc, #148]	; (8002aa8 <TIM_OC1_SetConfig+0x108>)
 8002a12:	4293      	cmp	r3, r2
 8002a14:	d10c      	bne.n	8002a30 <TIM_OC1_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002a16:	697b      	ldr	r3, [r7, #20]
 8002a18:	2208      	movs	r2, #8
 8002a1a:	4393      	bics	r3, r2
 8002a1c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002a1e:	683b      	ldr	r3, [r7, #0]
 8002a20:	68db      	ldr	r3, [r3, #12]
 8002a22:	697a      	ldr	r2, [r7, #20]
 8002a24:	4313      	orrs	r3, r2
 8002a26:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002a28:	697b      	ldr	r3, [r7, #20]
 8002a2a:	2204      	movs	r2, #4
 8002a2c:	4393      	bics	r3, r2
 8002a2e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	4a1a      	ldr	r2, [pc, #104]	; (8002a9c <TIM_OC1_SetConfig+0xfc>)
 8002a34:	4293      	cmp	r3, r2
 8002a36:	d00b      	beq.n	8002a50 <TIM_OC1_SetConfig+0xb0>
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	4a19      	ldr	r2, [pc, #100]	; (8002aa0 <TIM_OC1_SetConfig+0x100>)
 8002a3c:	4293      	cmp	r3, r2
 8002a3e:	d007      	beq.n	8002a50 <TIM_OC1_SetConfig+0xb0>
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	4a18      	ldr	r2, [pc, #96]	; (8002aa4 <TIM_OC1_SetConfig+0x104>)
 8002a44:	4293      	cmp	r3, r2
 8002a46:	d003      	beq.n	8002a50 <TIM_OC1_SetConfig+0xb0>
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	4a17      	ldr	r2, [pc, #92]	; (8002aa8 <TIM_OC1_SetConfig+0x108>)
 8002a4c:	4293      	cmp	r3, r2
 8002a4e:	d111      	bne.n	8002a74 <TIM_OC1_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002a50:	693b      	ldr	r3, [r7, #16]
 8002a52:	4a16      	ldr	r2, [pc, #88]	; (8002aac <TIM_OC1_SetConfig+0x10c>)
 8002a54:	4013      	ands	r3, r2
 8002a56:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002a58:	693b      	ldr	r3, [r7, #16]
 8002a5a:	4a15      	ldr	r2, [pc, #84]	; (8002ab0 <TIM_OC1_SetConfig+0x110>)
 8002a5c:	4013      	ands	r3, r2
 8002a5e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002a60:	683b      	ldr	r3, [r7, #0]
 8002a62:	695b      	ldr	r3, [r3, #20]
 8002a64:	693a      	ldr	r2, [r7, #16]
 8002a66:	4313      	orrs	r3, r2
 8002a68:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002a6a:	683b      	ldr	r3, [r7, #0]
 8002a6c:	699b      	ldr	r3, [r3, #24]
 8002a6e:	693a      	ldr	r2, [r7, #16]
 8002a70:	4313      	orrs	r3, r2
 8002a72:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	693a      	ldr	r2, [r7, #16]
 8002a78:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	68fa      	ldr	r2, [r7, #12]
 8002a7e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002a80:	683b      	ldr	r3, [r7, #0]
 8002a82:	685a      	ldr	r2, [r3, #4]
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	697a      	ldr	r2, [r7, #20]
 8002a8c:	621a      	str	r2, [r3, #32]
}
 8002a8e:	46c0      	nop			; (mov r8, r8)
 8002a90:	46bd      	mov	sp, r7
 8002a92:	b006      	add	sp, #24
 8002a94:	bd80      	pop	{r7, pc}
 8002a96:	46c0      	nop			; (mov r8, r8)
 8002a98:	fffeff8f 	.word	0xfffeff8f
 8002a9c:	40012c00 	.word	0x40012c00
 8002aa0:	40014000 	.word	0x40014000
 8002aa4:	40014400 	.word	0x40014400
 8002aa8:	40014800 	.word	0x40014800
 8002aac:	fffffeff 	.word	0xfffffeff
 8002ab0:	fffffdff 	.word	0xfffffdff

08002ab4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002ab4:	b580      	push	{r7, lr}
 8002ab6:	b086      	sub	sp, #24
 8002ab8:	af00      	add	r7, sp, #0
 8002aba:	6078      	str	r0, [r7, #4]
 8002abc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	6a1b      	ldr	r3, [r3, #32]
 8002ac2:	2210      	movs	r2, #16
 8002ac4:	4393      	bics	r3, r2
 8002ac6:	001a      	movs	r2, r3
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	6a1b      	ldr	r3, [r3, #32]
 8002ad0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	685b      	ldr	r3, [r3, #4]
 8002ad6:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	699b      	ldr	r3, [r3, #24]
 8002adc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	4a2e      	ldr	r2, [pc, #184]	; (8002b9c <TIM_OC2_SetConfig+0xe8>)
 8002ae2:	4013      	ands	r3, r2
 8002ae4:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	4a2d      	ldr	r2, [pc, #180]	; (8002ba0 <TIM_OC2_SetConfig+0xec>)
 8002aea:	4013      	ands	r3, r2
 8002aec:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002aee:	683b      	ldr	r3, [r7, #0]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	021b      	lsls	r3, r3, #8
 8002af4:	68fa      	ldr	r2, [r7, #12]
 8002af6:	4313      	orrs	r3, r2
 8002af8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002afa:	697b      	ldr	r3, [r7, #20]
 8002afc:	2220      	movs	r2, #32
 8002afe:	4393      	bics	r3, r2
 8002b00:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002b02:	683b      	ldr	r3, [r7, #0]
 8002b04:	689b      	ldr	r3, [r3, #8]
 8002b06:	011b      	lsls	r3, r3, #4
 8002b08:	697a      	ldr	r2, [r7, #20]
 8002b0a:	4313      	orrs	r3, r2
 8002b0c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	4a24      	ldr	r2, [pc, #144]	; (8002ba4 <TIM_OC2_SetConfig+0xf0>)
 8002b12:	4293      	cmp	r3, r2
 8002b14:	d10d      	bne.n	8002b32 <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002b16:	697b      	ldr	r3, [r7, #20]
 8002b18:	2280      	movs	r2, #128	; 0x80
 8002b1a:	4393      	bics	r3, r2
 8002b1c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002b1e:	683b      	ldr	r3, [r7, #0]
 8002b20:	68db      	ldr	r3, [r3, #12]
 8002b22:	011b      	lsls	r3, r3, #4
 8002b24:	697a      	ldr	r2, [r7, #20]
 8002b26:	4313      	orrs	r3, r2
 8002b28:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002b2a:	697b      	ldr	r3, [r7, #20]
 8002b2c:	2240      	movs	r2, #64	; 0x40
 8002b2e:	4393      	bics	r3, r2
 8002b30:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	4a1b      	ldr	r2, [pc, #108]	; (8002ba4 <TIM_OC2_SetConfig+0xf0>)
 8002b36:	4293      	cmp	r3, r2
 8002b38:	d00b      	beq.n	8002b52 <TIM_OC2_SetConfig+0x9e>
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	4a1a      	ldr	r2, [pc, #104]	; (8002ba8 <TIM_OC2_SetConfig+0xf4>)
 8002b3e:	4293      	cmp	r3, r2
 8002b40:	d007      	beq.n	8002b52 <TIM_OC2_SetConfig+0x9e>
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	4a19      	ldr	r2, [pc, #100]	; (8002bac <TIM_OC2_SetConfig+0xf8>)
 8002b46:	4293      	cmp	r3, r2
 8002b48:	d003      	beq.n	8002b52 <TIM_OC2_SetConfig+0x9e>
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	4a18      	ldr	r2, [pc, #96]	; (8002bb0 <TIM_OC2_SetConfig+0xfc>)
 8002b4e:	4293      	cmp	r3, r2
 8002b50:	d113      	bne.n	8002b7a <TIM_OC2_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002b52:	693b      	ldr	r3, [r7, #16]
 8002b54:	4a17      	ldr	r2, [pc, #92]	; (8002bb4 <TIM_OC2_SetConfig+0x100>)
 8002b56:	4013      	ands	r3, r2
 8002b58:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002b5a:	693b      	ldr	r3, [r7, #16]
 8002b5c:	4a16      	ldr	r2, [pc, #88]	; (8002bb8 <TIM_OC2_SetConfig+0x104>)
 8002b5e:	4013      	ands	r3, r2
 8002b60:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002b62:	683b      	ldr	r3, [r7, #0]
 8002b64:	695b      	ldr	r3, [r3, #20]
 8002b66:	009b      	lsls	r3, r3, #2
 8002b68:	693a      	ldr	r2, [r7, #16]
 8002b6a:	4313      	orrs	r3, r2
 8002b6c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002b6e:	683b      	ldr	r3, [r7, #0]
 8002b70:	699b      	ldr	r3, [r3, #24]
 8002b72:	009b      	lsls	r3, r3, #2
 8002b74:	693a      	ldr	r2, [r7, #16]
 8002b76:	4313      	orrs	r3, r2
 8002b78:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	693a      	ldr	r2, [r7, #16]
 8002b7e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	68fa      	ldr	r2, [r7, #12]
 8002b84:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002b86:	683b      	ldr	r3, [r7, #0]
 8002b88:	685a      	ldr	r2, [r3, #4]
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	697a      	ldr	r2, [r7, #20]
 8002b92:	621a      	str	r2, [r3, #32]
}
 8002b94:	46c0      	nop			; (mov r8, r8)
 8002b96:	46bd      	mov	sp, r7
 8002b98:	b006      	add	sp, #24
 8002b9a:	bd80      	pop	{r7, pc}
 8002b9c:	feff8fff 	.word	0xfeff8fff
 8002ba0:	fffffcff 	.word	0xfffffcff
 8002ba4:	40012c00 	.word	0x40012c00
 8002ba8:	40014000 	.word	0x40014000
 8002bac:	40014400 	.word	0x40014400
 8002bb0:	40014800 	.word	0x40014800
 8002bb4:	fffffbff 	.word	0xfffffbff
 8002bb8:	fffff7ff 	.word	0xfffff7ff

08002bbc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002bbc:	b580      	push	{r7, lr}
 8002bbe:	b086      	sub	sp, #24
 8002bc0:	af00      	add	r7, sp, #0
 8002bc2:	6078      	str	r0, [r7, #4]
 8002bc4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	6a1b      	ldr	r3, [r3, #32]
 8002bca:	4a35      	ldr	r2, [pc, #212]	; (8002ca0 <TIM_OC3_SetConfig+0xe4>)
 8002bcc:	401a      	ands	r2, r3
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	6a1b      	ldr	r3, [r3, #32]
 8002bd6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	685b      	ldr	r3, [r3, #4]
 8002bdc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	69db      	ldr	r3, [r3, #28]
 8002be2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	4a2f      	ldr	r2, [pc, #188]	; (8002ca4 <TIM_OC3_SetConfig+0xe8>)
 8002be8:	4013      	ands	r3, r2
 8002bea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	2203      	movs	r2, #3
 8002bf0:	4393      	bics	r3, r2
 8002bf2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002bf4:	683b      	ldr	r3, [r7, #0]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	68fa      	ldr	r2, [r7, #12]
 8002bfa:	4313      	orrs	r3, r2
 8002bfc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002bfe:	697b      	ldr	r3, [r7, #20]
 8002c00:	4a29      	ldr	r2, [pc, #164]	; (8002ca8 <TIM_OC3_SetConfig+0xec>)
 8002c02:	4013      	ands	r3, r2
 8002c04:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002c06:	683b      	ldr	r3, [r7, #0]
 8002c08:	689b      	ldr	r3, [r3, #8]
 8002c0a:	021b      	lsls	r3, r3, #8
 8002c0c:	697a      	ldr	r2, [r7, #20]
 8002c0e:	4313      	orrs	r3, r2
 8002c10:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	4a25      	ldr	r2, [pc, #148]	; (8002cac <TIM_OC3_SetConfig+0xf0>)
 8002c16:	4293      	cmp	r3, r2
 8002c18:	d10d      	bne.n	8002c36 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002c1a:	697b      	ldr	r3, [r7, #20]
 8002c1c:	4a24      	ldr	r2, [pc, #144]	; (8002cb0 <TIM_OC3_SetConfig+0xf4>)
 8002c1e:	4013      	ands	r3, r2
 8002c20:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002c22:	683b      	ldr	r3, [r7, #0]
 8002c24:	68db      	ldr	r3, [r3, #12]
 8002c26:	021b      	lsls	r3, r3, #8
 8002c28:	697a      	ldr	r2, [r7, #20]
 8002c2a:	4313      	orrs	r3, r2
 8002c2c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002c2e:	697b      	ldr	r3, [r7, #20]
 8002c30:	4a20      	ldr	r2, [pc, #128]	; (8002cb4 <TIM_OC3_SetConfig+0xf8>)
 8002c32:	4013      	ands	r3, r2
 8002c34:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	4a1c      	ldr	r2, [pc, #112]	; (8002cac <TIM_OC3_SetConfig+0xf0>)
 8002c3a:	4293      	cmp	r3, r2
 8002c3c:	d00b      	beq.n	8002c56 <TIM_OC3_SetConfig+0x9a>
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	4a1d      	ldr	r2, [pc, #116]	; (8002cb8 <TIM_OC3_SetConfig+0xfc>)
 8002c42:	4293      	cmp	r3, r2
 8002c44:	d007      	beq.n	8002c56 <TIM_OC3_SetConfig+0x9a>
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	4a1c      	ldr	r2, [pc, #112]	; (8002cbc <TIM_OC3_SetConfig+0x100>)
 8002c4a:	4293      	cmp	r3, r2
 8002c4c:	d003      	beq.n	8002c56 <TIM_OC3_SetConfig+0x9a>
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	4a1b      	ldr	r2, [pc, #108]	; (8002cc0 <TIM_OC3_SetConfig+0x104>)
 8002c52:	4293      	cmp	r3, r2
 8002c54:	d113      	bne.n	8002c7e <TIM_OC3_SetConfig+0xc2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002c56:	693b      	ldr	r3, [r7, #16]
 8002c58:	4a1a      	ldr	r2, [pc, #104]	; (8002cc4 <TIM_OC3_SetConfig+0x108>)
 8002c5a:	4013      	ands	r3, r2
 8002c5c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002c5e:	693b      	ldr	r3, [r7, #16]
 8002c60:	4a19      	ldr	r2, [pc, #100]	; (8002cc8 <TIM_OC3_SetConfig+0x10c>)
 8002c62:	4013      	ands	r3, r2
 8002c64:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002c66:	683b      	ldr	r3, [r7, #0]
 8002c68:	695b      	ldr	r3, [r3, #20]
 8002c6a:	011b      	lsls	r3, r3, #4
 8002c6c:	693a      	ldr	r2, [r7, #16]
 8002c6e:	4313      	orrs	r3, r2
 8002c70:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002c72:	683b      	ldr	r3, [r7, #0]
 8002c74:	699b      	ldr	r3, [r3, #24]
 8002c76:	011b      	lsls	r3, r3, #4
 8002c78:	693a      	ldr	r2, [r7, #16]
 8002c7a:	4313      	orrs	r3, r2
 8002c7c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	693a      	ldr	r2, [r7, #16]
 8002c82:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	68fa      	ldr	r2, [r7, #12]
 8002c88:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002c8a:	683b      	ldr	r3, [r7, #0]
 8002c8c:	685a      	ldr	r2, [r3, #4]
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	697a      	ldr	r2, [r7, #20]
 8002c96:	621a      	str	r2, [r3, #32]
}
 8002c98:	46c0      	nop			; (mov r8, r8)
 8002c9a:	46bd      	mov	sp, r7
 8002c9c:	b006      	add	sp, #24
 8002c9e:	bd80      	pop	{r7, pc}
 8002ca0:	fffffeff 	.word	0xfffffeff
 8002ca4:	fffeff8f 	.word	0xfffeff8f
 8002ca8:	fffffdff 	.word	0xfffffdff
 8002cac:	40012c00 	.word	0x40012c00
 8002cb0:	fffff7ff 	.word	0xfffff7ff
 8002cb4:	fffffbff 	.word	0xfffffbff
 8002cb8:	40014000 	.word	0x40014000
 8002cbc:	40014400 	.word	0x40014400
 8002cc0:	40014800 	.word	0x40014800
 8002cc4:	ffffefff 	.word	0xffffefff
 8002cc8:	ffffdfff 	.word	0xffffdfff

08002ccc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002ccc:	b580      	push	{r7, lr}
 8002cce:	b086      	sub	sp, #24
 8002cd0:	af00      	add	r7, sp, #0
 8002cd2:	6078      	str	r0, [r7, #4]
 8002cd4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	6a1b      	ldr	r3, [r3, #32]
 8002cda:	4a28      	ldr	r2, [pc, #160]	; (8002d7c <TIM_OC4_SetConfig+0xb0>)
 8002cdc:	401a      	ands	r2, r3
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	6a1b      	ldr	r3, [r3, #32]
 8002ce6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	685b      	ldr	r3, [r3, #4]
 8002cec:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	69db      	ldr	r3, [r3, #28]
 8002cf2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	4a22      	ldr	r2, [pc, #136]	; (8002d80 <TIM_OC4_SetConfig+0xb4>)
 8002cf8:	4013      	ands	r3, r2
 8002cfa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	4a21      	ldr	r2, [pc, #132]	; (8002d84 <TIM_OC4_SetConfig+0xb8>)
 8002d00:	4013      	ands	r3, r2
 8002d02:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002d04:	683b      	ldr	r3, [r7, #0]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	021b      	lsls	r3, r3, #8
 8002d0a:	68fa      	ldr	r2, [r7, #12]
 8002d0c:	4313      	orrs	r3, r2
 8002d0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002d10:	693b      	ldr	r3, [r7, #16]
 8002d12:	4a1d      	ldr	r2, [pc, #116]	; (8002d88 <TIM_OC4_SetConfig+0xbc>)
 8002d14:	4013      	ands	r3, r2
 8002d16:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002d18:	683b      	ldr	r3, [r7, #0]
 8002d1a:	689b      	ldr	r3, [r3, #8]
 8002d1c:	031b      	lsls	r3, r3, #12
 8002d1e:	693a      	ldr	r2, [r7, #16]
 8002d20:	4313      	orrs	r3, r2
 8002d22:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	4a19      	ldr	r2, [pc, #100]	; (8002d8c <TIM_OC4_SetConfig+0xc0>)
 8002d28:	4293      	cmp	r3, r2
 8002d2a:	d00b      	beq.n	8002d44 <TIM_OC4_SetConfig+0x78>
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	4a18      	ldr	r2, [pc, #96]	; (8002d90 <TIM_OC4_SetConfig+0xc4>)
 8002d30:	4293      	cmp	r3, r2
 8002d32:	d007      	beq.n	8002d44 <TIM_OC4_SetConfig+0x78>
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	4a17      	ldr	r2, [pc, #92]	; (8002d94 <TIM_OC4_SetConfig+0xc8>)
 8002d38:	4293      	cmp	r3, r2
 8002d3a:	d003      	beq.n	8002d44 <TIM_OC4_SetConfig+0x78>
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	4a16      	ldr	r2, [pc, #88]	; (8002d98 <TIM_OC4_SetConfig+0xcc>)
 8002d40:	4293      	cmp	r3, r2
 8002d42:	d109      	bne.n	8002d58 <TIM_OC4_SetConfig+0x8c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002d44:	697b      	ldr	r3, [r7, #20]
 8002d46:	4a15      	ldr	r2, [pc, #84]	; (8002d9c <TIM_OC4_SetConfig+0xd0>)
 8002d48:	4013      	ands	r3, r2
 8002d4a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002d4c:	683b      	ldr	r3, [r7, #0]
 8002d4e:	695b      	ldr	r3, [r3, #20]
 8002d50:	019b      	lsls	r3, r3, #6
 8002d52:	697a      	ldr	r2, [r7, #20]
 8002d54:	4313      	orrs	r3, r2
 8002d56:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	697a      	ldr	r2, [r7, #20]
 8002d5c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	68fa      	ldr	r2, [r7, #12]
 8002d62:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002d64:	683b      	ldr	r3, [r7, #0]
 8002d66:	685a      	ldr	r2, [r3, #4]
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	693a      	ldr	r2, [r7, #16]
 8002d70:	621a      	str	r2, [r3, #32]
}
 8002d72:	46c0      	nop			; (mov r8, r8)
 8002d74:	46bd      	mov	sp, r7
 8002d76:	b006      	add	sp, #24
 8002d78:	bd80      	pop	{r7, pc}
 8002d7a:	46c0      	nop			; (mov r8, r8)
 8002d7c:	ffffefff 	.word	0xffffefff
 8002d80:	feff8fff 	.word	0xfeff8fff
 8002d84:	fffffcff 	.word	0xfffffcff
 8002d88:	ffffdfff 	.word	0xffffdfff
 8002d8c:	40012c00 	.word	0x40012c00
 8002d90:	40014000 	.word	0x40014000
 8002d94:	40014400 	.word	0x40014400
 8002d98:	40014800 	.word	0x40014800
 8002d9c:	ffffbfff 	.word	0xffffbfff

08002da0 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8002da0:	b580      	push	{r7, lr}
 8002da2:	b086      	sub	sp, #24
 8002da4:	af00      	add	r7, sp, #0
 8002da6:	6078      	str	r0, [r7, #4]
 8002da8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	6a1b      	ldr	r3, [r3, #32]
 8002dae:	4a25      	ldr	r2, [pc, #148]	; (8002e44 <TIM_OC5_SetConfig+0xa4>)
 8002db0:	401a      	ands	r2, r3
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	6a1b      	ldr	r3, [r3, #32]
 8002dba:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	685b      	ldr	r3, [r3, #4]
 8002dc0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002dc6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	4a1f      	ldr	r2, [pc, #124]	; (8002e48 <TIM_OC5_SetConfig+0xa8>)
 8002dcc:	4013      	ands	r3, r2
 8002dce:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002dd0:	683b      	ldr	r3, [r7, #0]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	68fa      	ldr	r2, [r7, #12]
 8002dd6:	4313      	orrs	r3, r2
 8002dd8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8002dda:	693b      	ldr	r3, [r7, #16]
 8002ddc:	4a1b      	ldr	r2, [pc, #108]	; (8002e4c <TIM_OC5_SetConfig+0xac>)
 8002dde:	4013      	ands	r3, r2
 8002de0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8002de2:	683b      	ldr	r3, [r7, #0]
 8002de4:	689b      	ldr	r3, [r3, #8]
 8002de6:	041b      	lsls	r3, r3, #16
 8002de8:	693a      	ldr	r2, [r7, #16]
 8002dea:	4313      	orrs	r3, r2
 8002dec:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	4a17      	ldr	r2, [pc, #92]	; (8002e50 <TIM_OC5_SetConfig+0xb0>)
 8002df2:	4293      	cmp	r3, r2
 8002df4:	d00b      	beq.n	8002e0e <TIM_OC5_SetConfig+0x6e>
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	4a16      	ldr	r2, [pc, #88]	; (8002e54 <TIM_OC5_SetConfig+0xb4>)
 8002dfa:	4293      	cmp	r3, r2
 8002dfc:	d007      	beq.n	8002e0e <TIM_OC5_SetConfig+0x6e>
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	4a15      	ldr	r2, [pc, #84]	; (8002e58 <TIM_OC5_SetConfig+0xb8>)
 8002e02:	4293      	cmp	r3, r2
 8002e04:	d003      	beq.n	8002e0e <TIM_OC5_SetConfig+0x6e>
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	4a14      	ldr	r2, [pc, #80]	; (8002e5c <TIM_OC5_SetConfig+0xbc>)
 8002e0a:	4293      	cmp	r3, r2
 8002e0c:	d109      	bne.n	8002e22 <TIM_OC5_SetConfig+0x82>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8002e0e:	697b      	ldr	r3, [r7, #20]
 8002e10:	4a0c      	ldr	r2, [pc, #48]	; (8002e44 <TIM_OC5_SetConfig+0xa4>)
 8002e12:	4013      	ands	r3, r2
 8002e14:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8002e16:	683b      	ldr	r3, [r7, #0]
 8002e18:	695b      	ldr	r3, [r3, #20]
 8002e1a:	021b      	lsls	r3, r3, #8
 8002e1c:	697a      	ldr	r2, [r7, #20]
 8002e1e:	4313      	orrs	r3, r2
 8002e20:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	697a      	ldr	r2, [r7, #20]
 8002e26:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	68fa      	ldr	r2, [r7, #12]
 8002e2c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8002e2e:	683b      	ldr	r3, [r7, #0]
 8002e30:	685a      	ldr	r2, [r3, #4]
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	693a      	ldr	r2, [r7, #16]
 8002e3a:	621a      	str	r2, [r3, #32]
}
 8002e3c:	46c0      	nop			; (mov r8, r8)
 8002e3e:	46bd      	mov	sp, r7
 8002e40:	b006      	add	sp, #24
 8002e42:	bd80      	pop	{r7, pc}
 8002e44:	fffeffff 	.word	0xfffeffff
 8002e48:	fffeff8f 	.word	0xfffeff8f
 8002e4c:	fffdffff 	.word	0xfffdffff
 8002e50:	40012c00 	.word	0x40012c00
 8002e54:	40014000 	.word	0x40014000
 8002e58:	40014400 	.word	0x40014400
 8002e5c:	40014800 	.word	0x40014800

08002e60 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8002e60:	b580      	push	{r7, lr}
 8002e62:	b086      	sub	sp, #24
 8002e64:	af00      	add	r7, sp, #0
 8002e66:	6078      	str	r0, [r7, #4]
 8002e68:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	6a1b      	ldr	r3, [r3, #32]
 8002e6e:	4a26      	ldr	r2, [pc, #152]	; (8002f08 <TIM_OC6_SetConfig+0xa8>)
 8002e70:	401a      	ands	r2, r3
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	6a1b      	ldr	r3, [r3, #32]
 8002e7a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	685b      	ldr	r3, [r3, #4]
 8002e80:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	4a20      	ldr	r2, [pc, #128]	; (8002f0c <TIM_OC6_SetConfig+0xac>)
 8002e8c:	4013      	ands	r3, r2
 8002e8e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002e90:	683b      	ldr	r3, [r7, #0]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	021b      	lsls	r3, r3, #8
 8002e96:	68fa      	ldr	r2, [r7, #12]
 8002e98:	4313      	orrs	r3, r2
 8002e9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8002e9c:	693b      	ldr	r3, [r7, #16]
 8002e9e:	4a1c      	ldr	r2, [pc, #112]	; (8002f10 <TIM_OC6_SetConfig+0xb0>)
 8002ea0:	4013      	ands	r3, r2
 8002ea2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8002ea4:	683b      	ldr	r3, [r7, #0]
 8002ea6:	689b      	ldr	r3, [r3, #8]
 8002ea8:	051b      	lsls	r3, r3, #20
 8002eaa:	693a      	ldr	r2, [r7, #16]
 8002eac:	4313      	orrs	r3, r2
 8002eae:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	4a18      	ldr	r2, [pc, #96]	; (8002f14 <TIM_OC6_SetConfig+0xb4>)
 8002eb4:	4293      	cmp	r3, r2
 8002eb6:	d00b      	beq.n	8002ed0 <TIM_OC6_SetConfig+0x70>
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	4a17      	ldr	r2, [pc, #92]	; (8002f18 <TIM_OC6_SetConfig+0xb8>)
 8002ebc:	4293      	cmp	r3, r2
 8002ebe:	d007      	beq.n	8002ed0 <TIM_OC6_SetConfig+0x70>
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	4a16      	ldr	r2, [pc, #88]	; (8002f1c <TIM_OC6_SetConfig+0xbc>)
 8002ec4:	4293      	cmp	r3, r2
 8002ec6:	d003      	beq.n	8002ed0 <TIM_OC6_SetConfig+0x70>
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	4a15      	ldr	r2, [pc, #84]	; (8002f20 <TIM_OC6_SetConfig+0xc0>)
 8002ecc:	4293      	cmp	r3, r2
 8002ece:	d109      	bne.n	8002ee4 <TIM_OC6_SetConfig+0x84>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8002ed0:	697b      	ldr	r3, [r7, #20]
 8002ed2:	4a14      	ldr	r2, [pc, #80]	; (8002f24 <TIM_OC6_SetConfig+0xc4>)
 8002ed4:	4013      	ands	r3, r2
 8002ed6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8002ed8:	683b      	ldr	r3, [r7, #0]
 8002eda:	695b      	ldr	r3, [r3, #20]
 8002edc:	029b      	lsls	r3, r3, #10
 8002ede:	697a      	ldr	r2, [r7, #20]
 8002ee0:	4313      	orrs	r3, r2
 8002ee2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	697a      	ldr	r2, [r7, #20]
 8002ee8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	68fa      	ldr	r2, [r7, #12]
 8002eee:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8002ef0:	683b      	ldr	r3, [r7, #0]
 8002ef2:	685a      	ldr	r2, [r3, #4]
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	693a      	ldr	r2, [r7, #16]
 8002efc:	621a      	str	r2, [r3, #32]
}
 8002efe:	46c0      	nop			; (mov r8, r8)
 8002f00:	46bd      	mov	sp, r7
 8002f02:	b006      	add	sp, #24
 8002f04:	bd80      	pop	{r7, pc}
 8002f06:	46c0      	nop			; (mov r8, r8)
 8002f08:	ffefffff 	.word	0xffefffff
 8002f0c:	feff8fff 	.word	0xfeff8fff
 8002f10:	ffdfffff 	.word	0xffdfffff
 8002f14:	40012c00 	.word	0x40012c00
 8002f18:	40014000 	.word	0x40014000
 8002f1c:	40014400 	.word	0x40014400
 8002f20:	40014800 	.word	0x40014800
 8002f24:	fffbffff 	.word	0xfffbffff

08002f28 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002f28:	b580      	push	{r7, lr}
 8002f2a:	b086      	sub	sp, #24
 8002f2c:	af00      	add	r7, sp, #0
 8002f2e:	60f8      	str	r0, [r7, #12]
 8002f30:	60b9      	str	r1, [r7, #8]
 8002f32:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002f34:	68bb      	ldr	r3, [r7, #8]
 8002f36:	221f      	movs	r2, #31
 8002f38:	4013      	ands	r3, r2
 8002f3a:	2201      	movs	r2, #1
 8002f3c:	409a      	lsls	r2, r3
 8002f3e:	0013      	movs	r3, r2
 8002f40:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	6a1b      	ldr	r3, [r3, #32]
 8002f46:	697a      	ldr	r2, [r7, #20]
 8002f48:	43d2      	mvns	r2, r2
 8002f4a:	401a      	ands	r2, r3
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	6a1a      	ldr	r2, [r3, #32]
 8002f54:	68bb      	ldr	r3, [r7, #8]
 8002f56:	211f      	movs	r1, #31
 8002f58:	400b      	ands	r3, r1
 8002f5a:	6879      	ldr	r1, [r7, #4]
 8002f5c:	4099      	lsls	r1, r3
 8002f5e:	000b      	movs	r3, r1
 8002f60:	431a      	orrs	r2, r3
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	621a      	str	r2, [r3, #32]
}
 8002f66:	46c0      	nop			; (mov r8, r8)
 8002f68:	46bd      	mov	sp, r7
 8002f6a:	b006      	add	sp, #24
 8002f6c:	bd80      	pop	{r7, pc}
	...

08002f70 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002f70:	b580      	push	{r7, lr}
 8002f72:	b084      	sub	sp, #16
 8002f74:	af00      	add	r7, sp, #0
 8002f76:	6078      	str	r0, [r7, #4]
 8002f78:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	223c      	movs	r2, #60	; 0x3c
 8002f7e:	5c9b      	ldrb	r3, [r3, r2]
 8002f80:	2b01      	cmp	r3, #1
 8002f82:	d101      	bne.n	8002f88 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002f84:	2302      	movs	r3, #2
 8002f86:	e055      	b.n	8003034 <HAL_TIMEx_MasterConfigSynchronization+0xc4>
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	223c      	movs	r2, #60	; 0x3c
 8002f8c:	2101      	movs	r1, #1
 8002f8e:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	223d      	movs	r2, #61	; 0x3d
 8002f94:	2102      	movs	r1, #2
 8002f96:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	685b      	ldr	r3, [r3, #4]
 8002f9e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	689b      	ldr	r3, [r3, #8]
 8002fa6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	4a23      	ldr	r2, [pc, #140]	; (800303c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8002fae:	4293      	cmp	r3, r2
 8002fb0:	d108      	bne.n	8002fc4 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	4a22      	ldr	r2, [pc, #136]	; (8003040 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8002fb6:	4013      	ands	r3, r2
 8002fb8:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8002fba:	683b      	ldr	r3, [r7, #0]
 8002fbc:	685b      	ldr	r3, [r3, #4]
 8002fbe:	68fa      	ldr	r2, [r7, #12]
 8002fc0:	4313      	orrs	r3, r2
 8002fc2:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	2270      	movs	r2, #112	; 0x70
 8002fc8:	4393      	bics	r3, r2
 8002fca:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002fcc:	683b      	ldr	r3, [r7, #0]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	68fa      	ldr	r2, [r7, #12]
 8002fd2:	4313      	orrs	r3, r2
 8002fd4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	68fa      	ldr	r2, [r7, #12]
 8002fdc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	4a16      	ldr	r2, [pc, #88]	; (800303c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8002fe4:	4293      	cmp	r3, r2
 8002fe6:	d00f      	beq.n	8003008 <HAL_TIMEx_MasterConfigSynchronization+0x98>
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681a      	ldr	r2, [r3, #0]
 8002fec:	2380      	movs	r3, #128	; 0x80
 8002fee:	05db      	lsls	r3, r3, #23
 8002ff0:	429a      	cmp	r2, r3
 8002ff2:	d009      	beq.n	8003008 <HAL_TIMEx_MasterConfigSynchronization+0x98>
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	4a12      	ldr	r2, [pc, #72]	; (8003044 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8002ffa:	4293      	cmp	r3, r2
 8002ffc:	d004      	beq.n	8003008 <HAL_TIMEx_MasterConfigSynchronization+0x98>
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	4a11      	ldr	r2, [pc, #68]	; (8003048 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8003004:	4293      	cmp	r3, r2
 8003006:	d10c      	bne.n	8003022 <HAL_TIMEx_MasterConfigSynchronization+0xb2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003008:	68bb      	ldr	r3, [r7, #8]
 800300a:	2280      	movs	r2, #128	; 0x80
 800300c:	4393      	bics	r3, r2
 800300e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003010:	683b      	ldr	r3, [r7, #0]
 8003012:	689b      	ldr	r3, [r3, #8]
 8003014:	68ba      	ldr	r2, [r7, #8]
 8003016:	4313      	orrs	r3, r2
 8003018:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	68ba      	ldr	r2, [r7, #8]
 8003020:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	223d      	movs	r2, #61	; 0x3d
 8003026:	2101      	movs	r1, #1
 8003028:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	223c      	movs	r2, #60	; 0x3c
 800302e:	2100      	movs	r1, #0
 8003030:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003032:	2300      	movs	r3, #0
}
 8003034:	0018      	movs	r0, r3
 8003036:	46bd      	mov	sp, r7
 8003038:	b004      	add	sp, #16
 800303a:	bd80      	pop	{r7, pc}
 800303c:	40012c00 	.word	0x40012c00
 8003040:	ff0fffff 	.word	0xff0fffff
 8003044:	40000400 	.word	0x40000400
 8003048:	40014000 	.word	0x40014000

0800304c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800304c:	b580      	push	{r7, lr}
 800304e:	b084      	sub	sp, #16
 8003050:	af00      	add	r7, sp, #0
 8003052:	6078      	str	r0, [r7, #4]
 8003054:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8003056:	2300      	movs	r3, #0
 8003058:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	223c      	movs	r2, #60	; 0x3c
 800305e:	5c9b      	ldrb	r3, [r3, r2]
 8003060:	2b01      	cmp	r3, #1
 8003062:	d101      	bne.n	8003068 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8003064:	2302      	movs	r3, #2
 8003066:	e079      	b.n	800315c <HAL_TIMEx_ConfigBreakDeadTime+0x110>
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	223c      	movs	r2, #60	; 0x3c
 800306c:	2101      	movs	r1, #1
 800306e:	5499      	strb	r1, [r3, r2]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	22ff      	movs	r2, #255	; 0xff
 8003074:	4393      	bics	r3, r2
 8003076:	001a      	movs	r2, r3
 8003078:	683b      	ldr	r3, [r7, #0]
 800307a:	68db      	ldr	r3, [r3, #12]
 800307c:	4313      	orrs	r3, r2
 800307e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	4a38      	ldr	r2, [pc, #224]	; (8003164 <HAL_TIMEx_ConfigBreakDeadTime+0x118>)
 8003084:	401a      	ands	r2, r3
 8003086:	683b      	ldr	r3, [r7, #0]
 8003088:	689b      	ldr	r3, [r3, #8]
 800308a:	4313      	orrs	r3, r2
 800308c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	4a35      	ldr	r2, [pc, #212]	; (8003168 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 8003092:	401a      	ands	r2, r3
 8003094:	683b      	ldr	r3, [r7, #0]
 8003096:	685b      	ldr	r3, [r3, #4]
 8003098:	4313      	orrs	r3, r2
 800309a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	4a33      	ldr	r2, [pc, #204]	; (800316c <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 80030a0:	401a      	ands	r2, r3
 80030a2:	683b      	ldr	r3, [r7, #0]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	4313      	orrs	r3, r2
 80030a8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	4a30      	ldr	r2, [pc, #192]	; (8003170 <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 80030ae:	401a      	ands	r2, r3
 80030b0:	683b      	ldr	r3, [r7, #0]
 80030b2:	691b      	ldr	r3, [r3, #16]
 80030b4:	4313      	orrs	r3, r2
 80030b6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	4a2e      	ldr	r2, [pc, #184]	; (8003174 <HAL_TIMEx_ConfigBreakDeadTime+0x128>)
 80030bc:	401a      	ands	r2, r3
 80030be:	683b      	ldr	r3, [r7, #0]
 80030c0:	695b      	ldr	r3, [r3, #20]
 80030c2:	4313      	orrs	r3, r2
 80030c4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	4a2b      	ldr	r2, [pc, #172]	; (8003178 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>)
 80030ca:	401a      	ands	r2, r3
 80030cc:	683b      	ldr	r3, [r7, #0]
 80030ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030d0:	4313      	orrs	r3, r2
 80030d2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	4a29      	ldr	r2, [pc, #164]	; (800317c <HAL_TIMEx_ConfigBreakDeadTime+0x130>)
 80030d8:	401a      	ands	r2, r3
 80030da:	683b      	ldr	r3, [r7, #0]
 80030dc:	699b      	ldr	r3, [r3, #24]
 80030de:	041b      	lsls	r3, r3, #16
 80030e0:	4313      	orrs	r3, r2
 80030e2:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	4a25      	ldr	r2, [pc, #148]	; (8003180 <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 80030ea:	4293      	cmp	r3, r2
 80030ec:	d106      	bne.n	80030fc <HAL_TIMEx_ConfigBreakDeadTime+0xb0>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	4a24      	ldr	r2, [pc, #144]	; (8003184 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 80030f2:	401a      	ands	r2, r3
 80030f4:	683b      	ldr	r3, [r7, #0]
 80030f6:	69db      	ldr	r3, [r3, #28]
 80030f8:	4313      	orrs	r3, r2
 80030fa:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	4a1f      	ldr	r2, [pc, #124]	; (8003180 <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 8003102:	4293      	cmp	r3, r2
 8003104:	d121      	bne.n	800314a <HAL_TIMEx_ConfigBreakDeadTime+0xfe>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	4a1f      	ldr	r2, [pc, #124]	; (8003188 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 800310a:	401a      	ands	r2, r3
 800310c:	683b      	ldr	r3, [r7, #0]
 800310e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003110:	051b      	lsls	r3, r3, #20
 8003112:	4313      	orrs	r3, r2
 8003114:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	4a1c      	ldr	r2, [pc, #112]	; (800318c <HAL_TIMEx_ConfigBreakDeadTime+0x140>)
 800311a:	401a      	ands	r2, r3
 800311c:	683b      	ldr	r3, [r7, #0]
 800311e:	6a1b      	ldr	r3, [r3, #32]
 8003120:	4313      	orrs	r3, r2
 8003122:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	4a1a      	ldr	r2, [pc, #104]	; (8003190 <HAL_TIMEx_ConfigBreakDeadTime+0x144>)
 8003128:	401a      	ands	r2, r3
 800312a:	683b      	ldr	r3, [r7, #0]
 800312c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800312e:	4313      	orrs	r3, r2
 8003130:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	4a12      	ldr	r2, [pc, #72]	; (8003180 <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 8003138:	4293      	cmp	r3, r2
 800313a:	d106      	bne.n	800314a <HAL_TIMEx_ConfigBreakDeadTime+0xfe>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	4a15      	ldr	r2, [pc, #84]	; (8003194 <HAL_TIMEx_ConfigBreakDeadTime+0x148>)
 8003140:	401a      	ands	r2, r3
 8003142:	683b      	ldr	r3, [r7, #0]
 8003144:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003146:	4313      	orrs	r3, r2
 8003148:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	68fa      	ldr	r2, [r7, #12]
 8003150:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	223c      	movs	r2, #60	; 0x3c
 8003156:	2100      	movs	r1, #0
 8003158:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800315a:	2300      	movs	r3, #0
}
 800315c:	0018      	movs	r0, r3
 800315e:	46bd      	mov	sp, r7
 8003160:	b004      	add	sp, #16
 8003162:	bd80      	pop	{r7, pc}
 8003164:	fffffcff 	.word	0xfffffcff
 8003168:	fffffbff 	.word	0xfffffbff
 800316c:	fffff7ff 	.word	0xfffff7ff
 8003170:	ffffefff 	.word	0xffffefff
 8003174:	ffffdfff 	.word	0xffffdfff
 8003178:	ffffbfff 	.word	0xffffbfff
 800317c:	fff0ffff 	.word	0xfff0ffff
 8003180:	40012c00 	.word	0x40012c00
 8003184:	efffffff 	.word	0xefffffff
 8003188:	ff0fffff 	.word	0xff0fffff
 800318c:	feffffff 	.word	0xfeffffff
 8003190:	fdffffff 	.word	0xfdffffff
 8003194:	dfffffff 	.word	0xdfffffff

08003198 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003198:	b580      	push	{r7, lr}
 800319a:	b082      	sub	sp, #8
 800319c:	af00      	add	r7, sp, #0
 800319e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d101      	bne.n	80031aa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80031a6:	2301      	movs	r3, #1
 80031a8:	e046      	b.n	8003238 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	2288      	movs	r2, #136	; 0x88
 80031ae:	589b      	ldr	r3, [r3, r2]
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d107      	bne.n	80031c4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	2284      	movs	r2, #132	; 0x84
 80031b8:	2100      	movs	r1, #0
 80031ba:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	0018      	movs	r0, r3
 80031c0:	f7fd fe52 	bl	8000e68 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	2288      	movs	r2, #136	; 0x88
 80031c8:	2124      	movs	r1, #36	; 0x24
 80031ca:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	681a      	ldr	r2, [r3, #0]
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	2101      	movs	r1, #1
 80031d8:	438a      	bics	r2, r1
 80031da:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	0018      	movs	r0, r3
 80031e0:	f000 f830 	bl	8003244 <UART_SetConfig>
 80031e4:	0003      	movs	r3, r0
 80031e6:	2b01      	cmp	r3, #1
 80031e8:	d101      	bne.n	80031ee <HAL_UART_Init+0x56>
  {
    return HAL_ERROR;
 80031ea:	2301      	movs	r3, #1
 80031ec:	e024      	b.n	8003238 <HAL_UART_Init+0xa0>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d003      	beq.n	80031fe <HAL_UART_Init+0x66>
  {
    UART_AdvFeatureConfig(huart);
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	0018      	movs	r0, r3
 80031fa:	f000 fae1 	bl	80037c0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	685a      	ldr	r2, [r3, #4]
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	490d      	ldr	r1, [pc, #52]	; (8003240 <HAL_UART_Init+0xa8>)
 800320a:	400a      	ands	r2, r1
 800320c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	689a      	ldr	r2, [r3, #8]
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	212a      	movs	r1, #42	; 0x2a
 800321a:	438a      	bics	r2, r1
 800321c:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	681a      	ldr	r2, [r3, #0]
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	2101      	movs	r1, #1
 800322a:	430a      	orrs	r2, r1
 800322c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	0018      	movs	r0, r3
 8003232:	f000 fb79 	bl	8003928 <UART_CheckIdleState>
 8003236:	0003      	movs	r3, r0
}
 8003238:	0018      	movs	r0, r3
 800323a:	46bd      	mov	sp, r7
 800323c:	b002      	add	sp, #8
 800323e:	bd80      	pop	{r7, pc}
 8003240:	ffffb7ff 	.word	0xffffb7ff

08003244 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003244:	b5b0      	push	{r4, r5, r7, lr}
 8003246:	b090      	sub	sp, #64	; 0x40
 8003248:	af00      	add	r7, sp, #0
 800324a:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800324c:	231a      	movs	r3, #26
 800324e:	2220      	movs	r2, #32
 8003250:	189b      	adds	r3, r3, r2
 8003252:	19db      	adds	r3, r3, r7
 8003254:	2200      	movs	r2, #0
 8003256:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003258:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800325a:	689a      	ldr	r2, [r3, #8]
 800325c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800325e:	691b      	ldr	r3, [r3, #16]
 8003260:	431a      	orrs	r2, r3
 8003262:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003264:	695b      	ldr	r3, [r3, #20]
 8003266:	431a      	orrs	r2, r3
 8003268:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800326a:	69db      	ldr	r3, [r3, #28]
 800326c:	4313      	orrs	r3, r2
 800326e:	63fb      	str	r3, [r7, #60]	; 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003270:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	4aaf      	ldr	r2, [pc, #700]	; (8003534 <UART_SetConfig+0x2f0>)
 8003278:	4013      	ands	r3, r2
 800327a:	0019      	movs	r1, r3
 800327c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800327e:	681a      	ldr	r2, [r3, #0]
 8003280:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003282:	430b      	orrs	r3, r1
 8003284:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003286:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	685b      	ldr	r3, [r3, #4]
 800328c:	4aaa      	ldr	r2, [pc, #680]	; (8003538 <UART_SetConfig+0x2f4>)
 800328e:	4013      	ands	r3, r2
 8003290:	0018      	movs	r0, r3
 8003292:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003294:	68d9      	ldr	r1, [r3, #12]
 8003296:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003298:	681a      	ldr	r2, [r3, #0]
 800329a:	0003      	movs	r3, r0
 800329c:	430b      	orrs	r3, r1
 800329e:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80032a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032a2:	699b      	ldr	r3, [r3, #24]
 80032a4:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80032a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	4aa4      	ldr	r2, [pc, #656]	; (800353c <UART_SetConfig+0x2f8>)
 80032ac:	4293      	cmp	r3, r2
 80032ae:	d004      	beq.n	80032ba <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80032b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032b2:	6a1b      	ldr	r3, [r3, #32]
 80032b4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80032b6:	4313      	orrs	r3, r2
 80032b8:	63fb      	str	r3, [r7, #60]	; 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80032ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	689b      	ldr	r3, [r3, #8]
 80032c0:	4a9f      	ldr	r2, [pc, #636]	; (8003540 <UART_SetConfig+0x2fc>)
 80032c2:	4013      	ands	r3, r2
 80032c4:	0019      	movs	r1, r3
 80032c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032c8:	681a      	ldr	r2, [r3, #0]
 80032ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80032cc:	430b      	orrs	r3, r1
 80032ce:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80032d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032d6:	220f      	movs	r2, #15
 80032d8:	4393      	bics	r3, r2
 80032da:	0018      	movs	r0, r3
 80032dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032de:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80032e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032e2:	681a      	ldr	r2, [r3, #0]
 80032e4:	0003      	movs	r3, r0
 80032e6:	430b      	orrs	r3, r1
 80032e8:	62d3      	str	r3, [r2, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80032ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	4a95      	ldr	r2, [pc, #596]	; (8003544 <UART_SetConfig+0x300>)
 80032f0:	4293      	cmp	r3, r2
 80032f2:	d131      	bne.n	8003358 <UART_SetConfig+0x114>
 80032f4:	4b94      	ldr	r3, [pc, #592]	; (8003548 <UART_SetConfig+0x304>)
 80032f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032f8:	2203      	movs	r2, #3
 80032fa:	4013      	ands	r3, r2
 80032fc:	2b03      	cmp	r3, #3
 80032fe:	d01d      	beq.n	800333c <UART_SetConfig+0xf8>
 8003300:	d823      	bhi.n	800334a <UART_SetConfig+0x106>
 8003302:	2b02      	cmp	r3, #2
 8003304:	d00c      	beq.n	8003320 <UART_SetConfig+0xdc>
 8003306:	d820      	bhi.n	800334a <UART_SetConfig+0x106>
 8003308:	2b00      	cmp	r3, #0
 800330a:	d002      	beq.n	8003312 <UART_SetConfig+0xce>
 800330c:	2b01      	cmp	r3, #1
 800330e:	d00e      	beq.n	800332e <UART_SetConfig+0xea>
 8003310:	e01b      	b.n	800334a <UART_SetConfig+0x106>
 8003312:	231b      	movs	r3, #27
 8003314:	2220      	movs	r2, #32
 8003316:	189b      	adds	r3, r3, r2
 8003318:	19db      	adds	r3, r3, r7
 800331a:	2200      	movs	r2, #0
 800331c:	701a      	strb	r2, [r3, #0]
 800331e:	e0b4      	b.n	800348a <UART_SetConfig+0x246>
 8003320:	231b      	movs	r3, #27
 8003322:	2220      	movs	r2, #32
 8003324:	189b      	adds	r3, r3, r2
 8003326:	19db      	adds	r3, r3, r7
 8003328:	2202      	movs	r2, #2
 800332a:	701a      	strb	r2, [r3, #0]
 800332c:	e0ad      	b.n	800348a <UART_SetConfig+0x246>
 800332e:	231b      	movs	r3, #27
 8003330:	2220      	movs	r2, #32
 8003332:	189b      	adds	r3, r3, r2
 8003334:	19db      	adds	r3, r3, r7
 8003336:	2204      	movs	r2, #4
 8003338:	701a      	strb	r2, [r3, #0]
 800333a:	e0a6      	b.n	800348a <UART_SetConfig+0x246>
 800333c:	231b      	movs	r3, #27
 800333e:	2220      	movs	r2, #32
 8003340:	189b      	adds	r3, r3, r2
 8003342:	19db      	adds	r3, r3, r7
 8003344:	2208      	movs	r2, #8
 8003346:	701a      	strb	r2, [r3, #0]
 8003348:	e09f      	b.n	800348a <UART_SetConfig+0x246>
 800334a:	231b      	movs	r3, #27
 800334c:	2220      	movs	r2, #32
 800334e:	189b      	adds	r3, r3, r2
 8003350:	19db      	adds	r3, r3, r7
 8003352:	2210      	movs	r2, #16
 8003354:	701a      	strb	r2, [r3, #0]
 8003356:	e098      	b.n	800348a <UART_SetConfig+0x246>
 8003358:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	4a7b      	ldr	r2, [pc, #492]	; (800354c <UART_SetConfig+0x308>)
 800335e:	4293      	cmp	r3, r2
 8003360:	d131      	bne.n	80033c6 <UART_SetConfig+0x182>
 8003362:	4b79      	ldr	r3, [pc, #484]	; (8003548 <UART_SetConfig+0x304>)
 8003364:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003366:	220c      	movs	r2, #12
 8003368:	4013      	ands	r3, r2
 800336a:	2b0c      	cmp	r3, #12
 800336c:	d01d      	beq.n	80033aa <UART_SetConfig+0x166>
 800336e:	d823      	bhi.n	80033b8 <UART_SetConfig+0x174>
 8003370:	2b08      	cmp	r3, #8
 8003372:	d00c      	beq.n	800338e <UART_SetConfig+0x14a>
 8003374:	d820      	bhi.n	80033b8 <UART_SetConfig+0x174>
 8003376:	2b00      	cmp	r3, #0
 8003378:	d002      	beq.n	8003380 <UART_SetConfig+0x13c>
 800337a:	2b04      	cmp	r3, #4
 800337c:	d00e      	beq.n	800339c <UART_SetConfig+0x158>
 800337e:	e01b      	b.n	80033b8 <UART_SetConfig+0x174>
 8003380:	231b      	movs	r3, #27
 8003382:	2220      	movs	r2, #32
 8003384:	189b      	adds	r3, r3, r2
 8003386:	19db      	adds	r3, r3, r7
 8003388:	2200      	movs	r2, #0
 800338a:	701a      	strb	r2, [r3, #0]
 800338c:	e07d      	b.n	800348a <UART_SetConfig+0x246>
 800338e:	231b      	movs	r3, #27
 8003390:	2220      	movs	r2, #32
 8003392:	189b      	adds	r3, r3, r2
 8003394:	19db      	adds	r3, r3, r7
 8003396:	2202      	movs	r2, #2
 8003398:	701a      	strb	r2, [r3, #0]
 800339a:	e076      	b.n	800348a <UART_SetConfig+0x246>
 800339c:	231b      	movs	r3, #27
 800339e:	2220      	movs	r2, #32
 80033a0:	189b      	adds	r3, r3, r2
 80033a2:	19db      	adds	r3, r3, r7
 80033a4:	2204      	movs	r2, #4
 80033a6:	701a      	strb	r2, [r3, #0]
 80033a8:	e06f      	b.n	800348a <UART_SetConfig+0x246>
 80033aa:	231b      	movs	r3, #27
 80033ac:	2220      	movs	r2, #32
 80033ae:	189b      	adds	r3, r3, r2
 80033b0:	19db      	adds	r3, r3, r7
 80033b2:	2208      	movs	r2, #8
 80033b4:	701a      	strb	r2, [r3, #0]
 80033b6:	e068      	b.n	800348a <UART_SetConfig+0x246>
 80033b8:	231b      	movs	r3, #27
 80033ba:	2220      	movs	r2, #32
 80033bc:	189b      	adds	r3, r3, r2
 80033be:	19db      	adds	r3, r3, r7
 80033c0:	2210      	movs	r2, #16
 80033c2:	701a      	strb	r2, [r3, #0]
 80033c4:	e061      	b.n	800348a <UART_SetConfig+0x246>
 80033c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	4a61      	ldr	r2, [pc, #388]	; (8003550 <UART_SetConfig+0x30c>)
 80033cc:	4293      	cmp	r3, r2
 80033ce:	d106      	bne.n	80033de <UART_SetConfig+0x19a>
 80033d0:	231b      	movs	r3, #27
 80033d2:	2220      	movs	r2, #32
 80033d4:	189b      	adds	r3, r3, r2
 80033d6:	19db      	adds	r3, r3, r7
 80033d8:	2200      	movs	r2, #0
 80033da:	701a      	strb	r2, [r3, #0]
 80033dc:	e055      	b.n	800348a <UART_SetConfig+0x246>
 80033de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	4a5c      	ldr	r2, [pc, #368]	; (8003554 <UART_SetConfig+0x310>)
 80033e4:	4293      	cmp	r3, r2
 80033e6:	d106      	bne.n	80033f6 <UART_SetConfig+0x1b2>
 80033e8:	231b      	movs	r3, #27
 80033ea:	2220      	movs	r2, #32
 80033ec:	189b      	adds	r3, r3, r2
 80033ee:	19db      	adds	r3, r3, r7
 80033f0:	2200      	movs	r2, #0
 80033f2:	701a      	strb	r2, [r3, #0]
 80033f4:	e049      	b.n	800348a <UART_SetConfig+0x246>
 80033f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	4a50      	ldr	r2, [pc, #320]	; (800353c <UART_SetConfig+0x2f8>)
 80033fc:	4293      	cmp	r3, r2
 80033fe:	d13e      	bne.n	800347e <UART_SetConfig+0x23a>
 8003400:	4b51      	ldr	r3, [pc, #324]	; (8003548 <UART_SetConfig+0x304>)
 8003402:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003404:	23c0      	movs	r3, #192	; 0xc0
 8003406:	011b      	lsls	r3, r3, #4
 8003408:	4013      	ands	r3, r2
 800340a:	22c0      	movs	r2, #192	; 0xc0
 800340c:	0112      	lsls	r2, r2, #4
 800340e:	4293      	cmp	r3, r2
 8003410:	d027      	beq.n	8003462 <UART_SetConfig+0x21e>
 8003412:	22c0      	movs	r2, #192	; 0xc0
 8003414:	0112      	lsls	r2, r2, #4
 8003416:	4293      	cmp	r3, r2
 8003418:	d82a      	bhi.n	8003470 <UART_SetConfig+0x22c>
 800341a:	2280      	movs	r2, #128	; 0x80
 800341c:	0112      	lsls	r2, r2, #4
 800341e:	4293      	cmp	r3, r2
 8003420:	d011      	beq.n	8003446 <UART_SetConfig+0x202>
 8003422:	2280      	movs	r2, #128	; 0x80
 8003424:	0112      	lsls	r2, r2, #4
 8003426:	4293      	cmp	r3, r2
 8003428:	d822      	bhi.n	8003470 <UART_SetConfig+0x22c>
 800342a:	2b00      	cmp	r3, #0
 800342c:	d004      	beq.n	8003438 <UART_SetConfig+0x1f4>
 800342e:	2280      	movs	r2, #128	; 0x80
 8003430:	00d2      	lsls	r2, r2, #3
 8003432:	4293      	cmp	r3, r2
 8003434:	d00e      	beq.n	8003454 <UART_SetConfig+0x210>
 8003436:	e01b      	b.n	8003470 <UART_SetConfig+0x22c>
 8003438:	231b      	movs	r3, #27
 800343a:	2220      	movs	r2, #32
 800343c:	189b      	adds	r3, r3, r2
 800343e:	19db      	adds	r3, r3, r7
 8003440:	2200      	movs	r2, #0
 8003442:	701a      	strb	r2, [r3, #0]
 8003444:	e021      	b.n	800348a <UART_SetConfig+0x246>
 8003446:	231b      	movs	r3, #27
 8003448:	2220      	movs	r2, #32
 800344a:	189b      	adds	r3, r3, r2
 800344c:	19db      	adds	r3, r3, r7
 800344e:	2202      	movs	r2, #2
 8003450:	701a      	strb	r2, [r3, #0]
 8003452:	e01a      	b.n	800348a <UART_SetConfig+0x246>
 8003454:	231b      	movs	r3, #27
 8003456:	2220      	movs	r2, #32
 8003458:	189b      	adds	r3, r3, r2
 800345a:	19db      	adds	r3, r3, r7
 800345c:	2204      	movs	r2, #4
 800345e:	701a      	strb	r2, [r3, #0]
 8003460:	e013      	b.n	800348a <UART_SetConfig+0x246>
 8003462:	231b      	movs	r3, #27
 8003464:	2220      	movs	r2, #32
 8003466:	189b      	adds	r3, r3, r2
 8003468:	19db      	adds	r3, r3, r7
 800346a:	2208      	movs	r2, #8
 800346c:	701a      	strb	r2, [r3, #0]
 800346e:	e00c      	b.n	800348a <UART_SetConfig+0x246>
 8003470:	231b      	movs	r3, #27
 8003472:	2220      	movs	r2, #32
 8003474:	189b      	adds	r3, r3, r2
 8003476:	19db      	adds	r3, r3, r7
 8003478:	2210      	movs	r2, #16
 800347a:	701a      	strb	r2, [r3, #0]
 800347c:	e005      	b.n	800348a <UART_SetConfig+0x246>
 800347e:	231b      	movs	r3, #27
 8003480:	2220      	movs	r2, #32
 8003482:	189b      	adds	r3, r3, r2
 8003484:	19db      	adds	r3, r3, r7
 8003486:	2210      	movs	r2, #16
 8003488:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800348a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	4a2b      	ldr	r2, [pc, #172]	; (800353c <UART_SetConfig+0x2f8>)
 8003490:	4293      	cmp	r3, r2
 8003492:	d000      	beq.n	8003496 <UART_SetConfig+0x252>
 8003494:	e0a9      	b.n	80035ea <UART_SetConfig+0x3a6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003496:	231b      	movs	r3, #27
 8003498:	2220      	movs	r2, #32
 800349a:	189b      	adds	r3, r3, r2
 800349c:	19db      	adds	r3, r3, r7
 800349e:	781b      	ldrb	r3, [r3, #0]
 80034a0:	2b08      	cmp	r3, #8
 80034a2:	d015      	beq.n	80034d0 <UART_SetConfig+0x28c>
 80034a4:	dc18      	bgt.n	80034d8 <UART_SetConfig+0x294>
 80034a6:	2b04      	cmp	r3, #4
 80034a8:	d00d      	beq.n	80034c6 <UART_SetConfig+0x282>
 80034aa:	dc15      	bgt.n	80034d8 <UART_SetConfig+0x294>
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d002      	beq.n	80034b6 <UART_SetConfig+0x272>
 80034b0:	2b02      	cmp	r3, #2
 80034b2:	d005      	beq.n	80034c0 <UART_SetConfig+0x27c>
 80034b4:	e010      	b.n	80034d8 <UART_SetConfig+0x294>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80034b6:	f7fe fd57 	bl	8001f68 <HAL_RCC_GetPCLK1Freq>
 80034ba:	0003      	movs	r3, r0
 80034bc:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80034be:	e014      	b.n	80034ea <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80034c0:	4b25      	ldr	r3, [pc, #148]	; (8003558 <UART_SetConfig+0x314>)
 80034c2:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80034c4:	e011      	b.n	80034ea <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80034c6:	f7fe fcc3 	bl	8001e50 <HAL_RCC_GetSysClockFreq>
 80034ca:	0003      	movs	r3, r0
 80034cc:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80034ce:	e00c      	b.n	80034ea <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80034d0:	2380      	movs	r3, #128	; 0x80
 80034d2:	021b      	lsls	r3, r3, #8
 80034d4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80034d6:	e008      	b.n	80034ea <UART_SetConfig+0x2a6>
      default:
        pclk = 0U;
 80034d8:	2300      	movs	r3, #0
 80034da:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 80034dc:	231a      	movs	r3, #26
 80034de:	2220      	movs	r2, #32
 80034e0:	189b      	adds	r3, r3, r2
 80034e2:	19db      	adds	r3, r3, r7
 80034e4:	2201      	movs	r2, #1
 80034e6:	701a      	strb	r2, [r3, #0]
        break;
 80034e8:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80034ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d100      	bne.n	80034f2 <UART_SetConfig+0x2ae>
 80034f0:	e14b      	b.n	800378a <UART_SetConfig+0x546>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80034f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034f4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80034f6:	4b19      	ldr	r3, [pc, #100]	; (800355c <UART_SetConfig+0x318>)
 80034f8:	0052      	lsls	r2, r2, #1
 80034fa:	5ad3      	ldrh	r3, [r2, r3]
 80034fc:	0019      	movs	r1, r3
 80034fe:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8003500:	f7fc fe00 	bl	8000104 <__udivsi3>
 8003504:	0003      	movs	r3, r0
 8003506:	62bb      	str	r3, [r7, #40]	; 0x28

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003508:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800350a:	685a      	ldr	r2, [r3, #4]
 800350c:	0013      	movs	r3, r2
 800350e:	005b      	lsls	r3, r3, #1
 8003510:	189b      	adds	r3, r3, r2
 8003512:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003514:	429a      	cmp	r2, r3
 8003516:	d305      	bcc.n	8003524 <UART_SetConfig+0x2e0>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8003518:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800351a:	685b      	ldr	r3, [r3, #4]
 800351c:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800351e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003520:	429a      	cmp	r2, r3
 8003522:	d91d      	bls.n	8003560 <UART_SetConfig+0x31c>
      {
        ret = HAL_ERROR;
 8003524:	231a      	movs	r3, #26
 8003526:	2220      	movs	r2, #32
 8003528:	189b      	adds	r3, r3, r2
 800352a:	19db      	adds	r3, r3, r7
 800352c:	2201      	movs	r2, #1
 800352e:	701a      	strb	r2, [r3, #0]
 8003530:	e12b      	b.n	800378a <UART_SetConfig+0x546>
 8003532:	46c0      	nop			; (mov r8, r8)
 8003534:	cfff69f3 	.word	0xcfff69f3
 8003538:	ffffcfff 	.word	0xffffcfff
 800353c:	40008000 	.word	0x40008000
 8003540:	11fff4ff 	.word	0x11fff4ff
 8003544:	40013800 	.word	0x40013800
 8003548:	40021000 	.word	0x40021000
 800354c:	40004400 	.word	0x40004400
 8003550:	40004800 	.word	0x40004800
 8003554:	40004c00 	.word	0x40004c00
 8003558:	00f42400 	.word	0x00f42400
 800355c:	08003eac 	.word	0x08003eac
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003560:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003562:	61bb      	str	r3, [r7, #24]
 8003564:	2300      	movs	r3, #0
 8003566:	61fb      	str	r3, [r7, #28]
 8003568:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800356a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800356c:	4b92      	ldr	r3, [pc, #584]	; (80037b8 <UART_SetConfig+0x574>)
 800356e:	0052      	lsls	r2, r2, #1
 8003570:	5ad3      	ldrh	r3, [r2, r3]
 8003572:	613b      	str	r3, [r7, #16]
 8003574:	2300      	movs	r3, #0
 8003576:	617b      	str	r3, [r7, #20]
 8003578:	693a      	ldr	r2, [r7, #16]
 800357a:	697b      	ldr	r3, [r7, #20]
 800357c:	69b8      	ldr	r0, [r7, #24]
 800357e:	69f9      	ldr	r1, [r7, #28]
 8003580:	f7fc ff36 	bl	80003f0 <__aeabi_uldivmod>
 8003584:	0002      	movs	r2, r0
 8003586:	000b      	movs	r3, r1
 8003588:	0e11      	lsrs	r1, r2, #24
 800358a:	021d      	lsls	r5, r3, #8
 800358c:	430d      	orrs	r5, r1
 800358e:	0214      	lsls	r4, r2, #8
 8003590:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003592:	685b      	ldr	r3, [r3, #4]
 8003594:	085b      	lsrs	r3, r3, #1
 8003596:	60bb      	str	r3, [r7, #8]
 8003598:	2300      	movs	r3, #0
 800359a:	60fb      	str	r3, [r7, #12]
 800359c:	68b8      	ldr	r0, [r7, #8]
 800359e:	68f9      	ldr	r1, [r7, #12]
 80035a0:	1900      	adds	r0, r0, r4
 80035a2:	4169      	adcs	r1, r5
 80035a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035a6:	685b      	ldr	r3, [r3, #4]
 80035a8:	603b      	str	r3, [r7, #0]
 80035aa:	2300      	movs	r3, #0
 80035ac:	607b      	str	r3, [r7, #4]
 80035ae:	683a      	ldr	r2, [r7, #0]
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	f7fc ff1d 	bl	80003f0 <__aeabi_uldivmod>
 80035b6:	0002      	movs	r2, r0
 80035b8:	000b      	movs	r3, r1
 80035ba:	0013      	movs	r3, r2
 80035bc:	633b      	str	r3, [r7, #48]	; 0x30
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80035be:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80035c0:	23c0      	movs	r3, #192	; 0xc0
 80035c2:	009b      	lsls	r3, r3, #2
 80035c4:	429a      	cmp	r2, r3
 80035c6:	d309      	bcc.n	80035dc <UART_SetConfig+0x398>
 80035c8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80035ca:	2380      	movs	r3, #128	; 0x80
 80035cc:	035b      	lsls	r3, r3, #13
 80035ce:	429a      	cmp	r2, r3
 80035d0:	d204      	bcs.n	80035dc <UART_SetConfig+0x398>
        {
          huart->Instance->BRR = usartdiv;
 80035d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80035d8:	60da      	str	r2, [r3, #12]
 80035da:	e0d6      	b.n	800378a <UART_SetConfig+0x546>
        }
        else
        {
          ret = HAL_ERROR;
 80035dc:	231a      	movs	r3, #26
 80035de:	2220      	movs	r2, #32
 80035e0:	189b      	adds	r3, r3, r2
 80035e2:	19db      	adds	r3, r3, r7
 80035e4:	2201      	movs	r2, #1
 80035e6:	701a      	strb	r2, [r3, #0]
 80035e8:	e0cf      	b.n	800378a <UART_SetConfig+0x546>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80035ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035ec:	69da      	ldr	r2, [r3, #28]
 80035ee:	2380      	movs	r3, #128	; 0x80
 80035f0:	021b      	lsls	r3, r3, #8
 80035f2:	429a      	cmp	r2, r3
 80035f4:	d000      	beq.n	80035f8 <UART_SetConfig+0x3b4>
 80035f6:	e070      	b.n	80036da <UART_SetConfig+0x496>
  {
    switch (clocksource)
 80035f8:	231b      	movs	r3, #27
 80035fa:	2220      	movs	r2, #32
 80035fc:	189b      	adds	r3, r3, r2
 80035fe:	19db      	adds	r3, r3, r7
 8003600:	781b      	ldrb	r3, [r3, #0]
 8003602:	2b08      	cmp	r3, #8
 8003604:	d015      	beq.n	8003632 <UART_SetConfig+0x3ee>
 8003606:	dc18      	bgt.n	800363a <UART_SetConfig+0x3f6>
 8003608:	2b04      	cmp	r3, #4
 800360a:	d00d      	beq.n	8003628 <UART_SetConfig+0x3e4>
 800360c:	dc15      	bgt.n	800363a <UART_SetConfig+0x3f6>
 800360e:	2b00      	cmp	r3, #0
 8003610:	d002      	beq.n	8003618 <UART_SetConfig+0x3d4>
 8003612:	2b02      	cmp	r3, #2
 8003614:	d005      	beq.n	8003622 <UART_SetConfig+0x3de>
 8003616:	e010      	b.n	800363a <UART_SetConfig+0x3f6>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003618:	f7fe fca6 	bl	8001f68 <HAL_RCC_GetPCLK1Freq>
 800361c:	0003      	movs	r3, r0
 800361e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003620:	e014      	b.n	800364c <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003622:	4b66      	ldr	r3, [pc, #408]	; (80037bc <UART_SetConfig+0x578>)
 8003624:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003626:	e011      	b.n	800364c <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003628:	f7fe fc12 	bl	8001e50 <HAL_RCC_GetSysClockFreq>
 800362c:	0003      	movs	r3, r0
 800362e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003630:	e00c      	b.n	800364c <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003632:	2380      	movs	r3, #128	; 0x80
 8003634:	021b      	lsls	r3, r3, #8
 8003636:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003638:	e008      	b.n	800364c <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 800363a:	2300      	movs	r3, #0
 800363c:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 800363e:	231a      	movs	r3, #26
 8003640:	2220      	movs	r2, #32
 8003642:	189b      	adds	r3, r3, r2
 8003644:	19db      	adds	r3, r3, r7
 8003646:	2201      	movs	r2, #1
 8003648:	701a      	strb	r2, [r3, #0]
        break;
 800364a:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800364c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800364e:	2b00      	cmp	r3, #0
 8003650:	d100      	bne.n	8003654 <UART_SetConfig+0x410>
 8003652:	e09a      	b.n	800378a <UART_SetConfig+0x546>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003654:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003656:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003658:	4b57      	ldr	r3, [pc, #348]	; (80037b8 <UART_SetConfig+0x574>)
 800365a:	0052      	lsls	r2, r2, #1
 800365c:	5ad3      	ldrh	r3, [r2, r3]
 800365e:	0019      	movs	r1, r3
 8003660:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8003662:	f7fc fd4f 	bl	8000104 <__udivsi3>
 8003666:	0003      	movs	r3, r0
 8003668:	005a      	lsls	r2, r3, #1
 800366a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800366c:	685b      	ldr	r3, [r3, #4]
 800366e:	085b      	lsrs	r3, r3, #1
 8003670:	18d2      	adds	r2, r2, r3
 8003672:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003674:	685b      	ldr	r3, [r3, #4]
 8003676:	0019      	movs	r1, r3
 8003678:	0010      	movs	r0, r2
 800367a:	f7fc fd43 	bl	8000104 <__udivsi3>
 800367e:	0003      	movs	r3, r0
 8003680:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003682:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003684:	2b0f      	cmp	r3, #15
 8003686:	d921      	bls.n	80036cc <UART_SetConfig+0x488>
 8003688:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800368a:	2380      	movs	r3, #128	; 0x80
 800368c:	025b      	lsls	r3, r3, #9
 800368e:	429a      	cmp	r2, r3
 8003690:	d21c      	bcs.n	80036cc <UART_SetConfig+0x488>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003692:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003694:	b29a      	uxth	r2, r3
 8003696:	200e      	movs	r0, #14
 8003698:	2420      	movs	r4, #32
 800369a:	1903      	adds	r3, r0, r4
 800369c:	19db      	adds	r3, r3, r7
 800369e:	210f      	movs	r1, #15
 80036a0:	438a      	bics	r2, r1
 80036a2:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80036a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036a6:	085b      	lsrs	r3, r3, #1
 80036a8:	b29b      	uxth	r3, r3
 80036aa:	2207      	movs	r2, #7
 80036ac:	4013      	ands	r3, r2
 80036ae:	b299      	uxth	r1, r3
 80036b0:	1903      	adds	r3, r0, r4
 80036b2:	19db      	adds	r3, r3, r7
 80036b4:	1902      	adds	r2, r0, r4
 80036b6:	19d2      	adds	r2, r2, r7
 80036b8:	8812      	ldrh	r2, [r2, #0]
 80036ba:	430a      	orrs	r2, r1
 80036bc:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 80036be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	1902      	adds	r2, r0, r4
 80036c4:	19d2      	adds	r2, r2, r7
 80036c6:	8812      	ldrh	r2, [r2, #0]
 80036c8:	60da      	str	r2, [r3, #12]
 80036ca:	e05e      	b.n	800378a <UART_SetConfig+0x546>
      }
      else
      {
        ret = HAL_ERROR;
 80036cc:	231a      	movs	r3, #26
 80036ce:	2220      	movs	r2, #32
 80036d0:	189b      	adds	r3, r3, r2
 80036d2:	19db      	adds	r3, r3, r7
 80036d4:	2201      	movs	r2, #1
 80036d6:	701a      	strb	r2, [r3, #0]
 80036d8:	e057      	b.n	800378a <UART_SetConfig+0x546>
      }
    }
  }
  else
  {
    switch (clocksource)
 80036da:	231b      	movs	r3, #27
 80036dc:	2220      	movs	r2, #32
 80036de:	189b      	adds	r3, r3, r2
 80036e0:	19db      	adds	r3, r3, r7
 80036e2:	781b      	ldrb	r3, [r3, #0]
 80036e4:	2b08      	cmp	r3, #8
 80036e6:	d015      	beq.n	8003714 <UART_SetConfig+0x4d0>
 80036e8:	dc18      	bgt.n	800371c <UART_SetConfig+0x4d8>
 80036ea:	2b04      	cmp	r3, #4
 80036ec:	d00d      	beq.n	800370a <UART_SetConfig+0x4c6>
 80036ee:	dc15      	bgt.n	800371c <UART_SetConfig+0x4d8>
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d002      	beq.n	80036fa <UART_SetConfig+0x4b6>
 80036f4:	2b02      	cmp	r3, #2
 80036f6:	d005      	beq.n	8003704 <UART_SetConfig+0x4c0>
 80036f8:	e010      	b.n	800371c <UART_SetConfig+0x4d8>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80036fa:	f7fe fc35 	bl	8001f68 <HAL_RCC_GetPCLK1Freq>
 80036fe:	0003      	movs	r3, r0
 8003700:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003702:	e014      	b.n	800372e <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003704:	4b2d      	ldr	r3, [pc, #180]	; (80037bc <UART_SetConfig+0x578>)
 8003706:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003708:	e011      	b.n	800372e <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800370a:	f7fe fba1 	bl	8001e50 <HAL_RCC_GetSysClockFreq>
 800370e:	0003      	movs	r3, r0
 8003710:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003712:	e00c      	b.n	800372e <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003714:	2380      	movs	r3, #128	; 0x80
 8003716:	021b      	lsls	r3, r3, #8
 8003718:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800371a:	e008      	b.n	800372e <UART_SetConfig+0x4ea>
      default:
        pclk = 0U;
 800371c:	2300      	movs	r3, #0
 800371e:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8003720:	231a      	movs	r3, #26
 8003722:	2220      	movs	r2, #32
 8003724:	189b      	adds	r3, r3, r2
 8003726:	19db      	adds	r3, r3, r7
 8003728:	2201      	movs	r2, #1
 800372a:	701a      	strb	r2, [r3, #0]
        break;
 800372c:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 800372e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003730:	2b00      	cmp	r3, #0
 8003732:	d02a      	beq.n	800378a <UART_SetConfig+0x546>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003734:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003736:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003738:	4b1f      	ldr	r3, [pc, #124]	; (80037b8 <UART_SetConfig+0x574>)
 800373a:	0052      	lsls	r2, r2, #1
 800373c:	5ad3      	ldrh	r3, [r2, r3]
 800373e:	0019      	movs	r1, r3
 8003740:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8003742:	f7fc fcdf 	bl	8000104 <__udivsi3>
 8003746:	0003      	movs	r3, r0
 8003748:	001a      	movs	r2, r3
 800374a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800374c:	685b      	ldr	r3, [r3, #4]
 800374e:	085b      	lsrs	r3, r3, #1
 8003750:	18d2      	adds	r2, r2, r3
 8003752:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003754:	685b      	ldr	r3, [r3, #4]
 8003756:	0019      	movs	r1, r3
 8003758:	0010      	movs	r0, r2
 800375a:	f7fc fcd3 	bl	8000104 <__udivsi3>
 800375e:	0003      	movs	r3, r0
 8003760:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003762:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003764:	2b0f      	cmp	r3, #15
 8003766:	d90a      	bls.n	800377e <UART_SetConfig+0x53a>
 8003768:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800376a:	2380      	movs	r3, #128	; 0x80
 800376c:	025b      	lsls	r3, r3, #9
 800376e:	429a      	cmp	r2, r3
 8003770:	d205      	bcs.n	800377e <UART_SetConfig+0x53a>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003772:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003774:	b29a      	uxth	r2, r3
 8003776:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	60da      	str	r2, [r3, #12]
 800377c:	e005      	b.n	800378a <UART_SetConfig+0x546>
      }
      else
      {
        ret = HAL_ERROR;
 800377e:	231a      	movs	r3, #26
 8003780:	2220      	movs	r2, #32
 8003782:	189b      	adds	r3, r3, r2
 8003784:	19db      	adds	r3, r3, r7
 8003786:	2201      	movs	r2, #1
 8003788:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800378a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800378c:	226a      	movs	r2, #106	; 0x6a
 800378e:	2101      	movs	r1, #1
 8003790:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 8003792:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003794:	2268      	movs	r2, #104	; 0x68
 8003796:	2101      	movs	r1, #1
 8003798:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800379a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800379c:	2200      	movs	r2, #0
 800379e:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 80037a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037a2:	2200      	movs	r2, #0
 80037a4:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 80037a6:	231a      	movs	r3, #26
 80037a8:	2220      	movs	r2, #32
 80037aa:	189b      	adds	r3, r3, r2
 80037ac:	19db      	adds	r3, r3, r7
 80037ae:	781b      	ldrb	r3, [r3, #0]
}
 80037b0:	0018      	movs	r0, r3
 80037b2:	46bd      	mov	sp, r7
 80037b4:	b010      	add	sp, #64	; 0x40
 80037b6:	bdb0      	pop	{r4, r5, r7, pc}
 80037b8:	08003eac 	.word	0x08003eac
 80037bc:	00f42400 	.word	0x00f42400

080037c0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80037c0:	b580      	push	{r7, lr}
 80037c2:	b082      	sub	sp, #8
 80037c4:	af00      	add	r7, sp, #0
 80037c6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037cc:	2201      	movs	r2, #1
 80037ce:	4013      	ands	r3, r2
 80037d0:	d00b      	beq.n	80037ea <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	685b      	ldr	r3, [r3, #4]
 80037d8:	4a4a      	ldr	r2, [pc, #296]	; (8003904 <UART_AdvFeatureConfig+0x144>)
 80037da:	4013      	ands	r3, r2
 80037dc:	0019      	movs	r1, r3
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	430a      	orrs	r2, r1
 80037e8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037ee:	2202      	movs	r2, #2
 80037f0:	4013      	ands	r3, r2
 80037f2:	d00b      	beq.n	800380c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	685b      	ldr	r3, [r3, #4]
 80037fa:	4a43      	ldr	r2, [pc, #268]	; (8003908 <UART_AdvFeatureConfig+0x148>)
 80037fc:	4013      	ands	r3, r2
 80037fe:	0019      	movs	r1, r3
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	430a      	orrs	r2, r1
 800380a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003810:	2204      	movs	r2, #4
 8003812:	4013      	ands	r3, r2
 8003814:	d00b      	beq.n	800382e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	685b      	ldr	r3, [r3, #4]
 800381c:	4a3b      	ldr	r2, [pc, #236]	; (800390c <UART_AdvFeatureConfig+0x14c>)
 800381e:	4013      	ands	r3, r2
 8003820:	0019      	movs	r1, r3
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	430a      	orrs	r2, r1
 800382c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003832:	2208      	movs	r2, #8
 8003834:	4013      	ands	r3, r2
 8003836:	d00b      	beq.n	8003850 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	685b      	ldr	r3, [r3, #4]
 800383e:	4a34      	ldr	r2, [pc, #208]	; (8003910 <UART_AdvFeatureConfig+0x150>)
 8003840:	4013      	ands	r3, r2
 8003842:	0019      	movs	r1, r3
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	430a      	orrs	r2, r1
 800384e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003854:	2210      	movs	r2, #16
 8003856:	4013      	ands	r3, r2
 8003858:	d00b      	beq.n	8003872 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	689b      	ldr	r3, [r3, #8]
 8003860:	4a2c      	ldr	r2, [pc, #176]	; (8003914 <UART_AdvFeatureConfig+0x154>)
 8003862:	4013      	ands	r3, r2
 8003864:	0019      	movs	r1, r3
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	430a      	orrs	r2, r1
 8003870:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003876:	2220      	movs	r2, #32
 8003878:	4013      	ands	r3, r2
 800387a:	d00b      	beq.n	8003894 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	689b      	ldr	r3, [r3, #8]
 8003882:	4a25      	ldr	r2, [pc, #148]	; (8003918 <UART_AdvFeatureConfig+0x158>)
 8003884:	4013      	ands	r3, r2
 8003886:	0019      	movs	r1, r3
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	430a      	orrs	r2, r1
 8003892:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003898:	2240      	movs	r2, #64	; 0x40
 800389a:	4013      	ands	r3, r2
 800389c:	d01d      	beq.n	80038da <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	685b      	ldr	r3, [r3, #4]
 80038a4:	4a1d      	ldr	r2, [pc, #116]	; (800391c <UART_AdvFeatureConfig+0x15c>)
 80038a6:	4013      	ands	r3, r2
 80038a8:	0019      	movs	r1, r3
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	430a      	orrs	r2, r1
 80038b4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80038ba:	2380      	movs	r3, #128	; 0x80
 80038bc:	035b      	lsls	r3, r3, #13
 80038be:	429a      	cmp	r2, r3
 80038c0:	d10b      	bne.n	80038da <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	685b      	ldr	r3, [r3, #4]
 80038c8:	4a15      	ldr	r2, [pc, #84]	; (8003920 <UART_AdvFeatureConfig+0x160>)
 80038ca:	4013      	ands	r3, r2
 80038cc:	0019      	movs	r1, r3
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	430a      	orrs	r2, r1
 80038d8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038de:	2280      	movs	r2, #128	; 0x80
 80038e0:	4013      	ands	r3, r2
 80038e2:	d00b      	beq.n	80038fc <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	685b      	ldr	r3, [r3, #4]
 80038ea:	4a0e      	ldr	r2, [pc, #56]	; (8003924 <UART_AdvFeatureConfig+0x164>)
 80038ec:	4013      	ands	r3, r2
 80038ee:	0019      	movs	r1, r3
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	430a      	orrs	r2, r1
 80038fa:	605a      	str	r2, [r3, #4]
  }
}
 80038fc:	46c0      	nop			; (mov r8, r8)
 80038fe:	46bd      	mov	sp, r7
 8003900:	b002      	add	sp, #8
 8003902:	bd80      	pop	{r7, pc}
 8003904:	fffdffff 	.word	0xfffdffff
 8003908:	fffeffff 	.word	0xfffeffff
 800390c:	fffbffff 	.word	0xfffbffff
 8003910:	ffff7fff 	.word	0xffff7fff
 8003914:	ffffefff 	.word	0xffffefff
 8003918:	ffffdfff 	.word	0xffffdfff
 800391c:	ffefffff 	.word	0xffefffff
 8003920:	ff9fffff 	.word	0xff9fffff
 8003924:	fff7ffff 	.word	0xfff7ffff

08003928 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003928:	b580      	push	{r7, lr}
 800392a:	b086      	sub	sp, #24
 800392c:	af02      	add	r7, sp, #8
 800392e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	2290      	movs	r2, #144	; 0x90
 8003934:	2100      	movs	r1, #0
 8003936:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003938:	f7fd fbb8 	bl	80010ac <HAL_GetTick>
 800393c:	0003      	movs	r3, r0
 800393e:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	2208      	movs	r2, #8
 8003948:	4013      	ands	r3, r2
 800394a:	2b08      	cmp	r3, #8
 800394c:	d10c      	bne.n	8003968 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	2280      	movs	r2, #128	; 0x80
 8003952:	0391      	lsls	r1, r2, #14
 8003954:	6878      	ldr	r0, [r7, #4]
 8003956:	4a1a      	ldr	r2, [pc, #104]	; (80039c0 <UART_CheckIdleState+0x98>)
 8003958:	9200      	str	r2, [sp, #0]
 800395a:	2200      	movs	r2, #0
 800395c:	f000 f832 	bl	80039c4 <UART_WaitOnFlagUntilTimeout>
 8003960:	1e03      	subs	r3, r0, #0
 8003962:	d001      	beq.n	8003968 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003964:	2303      	movs	r3, #3
 8003966:	e026      	b.n	80039b6 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	2204      	movs	r2, #4
 8003970:	4013      	ands	r3, r2
 8003972:	2b04      	cmp	r3, #4
 8003974:	d10c      	bne.n	8003990 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	2280      	movs	r2, #128	; 0x80
 800397a:	03d1      	lsls	r1, r2, #15
 800397c:	6878      	ldr	r0, [r7, #4]
 800397e:	4a10      	ldr	r2, [pc, #64]	; (80039c0 <UART_CheckIdleState+0x98>)
 8003980:	9200      	str	r2, [sp, #0]
 8003982:	2200      	movs	r2, #0
 8003984:	f000 f81e 	bl	80039c4 <UART_WaitOnFlagUntilTimeout>
 8003988:	1e03      	subs	r3, r0, #0
 800398a:	d001      	beq.n	8003990 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800398c:	2303      	movs	r3, #3
 800398e:	e012      	b.n	80039b6 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	2288      	movs	r2, #136	; 0x88
 8003994:	2120      	movs	r1, #32
 8003996:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	228c      	movs	r2, #140	; 0x8c
 800399c:	2120      	movs	r1, #32
 800399e:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	2200      	movs	r2, #0
 80039a4:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	2200      	movs	r2, #0
 80039aa:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	2284      	movs	r2, #132	; 0x84
 80039b0:	2100      	movs	r1, #0
 80039b2:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80039b4:	2300      	movs	r3, #0
}
 80039b6:	0018      	movs	r0, r3
 80039b8:	46bd      	mov	sp, r7
 80039ba:	b004      	add	sp, #16
 80039bc:	bd80      	pop	{r7, pc}
 80039be:	46c0      	nop			; (mov r8, r8)
 80039c0:	01ffffff 	.word	0x01ffffff

080039c4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80039c4:	b580      	push	{r7, lr}
 80039c6:	b094      	sub	sp, #80	; 0x50
 80039c8:	af00      	add	r7, sp, #0
 80039ca:	60f8      	str	r0, [r7, #12]
 80039cc:	60b9      	str	r1, [r7, #8]
 80039ce:	603b      	str	r3, [r7, #0]
 80039d0:	1dfb      	adds	r3, r7, #7
 80039d2:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80039d4:	e0a7      	b.n	8003b26 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80039d6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80039d8:	3301      	adds	r3, #1
 80039da:	d100      	bne.n	80039de <UART_WaitOnFlagUntilTimeout+0x1a>
 80039dc:	e0a3      	b.n	8003b26 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80039de:	f7fd fb65 	bl	80010ac <HAL_GetTick>
 80039e2:	0002      	movs	r2, r0
 80039e4:	683b      	ldr	r3, [r7, #0]
 80039e6:	1ad3      	subs	r3, r2, r3
 80039e8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80039ea:	429a      	cmp	r2, r3
 80039ec:	d302      	bcc.n	80039f4 <UART_WaitOnFlagUntilTimeout+0x30>
 80039ee:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d13f      	bne.n	8003a74 <UART_WaitOnFlagUntilTimeout+0xb0>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80039f4:	f3ef 8310 	mrs	r3, PRIMASK
 80039f8:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 80039fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80039fc:	647b      	str	r3, [r7, #68]	; 0x44
 80039fe:	2301      	movs	r3, #1
 8003a00:	62fb      	str	r3, [r7, #44]	; 0x2c
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a04:	f383 8810 	msr	PRIMASK, r3
}
 8003a08:	46c0      	nop			; (mov r8, r8)
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	681a      	ldr	r2, [r3, #0]
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	494e      	ldr	r1, [pc, #312]	; (8003b50 <UART_WaitOnFlagUntilTimeout+0x18c>)
 8003a16:	400a      	ands	r2, r1
 8003a18:	601a      	str	r2, [r3, #0]
 8003a1a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003a1c:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a20:	f383 8810 	msr	PRIMASK, r3
}
 8003a24:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003a26:	f3ef 8310 	mrs	r3, PRIMASK
 8003a2a:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8003a2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003a2e:	643b      	str	r3, [r7, #64]	; 0x40
 8003a30:	2301      	movs	r3, #1
 8003a32:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a36:	f383 8810 	msr	PRIMASK, r3
}
 8003a3a:	46c0      	nop			; (mov r8, r8)
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	689a      	ldr	r2, [r3, #8]
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	2101      	movs	r1, #1
 8003a48:	438a      	bics	r2, r1
 8003a4a:	609a      	str	r2, [r3, #8]
 8003a4c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003a4e:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a50:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003a52:	f383 8810 	msr	PRIMASK, r3
}
 8003a56:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	2288      	movs	r2, #136	; 0x88
 8003a5c:	2120      	movs	r1, #32
 8003a5e:	5099      	str	r1, [r3, r2]
        huart->RxState = HAL_UART_STATE_READY;
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	228c      	movs	r2, #140	; 0x8c
 8003a64:	2120      	movs	r1, #32
 8003a66:	5099      	str	r1, [r3, r2]

        __HAL_UNLOCK(huart);
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	2284      	movs	r2, #132	; 0x84
 8003a6c:	2100      	movs	r1, #0
 8003a6e:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8003a70:	2303      	movs	r3, #3
 8003a72:	e069      	b.n	8003b48 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	2204      	movs	r2, #4
 8003a7c:	4013      	ands	r3, r2
 8003a7e:	d052      	beq.n	8003b26 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	69da      	ldr	r2, [r3, #28]
 8003a86:	2380      	movs	r3, #128	; 0x80
 8003a88:	011b      	lsls	r3, r3, #4
 8003a8a:	401a      	ands	r2, r3
 8003a8c:	2380      	movs	r3, #128	; 0x80
 8003a8e:	011b      	lsls	r3, r3, #4
 8003a90:	429a      	cmp	r2, r3
 8003a92:	d148      	bne.n	8003b26 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	2280      	movs	r2, #128	; 0x80
 8003a9a:	0112      	lsls	r2, r2, #4
 8003a9c:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003a9e:	f3ef 8310 	mrs	r3, PRIMASK
 8003aa2:	613b      	str	r3, [r7, #16]
  return(result);
 8003aa4:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8003aa6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003aa8:	2301      	movs	r3, #1
 8003aaa:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003aac:	697b      	ldr	r3, [r7, #20]
 8003aae:	f383 8810 	msr	PRIMASK, r3
}
 8003ab2:	46c0      	nop			; (mov r8, r8)
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	681a      	ldr	r2, [r3, #0]
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	4924      	ldr	r1, [pc, #144]	; (8003b50 <UART_WaitOnFlagUntilTimeout+0x18c>)
 8003ac0:	400a      	ands	r2, r1
 8003ac2:	601a      	str	r2, [r3, #0]
 8003ac4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003ac6:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003ac8:	69bb      	ldr	r3, [r7, #24]
 8003aca:	f383 8810 	msr	PRIMASK, r3
}
 8003ace:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003ad0:	f3ef 8310 	mrs	r3, PRIMASK
 8003ad4:	61fb      	str	r3, [r7, #28]
  return(result);
 8003ad6:	69fb      	ldr	r3, [r7, #28]
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003ad8:	64bb      	str	r3, [r7, #72]	; 0x48
 8003ada:	2301      	movs	r3, #1
 8003adc:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003ade:	6a3b      	ldr	r3, [r7, #32]
 8003ae0:	f383 8810 	msr	PRIMASK, r3
}
 8003ae4:	46c0      	nop			; (mov r8, r8)
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	689a      	ldr	r2, [r3, #8]
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	2101      	movs	r1, #1
 8003af2:	438a      	bics	r2, r1
 8003af4:	609a      	str	r2, [r3, #8]
 8003af6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003af8:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003afa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003afc:	f383 8810 	msr	PRIMASK, r3
}
 8003b00:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	2288      	movs	r2, #136	; 0x88
 8003b06:	2120      	movs	r1, #32
 8003b08:	5099      	str	r1, [r3, r2]
          huart->RxState = HAL_UART_STATE_READY;
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	228c      	movs	r2, #140	; 0x8c
 8003b0e:	2120      	movs	r1, #32
 8003b10:	5099      	str	r1, [r3, r2]
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	2290      	movs	r2, #144	; 0x90
 8003b16:	2120      	movs	r1, #32
 8003b18:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	2284      	movs	r2, #132	; 0x84
 8003b1e:	2100      	movs	r1, #0
 8003b20:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8003b22:	2303      	movs	r3, #3
 8003b24:	e010      	b.n	8003b48 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	69db      	ldr	r3, [r3, #28]
 8003b2c:	68ba      	ldr	r2, [r7, #8]
 8003b2e:	4013      	ands	r3, r2
 8003b30:	68ba      	ldr	r2, [r7, #8]
 8003b32:	1ad3      	subs	r3, r2, r3
 8003b34:	425a      	negs	r2, r3
 8003b36:	4153      	adcs	r3, r2
 8003b38:	b2db      	uxtb	r3, r3
 8003b3a:	001a      	movs	r2, r3
 8003b3c:	1dfb      	adds	r3, r7, #7
 8003b3e:	781b      	ldrb	r3, [r3, #0]
 8003b40:	429a      	cmp	r2, r3
 8003b42:	d100      	bne.n	8003b46 <UART_WaitOnFlagUntilTimeout+0x182>
 8003b44:	e747      	b.n	80039d6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003b46:	2300      	movs	r3, #0
}
 8003b48:	0018      	movs	r0, r3
 8003b4a:	46bd      	mov	sp, r7
 8003b4c:	b014      	add	sp, #80	; 0x50
 8003b4e:	bd80      	pop	{r7, pc}
 8003b50:	fffffe5f 	.word	0xfffffe5f

08003b54 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8003b54:	b580      	push	{r7, lr}
 8003b56:	b084      	sub	sp, #16
 8003b58:	af00      	add	r7, sp, #0
 8003b5a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	2284      	movs	r2, #132	; 0x84
 8003b60:	5c9b      	ldrb	r3, [r3, r2]
 8003b62:	2b01      	cmp	r3, #1
 8003b64:	d101      	bne.n	8003b6a <HAL_UARTEx_DisableFifoMode+0x16>
 8003b66:	2302      	movs	r3, #2
 8003b68:	e027      	b.n	8003bba <HAL_UARTEx_DisableFifoMode+0x66>
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	2284      	movs	r2, #132	; 0x84
 8003b6e:	2101      	movs	r1, #1
 8003b70:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	2288      	movs	r2, #136	; 0x88
 8003b76:	2124      	movs	r1, #36	; 0x24
 8003b78:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	681a      	ldr	r2, [r3, #0]
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	2101      	movs	r1, #1
 8003b8e:	438a      	bics	r2, r1
 8003b90:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	4a0b      	ldr	r2, [pc, #44]	; (8003bc4 <HAL_UARTEx_DisableFifoMode+0x70>)
 8003b96:	4013      	ands	r3, r2
 8003b98:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	2200      	movs	r2, #0
 8003b9e:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	68fa      	ldr	r2, [r7, #12]
 8003ba6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	2288      	movs	r2, #136	; 0x88
 8003bac:	2120      	movs	r1, #32
 8003bae:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	2284      	movs	r2, #132	; 0x84
 8003bb4:	2100      	movs	r1, #0
 8003bb6:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003bb8:	2300      	movs	r3, #0
}
 8003bba:	0018      	movs	r0, r3
 8003bbc:	46bd      	mov	sp, r7
 8003bbe:	b004      	add	sp, #16
 8003bc0:	bd80      	pop	{r7, pc}
 8003bc2:	46c0      	nop			; (mov r8, r8)
 8003bc4:	dfffffff 	.word	0xdfffffff

08003bc8 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8003bc8:	b580      	push	{r7, lr}
 8003bca:	b084      	sub	sp, #16
 8003bcc:	af00      	add	r7, sp, #0
 8003bce:	6078      	str	r0, [r7, #4]
 8003bd0:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	2284      	movs	r2, #132	; 0x84
 8003bd6:	5c9b      	ldrb	r3, [r3, r2]
 8003bd8:	2b01      	cmp	r3, #1
 8003bda:	d101      	bne.n	8003be0 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8003bdc:	2302      	movs	r3, #2
 8003bde:	e02e      	b.n	8003c3e <HAL_UARTEx_SetTxFifoThreshold+0x76>
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	2284      	movs	r2, #132	; 0x84
 8003be4:	2101      	movs	r1, #1
 8003be6:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	2288      	movs	r2, #136	; 0x88
 8003bec:	2124      	movs	r1, #36	; 0x24
 8003bee:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	681a      	ldr	r2, [r3, #0]
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	2101      	movs	r1, #1
 8003c04:	438a      	bics	r2, r1
 8003c06:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	689b      	ldr	r3, [r3, #8]
 8003c0e:	00db      	lsls	r3, r3, #3
 8003c10:	08d9      	lsrs	r1, r3, #3
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	683a      	ldr	r2, [r7, #0]
 8003c18:	430a      	orrs	r2, r1
 8003c1a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	0018      	movs	r0, r3
 8003c20:	f000 f854 	bl	8003ccc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	68fa      	ldr	r2, [r7, #12]
 8003c2a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	2288      	movs	r2, #136	; 0x88
 8003c30:	2120      	movs	r1, #32
 8003c32:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	2284      	movs	r2, #132	; 0x84
 8003c38:	2100      	movs	r1, #0
 8003c3a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003c3c:	2300      	movs	r3, #0
}
 8003c3e:	0018      	movs	r0, r3
 8003c40:	46bd      	mov	sp, r7
 8003c42:	b004      	add	sp, #16
 8003c44:	bd80      	pop	{r7, pc}
	...

08003c48 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8003c48:	b580      	push	{r7, lr}
 8003c4a:	b084      	sub	sp, #16
 8003c4c:	af00      	add	r7, sp, #0
 8003c4e:	6078      	str	r0, [r7, #4]
 8003c50:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	2284      	movs	r2, #132	; 0x84
 8003c56:	5c9b      	ldrb	r3, [r3, r2]
 8003c58:	2b01      	cmp	r3, #1
 8003c5a:	d101      	bne.n	8003c60 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8003c5c:	2302      	movs	r3, #2
 8003c5e:	e02f      	b.n	8003cc0 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	2284      	movs	r2, #132	; 0x84
 8003c64:	2101      	movs	r1, #1
 8003c66:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	2288      	movs	r2, #136	; 0x88
 8003c6c:	2124      	movs	r1, #36	; 0x24
 8003c6e:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	681a      	ldr	r2, [r3, #0]
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	2101      	movs	r1, #1
 8003c84:	438a      	bics	r2, r1
 8003c86:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	689b      	ldr	r3, [r3, #8]
 8003c8e:	4a0e      	ldr	r2, [pc, #56]	; (8003cc8 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 8003c90:	4013      	ands	r3, r2
 8003c92:	0019      	movs	r1, r3
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	683a      	ldr	r2, [r7, #0]
 8003c9a:	430a      	orrs	r2, r1
 8003c9c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	0018      	movs	r0, r3
 8003ca2:	f000 f813 	bl	8003ccc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	68fa      	ldr	r2, [r7, #12]
 8003cac:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	2288      	movs	r2, #136	; 0x88
 8003cb2:	2120      	movs	r1, #32
 8003cb4:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	2284      	movs	r2, #132	; 0x84
 8003cba:	2100      	movs	r1, #0
 8003cbc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003cbe:	2300      	movs	r3, #0
}
 8003cc0:	0018      	movs	r0, r3
 8003cc2:	46bd      	mov	sp, r7
 8003cc4:	b004      	add	sp, #16
 8003cc6:	bd80      	pop	{r7, pc}
 8003cc8:	f1ffffff 	.word	0xf1ffffff

08003ccc <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8003ccc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003cce:	b085      	sub	sp, #20
 8003cd0:	af00      	add	r7, sp, #0
 8003cd2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d108      	bne.n	8003cee <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	226a      	movs	r2, #106	; 0x6a
 8003ce0:	2101      	movs	r1, #1
 8003ce2:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	2268      	movs	r2, #104	; 0x68
 8003ce8:	2101      	movs	r1, #1
 8003cea:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8003cec:	e043      	b.n	8003d76 <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8003cee:	260f      	movs	r6, #15
 8003cf0:	19bb      	adds	r3, r7, r6
 8003cf2:	2208      	movs	r2, #8
 8003cf4:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8003cf6:	200e      	movs	r0, #14
 8003cf8:	183b      	adds	r3, r7, r0
 8003cfa:	2208      	movs	r2, #8
 8003cfc:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	689b      	ldr	r3, [r3, #8]
 8003d04:	0e5b      	lsrs	r3, r3, #25
 8003d06:	b2da      	uxtb	r2, r3
 8003d08:	240d      	movs	r4, #13
 8003d0a:	193b      	adds	r3, r7, r4
 8003d0c:	2107      	movs	r1, #7
 8003d0e:	400a      	ands	r2, r1
 8003d10:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	689b      	ldr	r3, [r3, #8]
 8003d18:	0f5b      	lsrs	r3, r3, #29
 8003d1a:	b2da      	uxtb	r2, r3
 8003d1c:	250c      	movs	r5, #12
 8003d1e:	197b      	adds	r3, r7, r5
 8003d20:	2107      	movs	r1, #7
 8003d22:	400a      	ands	r2, r1
 8003d24:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8003d26:	183b      	adds	r3, r7, r0
 8003d28:	781b      	ldrb	r3, [r3, #0]
 8003d2a:	197a      	adds	r2, r7, r5
 8003d2c:	7812      	ldrb	r2, [r2, #0]
 8003d2e:	4914      	ldr	r1, [pc, #80]	; (8003d80 <UARTEx_SetNbDataToProcess+0xb4>)
 8003d30:	5c8a      	ldrb	r2, [r1, r2]
 8003d32:	435a      	muls	r2, r3
 8003d34:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 8003d36:	197b      	adds	r3, r7, r5
 8003d38:	781b      	ldrb	r3, [r3, #0]
 8003d3a:	4a12      	ldr	r2, [pc, #72]	; (8003d84 <UARTEx_SetNbDataToProcess+0xb8>)
 8003d3c:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8003d3e:	0019      	movs	r1, r3
 8003d40:	f7fc fa6a 	bl	8000218 <__divsi3>
 8003d44:	0003      	movs	r3, r0
 8003d46:	b299      	uxth	r1, r3
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	226a      	movs	r2, #106	; 0x6a
 8003d4c:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8003d4e:	19bb      	adds	r3, r7, r6
 8003d50:	781b      	ldrb	r3, [r3, #0]
 8003d52:	193a      	adds	r2, r7, r4
 8003d54:	7812      	ldrb	r2, [r2, #0]
 8003d56:	490a      	ldr	r1, [pc, #40]	; (8003d80 <UARTEx_SetNbDataToProcess+0xb4>)
 8003d58:	5c8a      	ldrb	r2, [r1, r2]
 8003d5a:	435a      	muls	r2, r3
 8003d5c:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 8003d5e:	193b      	adds	r3, r7, r4
 8003d60:	781b      	ldrb	r3, [r3, #0]
 8003d62:	4a08      	ldr	r2, [pc, #32]	; (8003d84 <UARTEx_SetNbDataToProcess+0xb8>)
 8003d64:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8003d66:	0019      	movs	r1, r3
 8003d68:	f7fc fa56 	bl	8000218 <__divsi3>
 8003d6c:	0003      	movs	r3, r0
 8003d6e:	b299      	uxth	r1, r3
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	2268      	movs	r2, #104	; 0x68
 8003d74:	5299      	strh	r1, [r3, r2]
}
 8003d76:	46c0      	nop			; (mov r8, r8)
 8003d78:	46bd      	mov	sp, r7
 8003d7a:	b005      	add	sp, #20
 8003d7c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003d7e:	46c0      	nop			; (mov r8, r8)
 8003d80:	08003ec4 	.word	0x08003ec4
 8003d84:	08003ecc 	.word	0x08003ecc

08003d88 <memset>:
 8003d88:	0003      	movs	r3, r0
 8003d8a:	1882      	adds	r2, r0, r2
 8003d8c:	4293      	cmp	r3, r2
 8003d8e:	d100      	bne.n	8003d92 <memset+0xa>
 8003d90:	4770      	bx	lr
 8003d92:	7019      	strb	r1, [r3, #0]
 8003d94:	3301      	adds	r3, #1
 8003d96:	e7f9      	b.n	8003d8c <memset+0x4>

08003d98 <__libc_init_array>:
 8003d98:	b570      	push	{r4, r5, r6, lr}
 8003d9a:	2600      	movs	r6, #0
 8003d9c:	4c0c      	ldr	r4, [pc, #48]	; (8003dd0 <__libc_init_array+0x38>)
 8003d9e:	4d0d      	ldr	r5, [pc, #52]	; (8003dd4 <__libc_init_array+0x3c>)
 8003da0:	1b64      	subs	r4, r4, r5
 8003da2:	10a4      	asrs	r4, r4, #2
 8003da4:	42a6      	cmp	r6, r4
 8003da6:	d109      	bne.n	8003dbc <__libc_init_array+0x24>
 8003da8:	2600      	movs	r6, #0
 8003daa:	f000 f819 	bl	8003de0 <_init>
 8003dae:	4c0a      	ldr	r4, [pc, #40]	; (8003dd8 <__libc_init_array+0x40>)
 8003db0:	4d0a      	ldr	r5, [pc, #40]	; (8003ddc <__libc_init_array+0x44>)
 8003db2:	1b64      	subs	r4, r4, r5
 8003db4:	10a4      	asrs	r4, r4, #2
 8003db6:	42a6      	cmp	r6, r4
 8003db8:	d105      	bne.n	8003dc6 <__libc_init_array+0x2e>
 8003dba:	bd70      	pop	{r4, r5, r6, pc}
 8003dbc:	00b3      	lsls	r3, r6, #2
 8003dbe:	58eb      	ldr	r3, [r5, r3]
 8003dc0:	4798      	blx	r3
 8003dc2:	3601      	adds	r6, #1
 8003dc4:	e7ee      	b.n	8003da4 <__libc_init_array+0xc>
 8003dc6:	00b3      	lsls	r3, r6, #2
 8003dc8:	58eb      	ldr	r3, [r5, r3]
 8003dca:	4798      	blx	r3
 8003dcc:	3601      	adds	r6, #1
 8003dce:	e7f2      	b.n	8003db6 <__libc_init_array+0x1e>
 8003dd0:	08003edc 	.word	0x08003edc
 8003dd4:	08003edc 	.word	0x08003edc
 8003dd8:	08003ee0 	.word	0x08003ee0
 8003ddc:	08003edc 	.word	0x08003edc

08003de0 <_init>:
 8003de0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003de2:	46c0      	nop			; (mov r8, r8)
 8003de4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003de6:	bc08      	pop	{r3}
 8003de8:	469e      	mov	lr, r3
 8003dea:	4770      	bx	lr

08003dec <_fini>:
 8003dec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003dee:	46c0      	nop			; (mov r8, r8)
 8003df0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003df2:	bc08      	pop	{r3}
 8003df4:	469e      	mov	lr, r3
 8003df6:	4770      	bx	lr
